/*
 * Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */
/**
 * 
 */
package sql.sqlutil;

import hydra.Log;

import java.sql.SQLException;

import util.TestException;
import util.TestHelper;

import com.pivotal.gemfirexd.callbacks.Event;
import com.pivotal.gemfirexd.callbacks.EventCallback;
import com.pivotal.gemfirexd.callbacks.TableMetaData;

/**
 * @author lynng
 *
 */
public class SqlLogListener implements EventCallback {

  @Override
  public void onEvent(Event event) throws SQLException {
    StringBuilder aStr = new StringBuilder();
    aStr.append("Invoked " + this.getClass().getName() + ".onEvent " + event + "\n");
    aStr.append(eventToString(event));
    Log.getLogWriter().info(aStr.toString());
  }

  /** Return a String describing the given event
   */
  private String eventToString(Event event) {
    StringBuilder aStr = new StringBuilder();
    //Bug 48772 aStr.append("  getDMLString(): " + event.getDMLString() + "\n");
    aStr.append("  getNewRowsAsResultSet(): " + event.getNewRowsAsResultSet() + "\n");
    aStr.append("  getOldRowAsResultSet(): " + event.getOldRowAsResultSet() + "\n");
// to much logging to include all that can be retrieved
//    aStr.append("  getPrimaryKeysAsResultSet(): " + event.getPrimaryKeysAsResultSet() + "\n");
//    TableMetaData metaData = event.getResultSetMetaData();
//    aStr.append("  getResultSetMetaData(): " + metaData + "\n");
//    aStr.append(metaDataToString(metaData));
    aStr.append("  getSchemaName(): " + event.getSchemaName() + "\n");
    aStr.append("  getTableName(): " + event.getTableName() + "\n");
//    aStr.append("  getTableSchemaVersion(): " + event.getTableSchemaVersion() + "\n");
//    aStr.append("  getType(): " + event.getType() + "\n");
//    aStr.append("  hasParameters(): " + event.hasParameters() + "\n");
//    aStr.append("  isEviction(): " + event.isEviction() + "\n");
//    aStr.append("  isExpiration(): " + event.isExpiration() + "\n");
//    aStr.append("  isLoad(): " + event.isLoad() + "\n");
//    aStr.append("  isOriginRemote(): " + event.isOriginRemote() + "\n");
//    aStr.append("  isPossibleDuplicate(): " + event.isPossibleDuplicate() + "\n");
//    aStr.append("  isTransactional(): " + event.isTransactional() + "\n");
//    aStr.append("  tableHasAutogeneratedColumns(): " + event.tableHasAutogeneratedColumns() + "\n");
    return aStr.toString();
  }

  private String metaDataToString(TableMetaData metaData) {
    StringBuilder aStr = new StringBuilder();
    try {
      int numColumns = metaData.getColumnCount();
      for (int column = 1; column <= numColumns; column++) {
        String columnName = metaData.getColumnName(column);
        aStr.append("    Column name " + columnName + ", column index " + column + "\n");
        aStr.append("      getCatalogName(" + column + "): " + metaData.getCatalogName(column) + "\n");
        aStr.append("      getColumnClassName(" + column + "): " + metaData.getColumnClassName(column) + "\n");
        aStr.append("      getColumnDisplaySize(" + column + "): " + metaData.getColumnDisplaySize(column) + "\n");
        aStr.append("      getColumnLabel(" + column + "): " + metaData.getColumnLabel(column) + "\n");
        aStr.append("      getColumnName(" + column + "): " + columnName + "\n");
        aStr.append("      getColumnPosition(" + columnName + "): " + metaData.getColumnPosition(columnName) + "\n");
        aStr.append("      getColumnType(" + column + ") " + metaData.getColumnType(column) + "\n");
        aStr.append("      getColumnTypeName(" + column + "): " + metaData.getColumnTypeName(column) + "\n");
        aStr.append("      getDeclaredColumnWidth(" + column + "): " + metaData.getDeclaredColumnWidth(column) + "\n");
        aStr.append("      getPrecision(" + column + "): " + metaData.getPrecision(column) + "\n");
        aStr.append("      getScale(" + column + "): " + metaData.getScale(column) + "\n");
        aStr.append("      getSchemaName(" + column + "): " + metaData.getSchemaName(column) + "\n");
        aStr.append("      getSchemaVersion(): " + metaData.getSchemaVersion() + "\n");
        aStr.append("      getTableColumnPosition(" + column + "): " + metaData.getTableColumnPosition(column) + "\n");
        aStr.append("      getTableName(" + column + "): " + metaData.getTableName(column) + "\n");
        aStr.append("      isAutoIncrement(" + column + "): " + metaData.isAutoIncrement(column) + "\n");
        aStr.append("      isCaseSensitive(" + column + "): " + metaData.isCaseSensitive(column) + "\n");
        aStr.append("      isCurrency(" + column + "): " + metaData.isCurrency(column) + "\n");
        aStr.append("      isDefinitielyWriteable(" + column + "): " + metaData.isDefinitelyWritable(column) + "\n");
        aStr.append("      isNullable(" + column + "): " + metaData.isNullable(column) + "\n");
        aStr.append("      isReadOnly(" + column + "): " + metaData.isReadOnly(column) + "\n");
        aStr.append("      isSearchable(" + column + "): " + metaData.isSearchable(column) + "\n");
        aStr.append("      isSigned(" + column + "): " + metaData.isSigned(column) + "\n");
        aStr.append("      isWritable(" + column + "):  " + metaData.isWritable(column) + "\n");
        //aStr.append("isWrapperFor(): " + metaData.isWrapperFor(iface) + "\n");
        //aStr.append("unrap(): " + metaData.unwrap(iface) + "\n");
      }
    } catch (SQLException e) {
      throw new TestException(TestHelper.getStackTrace(e));
    }
    return aStr.toString();
  }

  @Override
  public void close() throws SQLException {
    Log.getLogWriter().info("Invoked " + this.getClass().getName() + ".close()");
  }

  @Override
  public void init(String initStr) throws SQLException {
    Log.getLogWriter().info("Invoked " + this.getClass().getName() + ".init() with " + initStr);
  }

}
