/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_FIELDVALUE_H
#define GFXD_STRUCT_FIELDVALUE_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _FieldValue__isset {
  _FieldValue__isset() : bool_val(false), byte_val(false), char_val(false), short_val(false), int_val(false), long_val(false), float_val(false), double_val(false), string_val(false), decimal_val(false), timestamp_val(false), bool_array(false), byte_array(false), char_array(false), short_array(false), int_array(false), long_array(false), float_array(false), double_array(false), string_array(false), byte_array_array(false), ref_val(false), list_val(false), native_val(false), null_val(false) {}
  bool bool_val;
  bool byte_val;
  bool char_val;
  bool short_val;
  bool int_val;
  bool long_val;
  bool float_val;
  bool double_val;
  bool string_val;
  bool decimal_val;
  bool timestamp_val;
  bool bool_array;
  bool byte_array;
  bool char_array;
  bool short_array;
  bool int_array;
  bool long_array;
  bool float_array;
  bool double_array;
  bool string_array;
  bool byte_array_array;
  bool ref_val;
  bool list_val;
  bool native_val;
  bool null_val;
} _FieldValue__isset;

class FieldValue {
 public:

  static const char* ascii_fingerprint; // = "03979632577DF49328A71486E4E4C4E9";
  static const uint8_t binary_fingerprint[16]; // = {0x03,0x97,0x96,0x32,0x57,0x7D,0xF4,0x93,0x28,0xA7,0x14,0x86,0xE4,0xE4,0xC4,0xE9};

  FieldValue() : bool_val(0), byte_val(0), char_val(0), short_val(0), int_val(0), long_val(0), float_val(0), double_val(0), string_val(), byte_array(), char_array(), ref_val(0), native_val(), null_val(0) {
  }

  virtual ~FieldValue() throw() {}

  bool bool_val;
  int8_t byte_val;
  int16_t char_val;
  int16_t short_val;
  int32_t int_val;
  int64_t long_val;
  int32_t float_val;
  double double_val;
  std::string string_val;
  Decimal decimal_val;
  Timestamp timestamp_val;
  std::vector<bool>  bool_array;
  std::string byte_array;
  std::string char_array;
  std::vector<int16_t>  short_array;
  std::vector<int32_t>  int_array;
  std::vector<int64_t>  long_array;
  std::vector<int32_t>  float_array;
  std::vector<double>  double_array;
  std::vector<std::string>  string_array;
  std::vector<std::string>  byte_array_array;
  int32_t ref_val;
  std::vector<int32_t>  list_val;
  std::string native_val;
  bool null_val;

  _FieldValue__isset __isset;

  void __set_bool_val(const bool val) {
    bool_val = val;
    __isset.bool_val = true;
  }

  void __set_byte_val(const int8_t val) {
    byte_val = val;
    __isset.byte_val = true;
  }

  void __set_char_val(const int16_t val) {
    char_val = val;
    __isset.char_val = true;
  }

  void __set_short_val(const int16_t val) {
    short_val = val;
    __isset.short_val = true;
  }

  void __set_int_val(const int32_t val) {
    int_val = val;
    __isset.int_val = true;
  }

  void __set_long_val(const int64_t val) {
    long_val = val;
    __isset.long_val = true;
  }

  void __set_float_val(const int32_t val) {
    float_val = val;
    __isset.float_val = true;
  }

  void __set_double_val(const double val) {
    double_val = val;
    __isset.double_val = true;
  }

  void __set_string_val(const std::string& val) {
    string_val = val;
    __isset.string_val = true;
  }

  void __set_decimal_val(const Decimal& val) {
    decimal_val = val;
    __isset.decimal_val = true;
  }

  void __set_timestamp_val(const Timestamp& val) {
    timestamp_val = val;
    __isset.timestamp_val = true;
  }

  void __set_bool_array(const std::vector<bool> & val) {
    bool_array = val;
    __isset.bool_array = true;
  }

  void __set_byte_array(const std::string& val) {
    byte_array = val;
    __isset.byte_array = true;
  }

  void __set_char_array(const std::string& val) {
    char_array = val;
    __isset.char_array = true;
  }

  void __set_short_array(const std::vector<int16_t> & val) {
    short_array = val;
    __isset.short_array = true;
  }

  void __set_int_array(const std::vector<int32_t> & val) {
    int_array = val;
    __isset.int_array = true;
  }

  void __set_long_array(const std::vector<int64_t> & val) {
    long_array = val;
    __isset.long_array = true;
  }

  void __set_float_array(const std::vector<int32_t> & val) {
    float_array = val;
    __isset.float_array = true;
  }

  void __set_double_array(const std::vector<double> & val) {
    double_array = val;
    __isset.double_array = true;
  }

  void __set_string_array(const std::vector<std::string> & val) {
    string_array = val;
    __isset.string_array = true;
  }

  void __set_byte_array_array(const std::vector<std::string> & val) {
    byte_array_array = val;
    __isset.byte_array_array = true;
  }

  void __set_ref_val(const int32_t val) {
    ref_val = val;
    __isset.ref_val = true;
  }

  void __set_list_val(const std::vector<int32_t> & val) {
    list_val = val;
    __isset.list_val = true;
  }

  void __set_native_val(const std::string& val) {
    native_val = val;
    __isset.native_val = true;
  }

  void __set_null_val(const bool val) {
    null_val = val;
    __isset.null_val = true;
  }

  bool operator == (const FieldValue & rhs) const
  {
    if (__isset.bool_val != rhs.__isset.bool_val)
      return false;
    else if (__isset.bool_val && !(bool_val == rhs.bool_val))
      return false;
    if (__isset.byte_val != rhs.__isset.byte_val)
      return false;
    else if (__isset.byte_val && !(byte_val == rhs.byte_val))
      return false;
    if (__isset.char_val != rhs.__isset.char_val)
      return false;
    else if (__isset.char_val && !(char_val == rhs.char_val))
      return false;
    if (__isset.short_val != rhs.__isset.short_val)
      return false;
    else if (__isset.short_val && !(short_val == rhs.short_val))
      return false;
    if (__isset.int_val != rhs.__isset.int_val)
      return false;
    else if (__isset.int_val && !(int_val == rhs.int_val))
      return false;
    if (__isset.long_val != rhs.__isset.long_val)
      return false;
    else if (__isset.long_val && !(long_val == rhs.long_val))
      return false;
    if (__isset.float_val != rhs.__isset.float_val)
      return false;
    else if (__isset.float_val && !(float_val == rhs.float_val))
      return false;
    if (__isset.double_val != rhs.__isset.double_val)
      return false;
    else if (__isset.double_val && !(double_val == rhs.double_val))
      return false;
    if (__isset.string_val != rhs.__isset.string_val)
      return false;
    else if (__isset.string_val && !(string_val == rhs.string_val))
      return false;
    if (__isset.decimal_val != rhs.__isset.decimal_val)
      return false;
    else if (__isset.decimal_val && !(decimal_val == rhs.decimal_val))
      return false;
    if (__isset.timestamp_val != rhs.__isset.timestamp_val)
      return false;
    else if (__isset.timestamp_val && !(timestamp_val == rhs.timestamp_val))
      return false;
    if (__isset.bool_array != rhs.__isset.bool_array)
      return false;
    else if (__isset.bool_array && !(bool_array == rhs.bool_array))
      return false;
    if (__isset.byte_array != rhs.__isset.byte_array)
      return false;
    else if (__isset.byte_array && !(byte_array == rhs.byte_array))
      return false;
    if (__isset.char_array != rhs.__isset.char_array)
      return false;
    else if (__isset.char_array && !(char_array == rhs.char_array))
      return false;
    if (__isset.short_array != rhs.__isset.short_array)
      return false;
    else if (__isset.short_array && !(short_array == rhs.short_array))
      return false;
    if (__isset.int_array != rhs.__isset.int_array)
      return false;
    else if (__isset.int_array && !(int_array == rhs.int_array))
      return false;
    if (__isset.long_array != rhs.__isset.long_array)
      return false;
    else if (__isset.long_array && !(long_array == rhs.long_array))
      return false;
    if (__isset.float_array != rhs.__isset.float_array)
      return false;
    else if (__isset.float_array && !(float_array == rhs.float_array))
      return false;
    if (__isset.double_array != rhs.__isset.double_array)
      return false;
    else if (__isset.double_array && !(double_array == rhs.double_array))
      return false;
    if (__isset.string_array != rhs.__isset.string_array)
      return false;
    else if (__isset.string_array && !(string_array == rhs.string_array))
      return false;
    if (__isset.byte_array_array != rhs.__isset.byte_array_array)
      return false;
    else if (__isset.byte_array_array && !(byte_array_array == rhs.byte_array_array))
      return false;
    if (__isset.ref_val != rhs.__isset.ref_val)
      return false;
    else if (__isset.ref_val && !(ref_val == rhs.ref_val))
      return false;
    if (__isset.list_val != rhs.__isset.list_val)
      return false;
    else if (__isset.list_val && !(list_val == rhs.list_val))
      return false;
    if (__isset.native_val != rhs.__isset.native_val)
      return false;
    else if (__isset.native_val && !(native_val == rhs.native_val))
      return false;
    if (__isset.null_val != rhs.__isset.null_val)
      return false;
    else if (__isset.null_val && !(null_val == rhs.null_val))
      return false;
    return true;
  }
  bool operator != (const FieldValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FieldValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FieldValue &a, FieldValue &b);

}}}} // namespace

#endif
