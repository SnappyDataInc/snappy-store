/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_PDXSCHEMA_H
#define GFXD_STRUCT_PDXSCHEMA_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {


class PDXSchema {
 public:

  static const char* ascii_fingerprint; // = "4952724FA891398142DA215A5B73EA06";
  static const uint8_t binary_fingerprint[16]; // = {0x49,0x52,0x72,0x4F,0xA8,0x91,0x39,0x81,0x42,0xDA,0x21,0x5A,0x5B,0x73,0xEA,0x06};

  PDXSchema() {
  }

  virtual ~PDXSchema() throw() {}

  std::vector<PDXSchemaNode>  nodes;

  void __set_nodes(const std::vector<PDXSchemaNode> & val) {
    nodes = val;
  }

  bool operator == (const PDXSchema & rhs) const
  {
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const PDXSchema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PDXSchema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PDXSchema &a, PDXSchema &b);

}}}} // namespace

#endif
