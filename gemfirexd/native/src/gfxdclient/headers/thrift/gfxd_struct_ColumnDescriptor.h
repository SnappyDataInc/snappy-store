/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_COLUMNDESCRIPTOR_H
#define GFXD_STRUCT_COLUMNDESCRIPTOR_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"
#include "gfxd_struct_ConnectionProperties.h"
#include "gfxd_struct_HostAddress.h"
#include "gfxd_struct_GFXDExceptionData.h"
#include "gfxd_struct_StatementAttrs.h"
#include "gfxd_struct_DateTime.h"
#include "gfxd_struct_ColumnValue.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _ColumnDescriptor__isset {
  _ColumnDescriptor__isset() : scale(false), name(false), fullTableName(false), udtTypeAndClassName(false) {}
  bool scale;
  bool name;
  bool fullTableName;
  bool udtTypeAndClassName;
} _ColumnDescriptor__isset;

class ColumnDescriptor {
 public:

  static const char* ascii_fingerprint; // = "9F7168F54DFD385C8872DC60262946AC";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0x71,0x68,0xF5,0x4D,0xFD,0x38,0x5C,0x88,0x72,0xDC,0x60,0x26,0x29,0x46,0xAC};

  ColumnDescriptor() : type((GFXDType::type)0), descFlags(0), precision(0), scale(0), name(), fullTableName(), udtTypeAndClassName() {
  }

  virtual ~ColumnDescriptor() throw() {}

  GFXDType::type type;
  int16_t descFlags;
  int16_t precision;
  int16_t scale;
  std::string name;
  std::string fullTableName;
  std::string udtTypeAndClassName;

  _ColumnDescriptor__isset __isset;

  void __set_type(const GFXDType::type val) {
    type = val;
  }

  void __set_descFlags(const int16_t val) {
    descFlags = val;
  }

  void __set_precision(const int16_t val) {
    precision = val;
  }

  void __set_scale(const int16_t val) {
    scale = val;
    __isset.scale = true;
  }

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  void __set_fullTableName(const std::string& val) {
    fullTableName = val;
    __isset.fullTableName = true;
  }

  void __set_udtTypeAndClassName(const std::string& val) {
    udtTypeAndClassName = val;
    __isset.udtTypeAndClassName = true;
  }

  bool operator == (const ColumnDescriptor & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(descFlags == rhs.descFlags))
      return false;
    if (!(precision == rhs.precision))
      return false;
    if (__isset.scale != rhs.__isset.scale)
      return false;
    else if (__isset.scale && !(scale == rhs.scale))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.fullTableName != rhs.__isset.fullTableName)
      return false;
    else if (__isset.fullTableName && !(fullTableName == rhs.fullTableName))
      return false;
    if (__isset.udtTypeAndClassName != rhs.__isset.udtTypeAndClassName)
      return false;
    else if (__isset.udtTypeAndClassName && !(udtTypeAndClassName == rhs.udtTypeAndClassName))
      return false;
    return true;
  }
  bool operator != (const ColumnDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ColumnDescriptor &a, ColumnDescriptor &b);

}}}} // namespace

#endif
