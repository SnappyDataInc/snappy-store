/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_ENTITYID_H
#define GFXD_STRUCT_ENTITYID_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"
#include "gfxd_struct_ConnectionProperties.h"
#include "gfxd_struct_HostAddress.h"
#include "gfxd_struct_GFXDExceptionData.h"
#include "gfxd_struct_StatementAttrs.h"
#include "gfxd_struct_DateTime.h"
#include "gfxd_struct_ColumnValue.h"
#include "gfxd_struct_ColumnDescriptor.h"
#include "gfxd_struct_Row.h"
#include "gfxd_struct_OutputParameter.h"
#include "gfxd_struct_RowSet.h"
#include "gfxd_struct_PrepareResult.h"
#include "gfxd_struct_UpdateResult.h"
#include "gfxd_struct_StatementResult.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _EntityId__isset {
  _EntityId__isset() : token(false) {}
  bool token;
} _EntityId__isset;

class EntityId {
 public:

  static const char* ascii_fingerprint; // = "8E21FD547A96BCF0D125E2D380A0A995";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0x21,0xFD,0x54,0x7A,0x96,0xBC,0xF0,0xD1,0x25,0xE2,0xD3,0x80,0xA0,0xA9,0x95};

  EntityId() : id(0), type(0), connId(0), token() {
  }

  virtual ~EntityId() throw() {}

  int32_t id;
  int8_t type;
  int32_t connId;
  std::string token;

  _EntityId__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  void __set_type(const int8_t val) {
    type = val;
  }

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  bool operator == (const EntityId & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(connId == rhs.connId))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const EntityId &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntityId & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(EntityId &a, EntityId &b);

}}}} // namespace

#endif
