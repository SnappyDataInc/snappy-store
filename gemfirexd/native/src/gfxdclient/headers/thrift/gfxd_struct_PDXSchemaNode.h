/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_PDXSCHEMANODE_H
#define GFXD_STRUCT_PDXSCHEMANODE_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _PDXSchemaNode__isset {
  _PDXSchemaNode__isset() : singleFieldDesc(false), fieldDescs(false), refId(false) {}
  bool singleFieldDesc;
  bool fieldDescs;
  bool refId;
} _PDXSchemaNode__isset;

class PDXSchemaNode {
 public:

  static const char* ascii_fingerprint; // = "2DB4C61C4D457FACE77B8CBF274ED9FC";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0xB4,0xC6,0x1C,0x4D,0x45,0x7F,0xAC,0xE7,0x7B,0x8C,0xBF,0x27,0x4E,0xD9,0xFC};

  PDXSchemaNode() : refId(0) {
  }

  virtual ~PDXSchemaNode() throw() {}

  FieldDescriptor singleFieldDesc;
  std::vector<FieldDescriptor>  fieldDescs;
  int32_t refId;

  _PDXSchemaNode__isset __isset;

  void __set_singleFieldDesc(const FieldDescriptor& val) {
    singleFieldDesc = val;
    __isset.singleFieldDesc = true;
  }

  void __set_fieldDescs(const std::vector<FieldDescriptor> & val) {
    fieldDescs = val;
    __isset.fieldDescs = true;
  }

  void __set_refId(const int32_t val) {
    refId = val;
    __isset.refId = true;
  }

  bool operator == (const PDXSchemaNode & rhs) const
  {
    if (__isset.singleFieldDesc != rhs.__isset.singleFieldDesc)
      return false;
    else if (__isset.singleFieldDesc && !(singleFieldDesc == rhs.singleFieldDesc))
      return false;
    if (__isset.fieldDescs != rhs.__isset.fieldDescs)
      return false;
    else if (__isset.fieldDescs && !(fieldDescs == rhs.fieldDescs))
      return false;
    if (__isset.refId != rhs.__isset.refId)
      return false;
    else if (__isset.refId && !(refId == rhs.refId))
      return false;
    return true;
  }
  bool operator != (const PDXSchemaNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PDXSchemaNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PDXSchemaNode &a, PDXSchemaNode &b);

}}}} // namespace

#endif
