/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_CONNECTIONPROPERTIES_H
#define GFXD_STRUCT_CONNECTIONPROPERTIES_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _ConnectionProperties__isset {
  _ConnectionProperties__isset() : userName(false), token(false) {}
  bool userName;
  bool token;
} _ConnectionProperties__isset;

class ConnectionProperties {
 public:

  static const char* ascii_fingerprint; // = "6A786CBFC3F8CC36DBE9A60593D99486";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x78,0x6C,0xBF,0xC3,0xF8,0xCC,0x36,0xDB,0xE9,0xA6,0x05,0x93,0xD9,0x94,0x86};

  ConnectionProperties() : connId(0), clientHostName(), clientID(), userName(), token() {
  }

  virtual ~ConnectionProperties() throw() {}

  int32_t connId;
  std::string clientHostName;
  std::string clientID;
  std::string userName;
  std::string token;

  _ConnectionProperties__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_clientHostName(const std::string& val) {
    clientHostName = val;
  }

  void __set_clientID(const std::string& val) {
    clientID = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
    __isset.userName = true;
  }

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  bool operator == (const ConnectionProperties & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(clientHostName == rhs.clientHostName))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const ConnectionProperties &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConnectionProperties & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ConnectionProperties &a, ConnectionProperties &b);

}}}} // namespace

#endif
