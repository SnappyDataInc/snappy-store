/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_SERVICEMETADATAARGS_H
#define GFXD_STRUCT_SERVICEMETADATAARGS_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _ServiceMetaDataArgs__isset {
  _ServiceMetaDataArgs__isset() : token(false), schema(false), table(false), tableTypes(false), columnName(false), foreignSchema(false), foreignTable(false), procedureName(false), functionName(false), attributeName(false), typeName(false), typeId(false) {}
  bool token;
  bool schema;
  bool table;
  bool tableTypes;
  bool columnName;
  bool foreignSchema;
  bool foreignTable;
  bool procedureName;
  bool functionName;
  bool attributeName;
  bool typeName;
  bool typeId;
} _ServiceMetaDataArgs__isset;

class ServiceMetaDataArgs {
 public:

  static const char* ascii_fingerprint; // = "E930F6087196ED682390AFBCB3DA75E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE9,0x30,0xF6,0x08,0x71,0x96,0xED,0x68,0x23,0x90,0xAF,0xBC,0xB3,0xDA,0x75,0xE4};

  ServiceMetaDataArgs() : connId(0), driverType(0), token(), schema(), table(), columnName(), foreignSchema(), foreignTable(), procedureName(), functionName(), attributeName(), typeName(), typeId((GFXDType::type)0) {
  }

  virtual ~ServiceMetaDataArgs() throw() {}

  int32_t connId;
  int8_t driverType;
  std::string token;
  std::string schema;
  std::string table;
  std::vector<std::string>  tableTypes;
  std::string columnName;
  std::string foreignSchema;
  std::string foreignTable;
  std::string procedureName;
  std::string functionName;
  std::string attributeName;
  std::string typeName;
  GFXDType::type typeId;

  _ServiceMetaDataArgs__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_driverType(const int8_t val) {
    driverType = val;
  }

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  void __set_schema(const std::string& val) {
    schema = val;
    __isset.schema = true;
  }

  void __set_table(const std::string& val) {
    table = val;
    __isset.table = true;
  }

  void __set_tableTypes(const std::vector<std::string> & val) {
    tableTypes = val;
    __isset.tableTypes = true;
  }

  void __set_columnName(const std::string& val) {
    columnName = val;
    __isset.columnName = true;
  }

  void __set_foreignSchema(const std::string& val) {
    foreignSchema = val;
    __isset.foreignSchema = true;
  }

  void __set_foreignTable(const std::string& val) {
    foreignTable = val;
    __isset.foreignTable = true;
  }

  void __set_procedureName(const std::string& val) {
    procedureName = val;
    __isset.procedureName = true;
  }

  void __set_functionName(const std::string& val) {
    functionName = val;
    __isset.functionName = true;
  }

  void __set_attributeName(const std::string& val) {
    attributeName = val;
    __isset.attributeName = true;
  }

  void __set_typeName(const std::string& val) {
    typeName = val;
    __isset.typeName = true;
  }

  void __set_typeId(const GFXDType::type val) {
    typeId = val;
    __isset.typeId = true;
  }

  bool operator == (const ServiceMetaDataArgs & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(driverType == rhs.driverType))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    if (__isset.schema != rhs.__isset.schema)
      return false;
    else if (__isset.schema && !(schema == rhs.schema))
      return false;
    if (__isset.table != rhs.__isset.table)
      return false;
    else if (__isset.table && !(table == rhs.table))
      return false;
    if (__isset.tableTypes != rhs.__isset.tableTypes)
      return false;
    else if (__isset.tableTypes && !(tableTypes == rhs.tableTypes))
      return false;
    if (__isset.columnName != rhs.__isset.columnName)
      return false;
    else if (__isset.columnName && !(columnName == rhs.columnName))
      return false;
    if (__isset.foreignSchema != rhs.__isset.foreignSchema)
      return false;
    else if (__isset.foreignSchema && !(foreignSchema == rhs.foreignSchema))
      return false;
    if (__isset.foreignTable != rhs.__isset.foreignTable)
      return false;
    else if (__isset.foreignTable && !(foreignTable == rhs.foreignTable))
      return false;
    if (__isset.procedureName != rhs.__isset.procedureName)
      return false;
    else if (__isset.procedureName && !(procedureName == rhs.procedureName))
      return false;
    if (__isset.functionName != rhs.__isset.functionName)
      return false;
    else if (__isset.functionName && !(functionName == rhs.functionName))
      return false;
    if (__isset.attributeName != rhs.__isset.attributeName)
      return false;
    else if (__isset.attributeName && !(attributeName == rhs.attributeName))
      return false;
    if (__isset.typeName != rhs.__isset.typeName)
      return false;
    else if (__isset.typeName && !(typeName == rhs.typeName))
      return false;
    if (__isset.typeId != rhs.__isset.typeId)
      return false;
    else if (__isset.typeId && !(typeId == rhs.typeId))
      return false;
    return true;
  }
  bool operator != (const ServiceMetaDataArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceMetaDataArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceMetaDataArgs &a, ServiceMetaDataArgs &b);

}}}} // namespace

#endif
