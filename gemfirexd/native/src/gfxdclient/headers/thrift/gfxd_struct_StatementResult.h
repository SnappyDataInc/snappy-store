/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_STATEMENTRESULT_H
#define GFXD_STRUCT_STATEMENTRESULT_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"
#include "gfxd_struct_ConnectionProperties.h"
#include "gfxd_struct_HostAddress.h"
#include "gfxd_struct_GFXDExceptionData.h"
#include "gfxd_struct_StatementAttrs.h"
#include "gfxd_struct_DateTime.h"
#include "gfxd_struct_ColumnValue.h"
#include "gfxd_struct_ColumnDescriptor.h"
#include "gfxd_struct_Row.h"
#include "gfxd_struct_OutputParameter.h"
#include "gfxd_struct_RowSet.h"
#include "gfxd_struct_PrepareResult.h"
#include "gfxd_struct_UpdateResult.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _StatementResult__isset {
  _StatementResult__isset() : resultSet(false), updateCount(false), batchUpdateCounts(false), procedureOutParams(false), generatedKeys(false), warnings(false), preparedResult(false) {}
  bool resultSet;
  bool updateCount;
  bool batchUpdateCounts;
  bool procedureOutParams;
  bool generatedKeys;
  bool warnings;
  bool preparedResult;
} _StatementResult__isset;

class StatementResult {
 public:

  static const char* ascii_fingerprint; // = "EED01C30C42FD1F6915891F00BDB97A5";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xD0,0x1C,0x30,0xC4,0x2F,0xD1,0xF6,0x91,0x58,0x91,0xF0,0x0B,0xDB,0x97,0xA5};

  StatementResult() : updateCount(0) {
  }

  virtual ~StatementResult() throw() {}

  RowSet resultSet;
  int32_t updateCount;
  std::vector<int32_t>  batchUpdateCounts;
  Row procedureOutParams;
  RowSet generatedKeys;
  GFXDExceptionData warnings;
  PrepareResult preparedResult;

  _StatementResult__isset __isset;

  void __set_resultSet(const RowSet& val) {
    resultSet = val;
    __isset.resultSet = true;
  }

  void __set_updateCount(const int32_t val) {
    updateCount = val;
    __isset.updateCount = true;
  }

  void __set_batchUpdateCounts(const std::vector<int32_t> & val) {
    batchUpdateCounts = val;
    __isset.batchUpdateCounts = true;
  }

  void __set_procedureOutParams(const Row& val) {
    procedureOutParams = val;
    __isset.procedureOutParams = true;
  }

  void __set_generatedKeys(const RowSet& val) {
    generatedKeys = val;
    __isset.generatedKeys = true;
  }

  void __set_warnings(const GFXDExceptionData& val) {
    warnings = val;
    __isset.warnings = true;
  }

  void __set_preparedResult(const PrepareResult& val) {
    preparedResult = val;
    __isset.preparedResult = true;
  }

  bool operator == (const StatementResult & rhs) const
  {
    if (__isset.resultSet != rhs.__isset.resultSet)
      return false;
    else if (__isset.resultSet && !(resultSet == rhs.resultSet))
      return false;
    if (__isset.updateCount != rhs.__isset.updateCount)
      return false;
    else if (__isset.updateCount && !(updateCount == rhs.updateCount))
      return false;
    if (__isset.batchUpdateCounts != rhs.__isset.batchUpdateCounts)
      return false;
    else if (__isset.batchUpdateCounts && !(batchUpdateCounts == rhs.batchUpdateCounts))
      return false;
    if (__isset.procedureOutParams != rhs.__isset.procedureOutParams)
      return false;
    else if (__isset.procedureOutParams && !(procedureOutParams == rhs.procedureOutParams))
      return false;
    if (__isset.generatedKeys != rhs.__isset.generatedKeys)
      return false;
    else if (__isset.generatedKeys && !(generatedKeys == rhs.generatedKeys))
      return false;
    if (__isset.warnings != rhs.__isset.warnings)
      return false;
    else if (__isset.warnings && !(warnings == rhs.warnings))
      return false;
    if (__isset.preparedResult != rhs.__isset.preparedResult)
      return false;
    else if (__isset.preparedResult && !(preparedResult == rhs.preparedResult))
      return false;
    return true;
  }
  bool operator != (const StatementResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StatementResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StatementResult &a, StatementResult &b);

}}}} // namespace

#endif
