/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_OPENCONNECTIONARGS_H
#define GFXD_STRUCT_OPENCONNECTIONARGS_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _OpenConnectionArgs__isset {
  _OpenConnectionArgs__isset() : userName(false), password(false), tokenSize(false), useStringForDecimal(false), properties(false) {}
  bool userName;
  bool password;
  bool tokenSize;
  bool useStringForDecimal;
  bool properties;
} _OpenConnectionArgs__isset;

class OpenConnectionArgs {
 public:

  static const char* ascii_fingerprint; // = "83B9B8DAF826364E5AAE01B70BFD1744";
  static const uint8_t binary_fingerprint[16]; // = {0x83,0xB9,0xB8,0xDA,0xF8,0x26,0x36,0x4E,0x5A,0xAE,0x01,0xB7,0x0B,0xFD,0x17,0x44};

  OpenConnectionArgs() : clientHostName(), clientID(), security((SecurityMechanism::type)0), userName(), password(), tokenSize(0), useStringForDecimal(0) {
  }

  virtual ~OpenConnectionArgs() throw() {}

  std::string clientHostName;
  std::string clientID;
  SecurityMechanism::type security;
  std::string userName;
  std::string password;
  int32_t tokenSize;
  bool useStringForDecimal;
  std::map<std::string, std::string>  properties;

  _OpenConnectionArgs__isset __isset;

  void __set_clientHostName(const std::string& val) {
    clientHostName = val;
  }

  void __set_clientID(const std::string& val) {
    clientID = val;
  }

  void __set_security(const SecurityMechanism::type val) {
    security = val;
  }

  void __set_userName(const std::string& val) {
    userName = val;
    __isset.userName = true;
  }

  void __set_password(const std::string& val) {
    password = val;
    __isset.password = true;
  }

  void __set_tokenSize(const int32_t val) {
    tokenSize = val;
    __isset.tokenSize = true;
  }

  void __set_useStringForDecimal(const bool val) {
    useStringForDecimal = val;
    __isset.useStringForDecimal = true;
  }

  void __set_properties(const std::map<std::string, std::string> & val) {
    properties = val;
    __isset.properties = true;
  }

  bool operator == (const OpenConnectionArgs & rhs) const
  {
    if (!(clientHostName == rhs.clientHostName))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    if (!(security == rhs.security))
      return false;
    if (__isset.userName != rhs.__isset.userName)
      return false;
    else if (__isset.userName && !(userName == rhs.userName))
      return false;
    if (__isset.password != rhs.__isset.password)
      return false;
    else if (__isset.password && !(password == rhs.password))
      return false;
    if (__isset.tokenSize != rhs.__isset.tokenSize)
      return false;
    else if (__isset.tokenSize && !(tokenSize == rhs.tokenSize))
      return false;
    if (__isset.useStringForDecimal != rhs.__isset.useStringForDecimal)
      return false;
    else if (__isset.useStringForDecimal && !(useStringForDecimal == rhs.useStringForDecimal))
      return false;
    if (__isset.properties != rhs.__isset.properties)
      return false;
    else if (__isset.properties && !(properties == rhs.properties))
      return false;
    return true;
  }
  bool operator != (const OpenConnectionArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OpenConnectionArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OpenConnectionArgs &a, OpenConnectionArgs &b);

}}}} // namespace

#endif
