/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_HOSTADDRESS_H
#define GFXD_STRUCT_HOSTADDRESS_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"
#include "gfxd_struct_ConnectionProperties.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _HostAddress__isset {
  _HostAddress__isset() : ipAddress(false), serverType(false) {}
  bool ipAddress;
  bool serverType;
} _HostAddress__isset;

class HostAddress {
 public:

  static const char* ascii_fingerprint; // = "CB10B5909CC16B6AF3AFC4E5AD09FDAD";
  static const uint8_t binary_fingerprint[16]; // = {0xCB,0x10,0xB5,0x90,0x9C,0xC1,0x6B,0x6A,0xF3,0xAF,0xC4,0xE5,0xAD,0x09,0xFD,0xAD};

  HostAddress() : hostName(), port(0), ipAddress(), serverType((ServerType::type)0) {
  }

  virtual ~HostAddress() throw() {}

  std::string hostName;
  int32_t port;
  std::string ipAddress;
  ServerType::type serverType;

  _HostAddress__isset __isset;

  void __set_hostName(const std::string& val) {
    hostName = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_ipAddress(const std::string& val) {
    ipAddress = val;
    __isset.ipAddress = true;
  }

  void __set_serverType(const ServerType::type val) {
    serverType = val;
    __isset.serverType = true;
  }

  bool operator == (const HostAddress & rhs) const
  {
    if (!(hostName == rhs.hostName))
      return false;
    if (!(port == rhs.port))
      return false;
    if (__isset.ipAddress != rhs.__isset.ipAddress)
      return false;
    else if (__isset.ipAddress && !(ipAddress == rhs.ipAddress))
      return false;
    if (__isset.serverType != rhs.__isset.serverType)
      return false;
    else if (__isset.serverType && !(serverType == rhs.serverType))
      return false;
    return true;
  }
  bool operator != (const HostAddress &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostAddress & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostAddress &a, HostAddress &b);

}}}} // namespace

#endif
