/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_FIELDDESCRIPTOR_H
#define GFXD_STRUCT_FIELDDESCRIPTOR_H


#include "gfxd_types.h"


namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _FieldDescriptor__isset {
  _FieldDescriptor__isset() : identity(false) {}
  bool identity;
} _FieldDescriptor__isset;

class FieldDescriptor {
 public:

  static const char* ascii_fingerprint; // = "D29DD4B228A32BF43BDF3F16B4647434";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0x9D,0xD4,0xB2,0x28,0xA3,0x2B,0xF4,0x3B,0xDF,0x3F,0x16,0xB4,0x64,0x74,0x34};

  FieldDescriptor() : name(), type((FieldType::type)0), identity(0) {
  }

  virtual ~FieldDescriptor() throw() {}

  std::string name;
  FieldType::type type;
  bool identity;

  _FieldDescriptor__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_type(const FieldType::type val) {
    type = val;
  }

  void __set_identity(const bool val) {
    identity = val;
    __isset.identity = true;
  }

  bool operator == (const FieldDescriptor & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.identity != rhs.__isset.identity)
      return false;
    else if (__isset.identity && !(identity == rhs.identity))
      return false;
    return true;
  }
  bool operator != (const FieldDescriptor &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FieldDescriptor & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FieldDescriptor &a, FieldDescriptor &b);

}}}} // namespace

#endif
