/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_UPDATERESULT_H
#define GFXD_STRUCT_UPDATERESULT_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"
#include "gfxd_struct_ConnectionProperties.h"
#include "gfxd_struct_HostAddress.h"
#include "gfxd_struct_GFXDExceptionData.h"
#include "gfxd_struct_StatementAttrs.h"
#include "gfxd_struct_DateTime.h"
#include "gfxd_struct_ColumnValue.h"
#include "gfxd_struct_ColumnDescriptor.h"
#include "gfxd_struct_Row.h"
#include "gfxd_struct_OutputParameter.h"
#include "gfxd_struct_RowSet.h"
#include "gfxd_struct_PrepareResult.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _UpdateResult__isset {
  _UpdateResult__isset() : updateCount(false), batchUpdateCounts(false), generatedKeys(false), warnings(false) {}
  bool updateCount;
  bool batchUpdateCounts;
  bool generatedKeys;
  bool warnings;
} _UpdateResult__isset;

class UpdateResult {
 public:

  static const char* ascii_fingerprint; // = "2E9A0C5723FC0F1C165801E076E57962";
  static const uint8_t binary_fingerprint[16]; // = {0x2E,0x9A,0x0C,0x57,0x23,0xFC,0x0F,0x1C,0x16,0x58,0x01,0xE0,0x76,0xE5,0x79,0x62};

  UpdateResult() : updateCount(0) {
  }

  virtual ~UpdateResult() throw() {}

  int32_t updateCount;
  std::vector<int32_t>  batchUpdateCounts;
  RowSet generatedKeys;
  GFXDExceptionData warnings;

  _UpdateResult__isset __isset;

  void __set_updateCount(const int32_t val) {
    updateCount = val;
    __isset.updateCount = true;
  }

  void __set_batchUpdateCounts(const std::vector<int32_t> & val) {
    batchUpdateCounts = val;
    __isset.batchUpdateCounts = true;
  }

  void __set_generatedKeys(const RowSet& val) {
    generatedKeys = val;
    __isset.generatedKeys = true;
  }

  void __set_warnings(const GFXDExceptionData& val) {
    warnings = val;
    __isset.warnings = true;
  }

  bool operator == (const UpdateResult & rhs) const
  {
    if (__isset.updateCount != rhs.__isset.updateCount)
      return false;
    else if (__isset.updateCount && !(updateCount == rhs.updateCount))
      return false;
    if (__isset.batchUpdateCounts != rhs.__isset.batchUpdateCounts)
      return false;
    else if (__isset.batchUpdateCounts && !(batchUpdateCounts == rhs.batchUpdateCounts))
      return false;
    if (__isset.generatedKeys != rhs.__isset.generatedKeys)
      return false;
    else if (__isset.generatedKeys && !(generatedKeys == rhs.generatedKeys))
      return false;
    if (__isset.warnings != rhs.__isset.warnings)
      return false;
    else if (__isset.warnings && !(warnings == rhs.warnings))
      return false;
    return true;
  }
  bool operator != (const UpdateResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpdateResult &a, UpdateResult &b);

}}}} // namespace

#endif
