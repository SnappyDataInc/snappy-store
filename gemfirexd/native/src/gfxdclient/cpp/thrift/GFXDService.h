/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXDService_H
#define GFXDService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

#include "gfxd_types.h"
#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"
#include "gfxd_struct_ConnectionProperties.h"
#include "gfxd_struct_HostAddress.h"
#include "gfxd_struct_GFXDExceptionData.h"
#include "gfxd_struct_StatementAttrs.h"
#include "gfxd_struct_DateTime.h"
#include "gfxd_struct_ColumnValue.h"
#include "gfxd_struct_ColumnDescriptor.h"
#include "gfxd_struct_Row.h"
#include "gfxd_struct_OutputParameter.h"
#include "gfxd_struct_RowSet.h"
#include "gfxd_struct_PrepareResult.h"
#include "gfxd_struct_UpdateResult.h"
#include "gfxd_struct_StatementResult.h"
#include "gfxd_struct_EntityId.h"

#include "gfxd_struct_GFXDException.h"


namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

class GFXDServiceIf {
 public:
  virtual ~GFXDServiceIf() {}
  virtual void getPreferredServer(HostAddress& _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) = 0;
  virtual void getAllServersWithPreferredServer(std::vector<HostAddress> & _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) = 0;
  virtual void openConnection(ConnectionProperties& _return, const OpenConnectionArgs& arguments) = 0;
  virtual void execute(StatementResult& _return, const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executeUpdate(UpdateResult& _return, const int32_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executeQuery(RowSet& _return, const int32_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void prepareStatement(PrepareResult& _return, const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void executePrepared(StatementResult& _return, const int32_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const std::string& token) = 0;
  virtual void executePreparedUpdate(UpdateResult& _return, const int32_t stmtId, const Row& params, const std::string& token) = 0;
  virtual void executePreparedQuery(RowSet& _return, const int32_t stmtId, const Row& params, const std::string& token) = 0;
  virtual void executePreparedBatch(UpdateResult& _return, const int32_t stmtId, const std::vector<Row> & paramsBatch, const std::string& token) = 0;
  virtual void prepareAndExecute(StatementResult& _return, const int32_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) = 0;
  virtual void beginTransaction(const int32_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void setTransactionAttributes(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return, const int32_t connId, const std::string& token) = 0;
  virtual void commitTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void rollbackTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual bool prepareCommitTransaction(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) = 0;
  virtual void getNextResultSet(RowSet& _return, const int32_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token) = 0;
  virtual void getBlobChunk(BlobChunk& _return, const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) = 0;
  virtual void getClobChunk(ClobChunk& _return, const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) = 0;
  virtual int32_t sendBlobChunk(const BlobChunk& chunk, const int32_t connId, const std::string& token) = 0;
  virtual int32_t sendClobChunk(const ClobChunk& chunk, const int32_t connId, const std::string& token) = 0;
  virtual void freeLob(const int32_t connId, const int32_t lobId, const std::string& token) = 0;
  virtual void scrollCursor(RowSet& _return, const int32_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token) = 0;
  virtual void executeCursorUpdate(const int32_t cursorId, const std::vector<int8_t> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token) = 0;
  virtual void getServiceMetaData(ServiceMetaData& _return, const int32_t connId, const std::string& token) = 0;
  virtual void getSchemaMetaData(RowSet& _return, const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs) = 0;
  virtual void getIndexInfo(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate) = 0;
  virtual void getUDTs(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const std::vector<GFXDType::type> & types) = 0;
  virtual void getBestRowIdentifier(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable) = 0;
  virtual void fetchActiveConnections(std::vector<ConnectionProperties> & _return, const int32_t connId, const std::string& token) = 0;
  virtual void fetchActiveStatements(std::map<int32_t, std::string> & _return, const int32_t connId, const std::string& token) = 0;
  virtual void cancelStatement(const int32_t stmtId, const std::string& token) = 0;
  virtual void closeResultSet(const int32_t cursorId, const std::string& token) = 0;
  virtual void closeStatement(const int32_t stmtId, const std::string& token) = 0;
  virtual void closeConnection(const int32_t connId, const std::string& token) = 0;
  virtual void bulkClose(const std::vector<EntityId> & entities) = 0;
};

class GFXDServiceIfFactory {
 public:
  typedef GFXDServiceIf Handler;

  virtual ~GFXDServiceIfFactory() {}

  virtual GFXDServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GFXDServiceIf* /* handler */) = 0;
};

class GFXDServiceIfSingletonFactory : virtual public GFXDServiceIfFactory {
 public:
  GFXDServiceIfSingletonFactory(const boost::shared_ptr<GFXDServiceIf>& iface) : iface_(iface) {}
  virtual ~GFXDServiceIfSingletonFactory() {}

  virtual GFXDServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GFXDServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<GFXDServiceIf> iface_;
};

class GFXDServiceNull : virtual public GFXDServiceIf {
 public:
  virtual ~GFXDServiceNull() {}
  void getPreferredServer(HostAddress& /* _return */, const std::set<ServerType::type> & /* serverTypes */, const std::set<std::string> & /* serverGroups */, const std::set<HostAddress> & /* failedServers */) {
    return;
  }
  void getAllServersWithPreferredServer(std::vector<HostAddress> & /* _return */, const std::set<ServerType::type> & /* serverTypes */, const std::set<std::string> & /* serverGroups */, const std::set<HostAddress> & /* failedServers */) {
    return;
  }
  void openConnection(ConnectionProperties& /* _return */, const OpenConnectionArgs& /* arguments */) {
    return;
  }
  void execute(StatementResult& /* _return */, const int32_t /* connId */, const std::string& /* sql */, const std::map<int32_t, OutputParameter> & /* outputParams */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executeUpdate(UpdateResult& /* _return */, const int32_t /* connId */, const std::vector<std::string> & /* sqls */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executeQuery(RowSet& /* _return */, const int32_t /* connId */, const std::string& /* sql */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void prepareStatement(PrepareResult& /* _return */, const int32_t /* connId */, const std::string& /* sql */, const std::map<int32_t, OutputParameter> & /* outputParams */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void executePrepared(StatementResult& /* _return */, const int32_t /* stmtId */, const Row& /* params */, const std::map<int32_t, OutputParameter> & /* outputParams */, const std::string& /* token */) {
    return;
  }
  void executePreparedUpdate(UpdateResult& /* _return */, const int32_t /* stmtId */, const Row& /* params */, const std::string& /* token */) {
    return;
  }
  void executePreparedQuery(RowSet& /* _return */, const int32_t /* stmtId */, const Row& /* params */, const std::string& /* token */) {
    return;
  }
  void executePreparedBatch(UpdateResult& /* _return */, const int32_t /* stmtId */, const std::vector<Row> & /* paramsBatch */, const std::string& /* token */) {
    return;
  }
  void prepareAndExecute(StatementResult& /* _return */, const int32_t /* connId */, const std::string& /* sql */, const std::vector<Row> & /* paramsBatch */, const std::map<int32_t, OutputParameter> & /* outputParams */, const StatementAttrs& /* attrs */, const std::string& /* token */) {
    return;
  }
  void beginTransaction(const int32_t /* connId */, const int8_t /* isolationLevel */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    return;
  }
  void setTransactionAttributes(const int32_t /* connId */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    return;
  }
  void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & /* _return */, const int32_t /* connId */, const std::string& /* token */) {
    return;
  }
  void commitTransaction(const int32_t /* connId */, const bool /* startNewTransaction */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    return;
  }
  void rollbackTransaction(const int32_t /* connId */, const bool /* startNewTransaction */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    return;
  }
  bool prepareCommitTransaction(const int32_t /* connId */, const std::map<TransactionAttribute::type, bool> & /* flags */, const std::string& /* token */) {
    bool _return = false;
    return _return;
  }
  void getNextResultSet(RowSet& /* _return */, const int32_t /* cursorId */, const int8_t /* otherResultSetBehaviour */, const std::string& /* token */) {
    return;
  }
  void getBlobChunk(BlobChunk& /* _return */, const int32_t /* connId */, const int32_t /* lobId */, const int64_t /* offset */, const int32_t /* size */, const bool /* freeLobAtEnd */, const std::string& /* token */) {
    return;
  }
  void getClobChunk(ClobChunk& /* _return */, const int32_t /* connId */, const int32_t /* lobId */, const int64_t /* offset */, const int32_t /* size */, const bool /* freeLobAtEnd */, const std::string& /* token */) {
    return;
  }
  int32_t sendBlobChunk(const BlobChunk& /* chunk */, const int32_t /* connId */, const std::string& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t sendClobChunk(const ClobChunk& /* chunk */, const int32_t /* connId */, const std::string& /* token */) {
    int32_t _return = 0;
    return _return;
  }
  void freeLob(const int32_t /* connId */, const int32_t /* lobId */, const std::string& /* token */) {
    return;
  }
  void scrollCursor(RowSet& /* _return */, const int32_t /* cursorId */, const int32_t /* offset */, const bool /* offsetIsAbsolute */, const bool /* fetchReverse */, const int32_t /* fetchSize */, const std::string& /* token */) {
    return;
  }
  void executeCursorUpdate(const int32_t /* cursorId */, const std::vector<int8_t> & /* operations */, const std::vector<Row> & /* changedRows */, const std::vector<std::vector<int32_t> > & /* changedColumnsList */, const std::vector<int32_t> & /* changedRowIndexes */, const std::string& /* token */) {
    return;
  }
  void getServiceMetaData(ServiceMetaData& /* _return */, const int32_t /* connId */, const std::string& /* token */) {
    return;
  }
  void getSchemaMetaData(RowSet& /* _return */, const ServiceMetaDataCall::type /* schemaCall */, const ServiceMetaDataArgs& /* metadataArgs */) {
    return;
  }
  void getIndexInfo(RowSet& /* _return */, const ServiceMetaDataArgs& /* metadataArgs */, const bool /* unique */, const bool /* approximate */) {
    return;
  }
  void getUDTs(RowSet& /* _return */, const ServiceMetaDataArgs& /* metadataArgs */, const std::vector<GFXDType::type> & /* types */) {
    return;
  }
  void getBestRowIdentifier(RowSet& /* _return */, const ServiceMetaDataArgs& /* metadataArgs */, const int32_t /* scope */, const bool /* nullable */) {
    return;
  }
  void fetchActiveConnections(std::vector<ConnectionProperties> & /* _return */, const int32_t /* connId */, const std::string& /* token */) {
    return;
  }
  void fetchActiveStatements(std::map<int32_t, std::string> & /* _return */, const int32_t /* connId */, const std::string& /* token */) {
    return;
  }
  void cancelStatement(const int32_t /* stmtId */, const std::string& /* token */) {
    return;
  }
  void closeResultSet(const int32_t /* cursorId */, const std::string& /* token */) {
    return;
  }
  void closeStatement(const int32_t /* stmtId */, const std::string& /* token */) {
    return;
  }
  void closeConnection(const int32_t /* connId */, const std::string& /* token */) {
    return;
  }
  void bulkClose(const std::vector<EntityId> & /* entities */) {
    return;
  }
};

typedef struct _GFXDService_getPreferredServer_args__isset {
  _GFXDService_getPreferredServer_args__isset() : serverTypes(false), serverGroups(false), failedServers(false) {}
  bool serverTypes;
  bool serverGroups;
  bool failedServers;
} _GFXDService_getPreferredServer_args__isset;

class GFXDService_getPreferredServer_args {
 public:

  GFXDService_getPreferredServer_args() {
  }

  virtual ~GFXDService_getPreferredServer_args() throw() {}

  std::set<ServerType::type>  serverTypes;
  std::set<std::string>  serverGroups;
  std::set<HostAddress>  failedServers;

  _GFXDService_getPreferredServer_args__isset __isset;

  void __set_serverTypes(const std::set<ServerType::type> & val) {
    serverTypes = val;
  }

  void __set_serverGroups(const std::set<std::string> & val) {
    serverGroups = val;
  }

  void __set_failedServers(const std::set<HostAddress> & val) {
    failedServers = val;
  }

  bool operator == (const GFXDService_getPreferredServer_args & rhs) const
  {
    if (!(serverTypes == rhs.serverTypes))
      return false;
    if (!(serverGroups == rhs.serverGroups))
      return false;
    if (!(failedServers == rhs.failedServers))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getPreferredServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getPreferredServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getPreferredServer_pargs {
 public:


  virtual ~GFXDService_getPreferredServer_pargs() throw() {}

  const std::set<ServerType::type> * serverTypes;
  const std::set<std::string> * serverGroups;
  const std::set<HostAddress> * failedServers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getPreferredServer_result__isset {
  _GFXDService_getPreferredServer_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getPreferredServer_result__isset;

class GFXDService_getPreferredServer_result {
 public:

  GFXDService_getPreferredServer_result() {
  }

  virtual ~GFXDService_getPreferredServer_result() throw() {}

  HostAddress success;
  GFXDException error;

  _GFXDService_getPreferredServer_result__isset __isset;

  void __set_success(const HostAddress& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getPreferredServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getPreferredServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getPreferredServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getPreferredServer_presult__isset {
  _GFXDService_getPreferredServer_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getPreferredServer_presult__isset;

class GFXDService_getPreferredServer_presult {
 public:


  virtual ~GFXDService_getPreferredServer_presult() throw() {}

  HostAddress* success;
  GFXDException error;

  _GFXDService_getPreferredServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getAllServersWithPreferredServer_args__isset {
  _GFXDService_getAllServersWithPreferredServer_args__isset() : serverTypes(false), serverGroups(false), failedServers(false) {}
  bool serverTypes;
  bool serverGroups;
  bool failedServers;
} _GFXDService_getAllServersWithPreferredServer_args__isset;

class GFXDService_getAllServersWithPreferredServer_args {
 public:

  GFXDService_getAllServersWithPreferredServer_args() {
  }

  virtual ~GFXDService_getAllServersWithPreferredServer_args() throw() {}

  std::set<ServerType::type>  serverTypes;
  std::set<std::string>  serverGroups;
  std::set<HostAddress>  failedServers;

  _GFXDService_getAllServersWithPreferredServer_args__isset __isset;

  void __set_serverTypes(const std::set<ServerType::type> & val) {
    serverTypes = val;
  }

  void __set_serverGroups(const std::set<std::string> & val) {
    serverGroups = val;
  }

  void __set_failedServers(const std::set<HostAddress> & val) {
    failedServers = val;
  }

  bool operator == (const GFXDService_getAllServersWithPreferredServer_args & rhs) const
  {
    if (!(serverTypes == rhs.serverTypes))
      return false;
    if (!(serverGroups == rhs.serverGroups))
      return false;
    if (!(failedServers == rhs.failedServers))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getAllServersWithPreferredServer_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getAllServersWithPreferredServer_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getAllServersWithPreferredServer_pargs {
 public:


  virtual ~GFXDService_getAllServersWithPreferredServer_pargs() throw() {}

  const std::set<ServerType::type> * serverTypes;
  const std::set<std::string> * serverGroups;
  const std::set<HostAddress> * failedServers;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getAllServersWithPreferredServer_result__isset {
  _GFXDService_getAllServersWithPreferredServer_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getAllServersWithPreferredServer_result__isset;

class GFXDService_getAllServersWithPreferredServer_result {
 public:

  GFXDService_getAllServersWithPreferredServer_result() {
  }

  virtual ~GFXDService_getAllServersWithPreferredServer_result() throw() {}

  std::vector<HostAddress>  success;
  GFXDException error;

  _GFXDService_getAllServersWithPreferredServer_result__isset __isset;

  void __set_success(const std::vector<HostAddress> & val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getAllServersWithPreferredServer_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getAllServersWithPreferredServer_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getAllServersWithPreferredServer_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getAllServersWithPreferredServer_presult__isset {
  _GFXDService_getAllServersWithPreferredServer_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getAllServersWithPreferredServer_presult__isset;

class GFXDService_getAllServersWithPreferredServer_presult {
 public:


  virtual ~GFXDService_getAllServersWithPreferredServer_presult() throw() {}

  std::vector<HostAddress> * success;
  GFXDException error;

  _GFXDService_getAllServersWithPreferredServer_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_openConnection_args__isset {
  _GFXDService_openConnection_args__isset() : arguments(false) {}
  bool arguments;
} _GFXDService_openConnection_args__isset;

class GFXDService_openConnection_args {
 public:

  GFXDService_openConnection_args() {
  }

  virtual ~GFXDService_openConnection_args() throw() {}

  OpenConnectionArgs arguments;

  _GFXDService_openConnection_args__isset __isset;

  void __set_arguments(const OpenConnectionArgs& val) {
    arguments = val;
  }

  bool operator == (const GFXDService_openConnection_args & rhs) const
  {
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const GFXDService_openConnection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_openConnection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_openConnection_pargs {
 public:


  virtual ~GFXDService_openConnection_pargs() throw() {}

  const OpenConnectionArgs* arguments;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_openConnection_result__isset {
  _GFXDService_openConnection_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_openConnection_result__isset;

class GFXDService_openConnection_result {
 public:

  GFXDService_openConnection_result() {
  }

  virtual ~GFXDService_openConnection_result() throw() {}

  ConnectionProperties success;
  GFXDException error;

  _GFXDService_openConnection_result__isset __isset;

  void __set_success(const ConnectionProperties& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_openConnection_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_openConnection_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_openConnection_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_openConnection_presult__isset {
  _GFXDService_openConnection_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_openConnection_presult__isset;

class GFXDService_openConnection_presult {
 public:


  virtual ~GFXDService_openConnection_presult() throw() {}

  ConnectionProperties* success;
  GFXDException error;

  _GFXDService_openConnection_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_execute_args__isset {
  _GFXDService_execute_args__isset() : connId(false), sql(false), outputParams(false), attrs(false), token(false) {}
  bool connId;
  bool sql;
  bool outputParams;
  bool attrs;
  bool token;
} _GFXDService_execute_args__isset;

class GFXDService_execute_args {
 public:

  GFXDService_execute_args() : connId(0), sql(), token() {
  }

  virtual ~GFXDService_execute_args() throw() {}

  int32_t connId;
  std::string sql;
  std::map<int32_t, OutputParameter>  outputParams;
  StatementAttrs attrs;
  std::string token;

  _GFXDService_execute_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_sql(const std::string& val) {
    sql = val;
  }

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val) {
    outputParams = val;
  }

  void __set_attrs(const StatementAttrs& val) {
    attrs = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_execute_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_execute_pargs {
 public:


  virtual ~GFXDService_execute_pargs() throw() {}

  const int32_t* connId;
  const std::string* sql;
  const std::map<int32_t, OutputParameter> * outputParams;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_execute_result__isset {
  _GFXDService_execute_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_execute_result__isset;

class GFXDService_execute_result {
 public:

  GFXDService_execute_result() {
  }

  virtual ~GFXDService_execute_result() throw() {}

  StatementResult success;
  GFXDException error;

  _GFXDService_execute_result__isset __isset;

  void __set_success(const StatementResult& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_execute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_execute_presult__isset {
  _GFXDService_execute_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_execute_presult__isset;

class GFXDService_execute_presult {
 public:


  virtual ~GFXDService_execute_presult() throw() {}

  StatementResult* success;
  GFXDException error;

  _GFXDService_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_executeUpdate_args__isset {
  _GFXDService_executeUpdate_args__isset() : connId(false), sqls(false), attrs(false), token(false) {}
  bool connId;
  bool sqls;
  bool attrs;
  bool token;
} _GFXDService_executeUpdate_args__isset;

class GFXDService_executeUpdate_args {
 public:

  GFXDService_executeUpdate_args() : connId(0), token() {
  }

  virtual ~GFXDService_executeUpdate_args() throw() {}

  int32_t connId;
  std::vector<std::string>  sqls;
  StatementAttrs attrs;
  std::string token;

  _GFXDService_executeUpdate_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_sqls(const std::vector<std::string> & val) {
    sqls = val;
  }

  void __set_attrs(const StatementAttrs& val) {
    attrs = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_executeUpdate_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sqls == rhs.sqls))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executeUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executeUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_executeUpdate_pargs {
 public:


  virtual ~GFXDService_executeUpdate_pargs() throw() {}

  const int32_t* connId;
  const std::vector<std::string> * sqls;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executeUpdate_result__isset {
  _GFXDService_executeUpdate_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executeUpdate_result__isset;

class GFXDService_executeUpdate_result {
 public:

  GFXDService_executeUpdate_result() {
  }

  virtual ~GFXDService_executeUpdate_result() throw() {}

  UpdateResult success;
  GFXDException error;

  _GFXDService_executeUpdate_result__isset __isset;

  void __set_success(const UpdateResult& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_executeUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executeUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executeUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executeUpdate_presult__isset {
  _GFXDService_executeUpdate_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executeUpdate_presult__isset;

class GFXDService_executeUpdate_presult {
 public:


  virtual ~GFXDService_executeUpdate_presult() throw() {}

  UpdateResult* success;
  GFXDException error;

  _GFXDService_executeUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_executeQuery_args__isset {
  _GFXDService_executeQuery_args__isset() : connId(false), sql(false), attrs(false), token(false) {}
  bool connId;
  bool sql;
  bool attrs;
  bool token;
} _GFXDService_executeQuery_args__isset;

class GFXDService_executeQuery_args {
 public:

  GFXDService_executeQuery_args() : connId(0), sql(), token() {
  }

  virtual ~GFXDService_executeQuery_args() throw() {}

  int32_t connId;
  std::string sql;
  StatementAttrs attrs;
  std::string token;

  _GFXDService_executeQuery_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_sql(const std::string& val) {
    sql = val;
  }

  void __set_attrs(const StatementAttrs& val) {
    attrs = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_executeQuery_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executeQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executeQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_executeQuery_pargs {
 public:


  virtual ~GFXDService_executeQuery_pargs() throw() {}

  const int32_t* connId;
  const std::string* sql;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executeQuery_result__isset {
  _GFXDService_executeQuery_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executeQuery_result__isset;

class GFXDService_executeQuery_result {
 public:

  GFXDService_executeQuery_result() {
  }

  virtual ~GFXDService_executeQuery_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_executeQuery_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_executeQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executeQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executeQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executeQuery_presult__isset {
  _GFXDService_executeQuery_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executeQuery_presult__isset;

class GFXDService_executeQuery_presult {
 public:


  virtual ~GFXDService_executeQuery_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_executeQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_prepareStatement_args__isset {
  _GFXDService_prepareStatement_args__isset() : connId(false), sql(false), outputParams(false), attrs(false), token(false) {}
  bool connId;
  bool sql;
  bool outputParams;
  bool attrs;
  bool token;
} _GFXDService_prepareStatement_args__isset;

class GFXDService_prepareStatement_args {
 public:

  GFXDService_prepareStatement_args() : connId(0), sql(), token() {
  }

  virtual ~GFXDService_prepareStatement_args() throw() {}

  int32_t connId;
  std::string sql;
  std::map<int32_t, OutputParameter>  outputParams;
  StatementAttrs attrs;
  std::string token;

  _GFXDService_prepareStatement_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_sql(const std::string& val) {
    sql = val;
  }

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val) {
    outputParams = val;
  }

  void __set_attrs(const StatementAttrs& val) {
    attrs = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_prepareStatement_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_prepareStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_prepareStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_prepareStatement_pargs {
 public:


  virtual ~GFXDService_prepareStatement_pargs() throw() {}

  const int32_t* connId;
  const std::string* sql;
  const std::map<int32_t, OutputParameter> * outputParams;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_prepareStatement_result__isset {
  _GFXDService_prepareStatement_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_prepareStatement_result__isset;

class GFXDService_prepareStatement_result {
 public:

  GFXDService_prepareStatement_result() {
  }

  virtual ~GFXDService_prepareStatement_result() throw() {}

  PrepareResult success;
  GFXDException error;

  _GFXDService_prepareStatement_result__isset __isset;

  void __set_success(const PrepareResult& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_prepareStatement_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_prepareStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_prepareStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_prepareStatement_presult__isset {
  _GFXDService_prepareStatement_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_prepareStatement_presult__isset;

class GFXDService_prepareStatement_presult {
 public:


  virtual ~GFXDService_prepareStatement_presult() throw() {}

  PrepareResult* success;
  GFXDException error;

  _GFXDService_prepareStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_executePrepared_args__isset {
  _GFXDService_executePrepared_args__isset() : stmtId(false), params(false), outputParams(false), token(false) {}
  bool stmtId;
  bool params;
  bool outputParams;
  bool token;
} _GFXDService_executePrepared_args__isset;

class GFXDService_executePrepared_args {
 public:

  GFXDService_executePrepared_args() : stmtId(0), token() {
  }

  virtual ~GFXDService_executePrepared_args() throw() {}

  int32_t stmtId;
  Row params;
  std::map<int32_t, OutputParameter>  outputParams;
  std::string token;

  _GFXDService_executePrepared_args__isset __isset;

  void __set_stmtId(const int32_t val) {
    stmtId = val;
  }

  void __set_params(const Row& val) {
    params = val;
  }

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val) {
    outputParams = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_executePrepared_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePrepared_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePrepared_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_executePrepared_pargs {
 public:


  virtual ~GFXDService_executePrepared_pargs() throw() {}

  const int32_t* stmtId;
  const Row* params;
  const std::map<int32_t, OutputParameter> * outputParams;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePrepared_result__isset {
  _GFXDService_executePrepared_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePrepared_result__isset;

class GFXDService_executePrepared_result {
 public:

  GFXDService_executePrepared_result() {
  }

  virtual ~GFXDService_executePrepared_result() throw() {}

  StatementResult success;
  GFXDException error;

  _GFXDService_executePrepared_result__isset __isset;

  void __set_success(const StatementResult& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_executePrepared_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePrepared_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePrepared_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePrepared_presult__isset {
  _GFXDService_executePrepared_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePrepared_presult__isset;

class GFXDService_executePrepared_presult {
 public:


  virtual ~GFXDService_executePrepared_presult() throw() {}

  StatementResult* success;
  GFXDException error;

  _GFXDService_executePrepared_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_executePreparedUpdate_args__isset {
  _GFXDService_executePreparedUpdate_args__isset() : stmtId(false), params(false), token(false) {}
  bool stmtId;
  bool params;
  bool token;
} _GFXDService_executePreparedUpdate_args__isset;

class GFXDService_executePreparedUpdate_args {
 public:

  GFXDService_executePreparedUpdate_args() : stmtId(0), token() {
  }

  virtual ~GFXDService_executePreparedUpdate_args() throw() {}

  int32_t stmtId;
  Row params;
  std::string token;

  _GFXDService_executePreparedUpdate_args__isset __isset;

  void __set_stmtId(const int32_t val) {
    stmtId = val;
  }

  void __set_params(const Row& val) {
    params = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_executePreparedUpdate_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePreparedUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePreparedUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_executePreparedUpdate_pargs {
 public:


  virtual ~GFXDService_executePreparedUpdate_pargs() throw() {}

  const int32_t* stmtId;
  const Row* params;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePreparedUpdate_result__isset {
  _GFXDService_executePreparedUpdate_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePreparedUpdate_result__isset;

class GFXDService_executePreparedUpdate_result {
 public:

  GFXDService_executePreparedUpdate_result() {
  }

  virtual ~GFXDService_executePreparedUpdate_result() throw() {}

  UpdateResult success;
  GFXDException error;

  _GFXDService_executePreparedUpdate_result__isset __isset;

  void __set_success(const UpdateResult& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_executePreparedUpdate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePreparedUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePreparedUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePreparedUpdate_presult__isset {
  _GFXDService_executePreparedUpdate_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePreparedUpdate_presult__isset;

class GFXDService_executePreparedUpdate_presult {
 public:


  virtual ~GFXDService_executePreparedUpdate_presult() throw() {}

  UpdateResult* success;
  GFXDException error;

  _GFXDService_executePreparedUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_executePreparedQuery_args__isset {
  _GFXDService_executePreparedQuery_args__isset() : stmtId(false), params(false), token(false) {}
  bool stmtId;
  bool params;
  bool token;
} _GFXDService_executePreparedQuery_args__isset;

class GFXDService_executePreparedQuery_args {
 public:

  GFXDService_executePreparedQuery_args() : stmtId(0), token() {
  }

  virtual ~GFXDService_executePreparedQuery_args() throw() {}

  int32_t stmtId;
  Row params;
  std::string token;

  _GFXDService_executePreparedQuery_args__isset __isset;

  void __set_stmtId(const int32_t val) {
    stmtId = val;
  }

  void __set_params(const Row& val) {
    params = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_executePreparedQuery_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(params == rhs.params))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePreparedQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePreparedQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_executePreparedQuery_pargs {
 public:


  virtual ~GFXDService_executePreparedQuery_pargs() throw() {}

  const int32_t* stmtId;
  const Row* params;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePreparedQuery_result__isset {
  _GFXDService_executePreparedQuery_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePreparedQuery_result__isset;

class GFXDService_executePreparedQuery_result {
 public:

  GFXDService_executePreparedQuery_result() {
  }

  virtual ~GFXDService_executePreparedQuery_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_executePreparedQuery_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_executePreparedQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePreparedQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePreparedQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePreparedQuery_presult__isset {
  _GFXDService_executePreparedQuery_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePreparedQuery_presult__isset;

class GFXDService_executePreparedQuery_presult {
 public:


  virtual ~GFXDService_executePreparedQuery_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_executePreparedQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_executePreparedBatch_args__isset {
  _GFXDService_executePreparedBatch_args__isset() : stmtId(false), paramsBatch(false), token(false) {}
  bool stmtId;
  bool paramsBatch;
  bool token;
} _GFXDService_executePreparedBatch_args__isset;

class GFXDService_executePreparedBatch_args {
 public:

  GFXDService_executePreparedBatch_args() : stmtId(0), token() {
  }

  virtual ~GFXDService_executePreparedBatch_args() throw() {}

  int32_t stmtId;
  std::vector<Row>  paramsBatch;
  std::string token;

  _GFXDService_executePreparedBatch_args__isset __isset;

  void __set_stmtId(const int32_t val) {
    stmtId = val;
  }

  void __set_paramsBatch(const std::vector<Row> & val) {
    paramsBatch = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_executePreparedBatch_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(paramsBatch == rhs.paramsBatch))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePreparedBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePreparedBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_executePreparedBatch_pargs {
 public:


  virtual ~GFXDService_executePreparedBatch_pargs() throw() {}

  const int32_t* stmtId;
  const std::vector<Row> * paramsBatch;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePreparedBatch_result__isset {
  _GFXDService_executePreparedBatch_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePreparedBatch_result__isset;

class GFXDService_executePreparedBatch_result {
 public:

  GFXDService_executePreparedBatch_result() {
  }

  virtual ~GFXDService_executePreparedBatch_result() throw() {}

  UpdateResult success;
  GFXDException error;

  _GFXDService_executePreparedBatch_result__isset __isset;

  void __set_success(const UpdateResult& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_executePreparedBatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executePreparedBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executePreparedBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executePreparedBatch_presult__isset {
  _GFXDService_executePreparedBatch_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_executePreparedBatch_presult__isset;

class GFXDService_executePreparedBatch_presult {
 public:


  virtual ~GFXDService_executePreparedBatch_presult() throw() {}

  UpdateResult* success;
  GFXDException error;

  _GFXDService_executePreparedBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_prepareAndExecute_args__isset {
  _GFXDService_prepareAndExecute_args__isset() : connId(false), sql(false), paramsBatch(false), outputParams(false), attrs(false), token(false) {}
  bool connId;
  bool sql;
  bool paramsBatch;
  bool outputParams;
  bool attrs;
  bool token;
} _GFXDService_prepareAndExecute_args__isset;

class GFXDService_prepareAndExecute_args {
 public:

  GFXDService_prepareAndExecute_args() : connId(0), sql(), token() {
  }

  virtual ~GFXDService_prepareAndExecute_args() throw() {}

  int32_t connId;
  std::string sql;
  std::vector<Row>  paramsBatch;
  std::map<int32_t, OutputParameter>  outputParams;
  StatementAttrs attrs;
  std::string token;

  _GFXDService_prepareAndExecute_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_sql(const std::string& val) {
    sql = val;
  }

  void __set_paramsBatch(const std::vector<Row> & val) {
    paramsBatch = val;
  }

  void __set_outputParams(const std::map<int32_t, OutputParameter> & val) {
    outputParams = val;
  }

  void __set_attrs(const StatementAttrs& val) {
    attrs = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_prepareAndExecute_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(sql == rhs.sql))
      return false;
    if (!(paramsBatch == rhs.paramsBatch))
      return false;
    if (!(outputParams == rhs.outputParams))
      return false;
    if (!(attrs == rhs.attrs))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_prepareAndExecute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_prepareAndExecute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_prepareAndExecute_pargs {
 public:


  virtual ~GFXDService_prepareAndExecute_pargs() throw() {}

  const int32_t* connId;
  const std::string* sql;
  const std::vector<Row> * paramsBatch;
  const std::map<int32_t, OutputParameter> * outputParams;
  const StatementAttrs* attrs;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_prepareAndExecute_result__isset {
  _GFXDService_prepareAndExecute_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_prepareAndExecute_result__isset;

class GFXDService_prepareAndExecute_result {
 public:

  GFXDService_prepareAndExecute_result() {
  }

  virtual ~GFXDService_prepareAndExecute_result() throw() {}

  StatementResult success;
  GFXDException error;

  _GFXDService_prepareAndExecute_result__isset __isset;

  void __set_success(const StatementResult& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_prepareAndExecute_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_prepareAndExecute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_prepareAndExecute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_prepareAndExecute_presult__isset {
  _GFXDService_prepareAndExecute_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_prepareAndExecute_presult__isset;

class GFXDService_prepareAndExecute_presult {
 public:


  virtual ~GFXDService_prepareAndExecute_presult() throw() {}

  StatementResult* success;
  GFXDException error;

  _GFXDService_prepareAndExecute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_beginTransaction_args__isset {
  _GFXDService_beginTransaction_args__isset() : connId(false), isolationLevel(false), flags(false), token(false) {}
  bool connId;
  bool isolationLevel;
  bool flags;
  bool token;
} _GFXDService_beginTransaction_args__isset;

class GFXDService_beginTransaction_args {
 public:

  GFXDService_beginTransaction_args() : connId(0), isolationLevel(0), token() {
  }

  virtual ~GFXDService_beginTransaction_args() throw() {}

  int32_t connId;
  int8_t isolationLevel;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _GFXDService_beginTransaction_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_isolationLevel(const int8_t val) {
    isolationLevel = val;
  }

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val) {
    flags = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_beginTransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(isolationLevel == rhs.isolationLevel))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_beginTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_beginTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_beginTransaction_pargs {
 public:


  virtual ~GFXDService_beginTransaction_pargs() throw() {}

  const int32_t* connId;
  const int8_t* isolationLevel;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_beginTransaction_result__isset {
  _GFXDService_beginTransaction_result__isset() : error(false) {}
  bool error;
} _GFXDService_beginTransaction_result__isset;

class GFXDService_beginTransaction_result {
 public:

  GFXDService_beginTransaction_result() {
  }

  virtual ~GFXDService_beginTransaction_result() throw() {}

  GFXDException error;

  _GFXDService_beginTransaction_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_beginTransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_beginTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_beginTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_beginTransaction_presult__isset {
  _GFXDService_beginTransaction_presult__isset() : error(false) {}
  bool error;
} _GFXDService_beginTransaction_presult__isset;

class GFXDService_beginTransaction_presult {
 public:


  virtual ~GFXDService_beginTransaction_presult() throw() {}

  GFXDException error;

  _GFXDService_beginTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_setTransactionAttributes_args__isset {
  _GFXDService_setTransactionAttributes_args__isset() : connId(false), flags(false), token(false) {}
  bool connId;
  bool flags;
  bool token;
} _GFXDService_setTransactionAttributes_args__isset;

class GFXDService_setTransactionAttributes_args {
 public:

  GFXDService_setTransactionAttributes_args() : connId(0), token() {
  }

  virtual ~GFXDService_setTransactionAttributes_args() throw() {}

  int32_t connId;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _GFXDService_setTransactionAttributes_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val) {
    flags = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_setTransactionAttributes_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_setTransactionAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_setTransactionAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_setTransactionAttributes_pargs {
 public:


  virtual ~GFXDService_setTransactionAttributes_pargs() throw() {}

  const int32_t* connId;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_setTransactionAttributes_result__isset {
  _GFXDService_setTransactionAttributes_result__isset() : error(false) {}
  bool error;
} _GFXDService_setTransactionAttributes_result__isset;

class GFXDService_setTransactionAttributes_result {
 public:

  GFXDService_setTransactionAttributes_result() {
  }

  virtual ~GFXDService_setTransactionAttributes_result() throw() {}

  GFXDException error;

  _GFXDService_setTransactionAttributes_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_setTransactionAttributes_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_setTransactionAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_setTransactionAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_setTransactionAttributes_presult__isset {
  _GFXDService_setTransactionAttributes_presult__isset() : error(false) {}
  bool error;
} _GFXDService_setTransactionAttributes_presult__isset;

class GFXDService_setTransactionAttributes_presult {
 public:


  virtual ~GFXDService_setTransactionAttributes_presult() throw() {}

  GFXDException error;

  _GFXDService_setTransactionAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getTransactionAttributes_args__isset {
  _GFXDService_getTransactionAttributes_args__isset() : connId(false), token(false) {}
  bool connId;
  bool token;
} _GFXDService_getTransactionAttributes_args__isset;

class GFXDService_getTransactionAttributes_args {
 public:

  GFXDService_getTransactionAttributes_args() : connId(0), token() {
  }

  virtual ~GFXDService_getTransactionAttributes_args() throw() {}

  int32_t connId;
  std::string token;

  _GFXDService_getTransactionAttributes_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_getTransactionAttributes_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getTransactionAttributes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getTransactionAttributes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getTransactionAttributes_pargs {
 public:


  virtual ~GFXDService_getTransactionAttributes_pargs() throw() {}

  const int32_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getTransactionAttributes_result__isset {
  _GFXDService_getTransactionAttributes_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getTransactionAttributes_result__isset;

class GFXDService_getTransactionAttributes_result {
 public:

  GFXDService_getTransactionAttributes_result() {
  }

  virtual ~GFXDService_getTransactionAttributes_result() throw() {}

  std::map<TransactionAttribute::type, bool>  success;
  GFXDException error;

  _GFXDService_getTransactionAttributes_result__isset __isset;

  void __set_success(const std::map<TransactionAttribute::type, bool> & val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getTransactionAttributes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getTransactionAttributes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getTransactionAttributes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getTransactionAttributes_presult__isset {
  _GFXDService_getTransactionAttributes_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getTransactionAttributes_presult__isset;

class GFXDService_getTransactionAttributes_presult {
 public:


  virtual ~GFXDService_getTransactionAttributes_presult() throw() {}

  std::map<TransactionAttribute::type, bool> * success;
  GFXDException error;

  _GFXDService_getTransactionAttributes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_commitTransaction_args__isset {
  _GFXDService_commitTransaction_args__isset() : connId(false), startNewTransaction(false), flags(false), token(false) {}
  bool connId;
  bool startNewTransaction;
  bool flags;
  bool token;
} _GFXDService_commitTransaction_args__isset;

class GFXDService_commitTransaction_args {
 public:

  GFXDService_commitTransaction_args() : connId(0), startNewTransaction(0), token() {
  }

  virtual ~GFXDService_commitTransaction_args() throw() {}

  int32_t connId;
  bool startNewTransaction;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _GFXDService_commitTransaction_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_startNewTransaction(const bool val) {
    startNewTransaction = val;
  }

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val) {
    flags = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_commitTransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(startNewTransaction == rhs.startNewTransaction))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_commitTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_commitTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_commitTransaction_pargs {
 public:


  virtual ~GFXDService_commitTransaction_pargs() throw() {}

  const int32_t* connId;
  const bool* startNewTransaction;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_commitTransaction_result__isset {
  _GFXDService_commitTransaction_result__isset() : error(false) {}
  bool error;
} _GFXDService_commitTransaction_result__isset;

class GFXDService_commitTransaction_result {
 public:

  GFXDService_commitTransaction_result() {
  }

  virtual ~GFXDService_commitTransaction_result() throw() {}

  GFXDException error;

  _GFXDService_commitTransaction_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_commitTransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_commitTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_commitTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_commitTransaction_presult__isset {
  _GFXDService_commitTransaction_presult__isset() : error(false) {}
  bool error;
} _GFXDService_commitTransaction_presult__isset;

class GFXDService_commitTransaction_presult {
 public:


  virtual ~GFXDService_commitTransaction_presult() throw() {}

  GFXDException error;

  _GFXDService_commitTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_rollbackTransaction_args__isset {
  _GFXDService_rollbackTransaction_args__isset() : connId(false), startNewTransaction(false), flags(false), token(false) {}
  bool connId;
  bool startNewTransaction;
  bool flags;
  bool token;
} _GFXDService_rollbackTransaction_args__isset;

class GFXDService_rollbackTransaction_args {
 public:

  GFXDService_rollbackTransaction_args() : connId(0), startNewTransaction(0), token() {
  }

  virtual ~GFXDService_rollbackTransaction_args() throw() {}

  int32_t connId;
  bool startNewTransaction;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _GFXDService_rollbackTransaction_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_startNewTransaction(const bool val) {
    startNewTransaction = val;
  }

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val) {
    flags = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_rollbackTransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(startNewTransaction == rhs.startNewTransaction))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_rollbackTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_rollbackTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_rollbackTransaction_pargs {
 public:


  virtual ~GFXDService_rollbackTransaction_pargs() throw() {}

  const int32_t* connId;
  const bool* startNewTransaction;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_rollbackTransaction_result__isset {
  _GFXDService_rollbackTransaction_result__isset() : error(false) {}
  bool error;
} _GFXDService_rollbackTransaction_result__isset;

class GFXDService_rollbackTransaction_result {
 public:

  GFXDService_rollbackTransaction_result() {
  }

  virtual ~GFXDService_rollbackTransaction_result() throw() {}

  GFXDException error;

  _GFXDService_rollbackTransaction_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_rollbackTransaction_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_rollbackTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_rollbackTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_rollbackTransaction_presult__isset {
  _GFXDService_rollbackTransaction_presult__isset() : error(false) {}
  bool error;
} _GFXDService_rollbackTransaction_presult__isset;

class GFXDService_rollbackTransaction_presult {
 public:


  virtual ~GFXDService_rollbackTransaction_presult() throw() {}

  GFXDException error;

  _GFXDService_rollbackTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_prepareCommitTransaction_args__isset {
  _GFXDService_prepareCommitTransaction_args__isset() : connId(false), flags(false), token(false) {}
  bool connId;
  bool flags;
  bool token;
} _GFXDService_prepareCommitTransaction_args__isset;

class GFXDService_prepareCommitTransaction_args {
 public:

  GFXDService_prepareCommitTransaction_args() : connId(0), token() {
  }

  virtual ~GFXDService_prepareCommitTransaction_args() throw() {}

  int32_t connId;
  std::map<TransactionAttribute::type, bool>  flags;
  std::string token;

  _GFXDService_prepareCommitTransaction_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_flags(const std::map<TransactionAttribute::type, bool> & val) {
    flags = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_prepareCommitTransaction_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(flags == rhs.flags))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_prepareCommitTransaction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_prepareCommitTransaction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_prepareCommitTransaction_pargs {
 public:


  virtual ~GFXDService_prepareCommitTransaction_pargs() throw() {}

  const int32_t* connId;
  const std::map<TransactionAttribute::type, bool> * flags;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_prepareCommitTransaction_result__isset {
  _GFXDService_prepareCommitTransaction_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_prepareCommitTransaction_result__isset;

class GFXDService_prepareCommitTransaction_result {
 public:

  GFXDService_prepareCommitTransaction_result() : success(0) {
  }

  virtual ~GFXDService_prepareCommitTransaction_result() throw() {}

  bool success;
  GFXDException error;

  _GFXDService_prepareCommitTransaction_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_prepareCommitTransaction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_prepareCommitTransaction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_prepareCommitTransaction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_prepareCommitTransaction_presult__isset {
  _GFXDService_prepareCommitTransaction_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_prepareCommitTransaction_presult__isset;

class GFXDService_prepareCommitTransaction_presult {
 public:


  virtual ~GFXDService_prepareCommitTransaction_presult() throw() {}

  bool* success;
  GFXDException error;

  _GFXDService_prepareCommitTransaction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getNextResultSet_args__isset {
  _GFXDService_getNextResultSet_args__isset() : cursorId(false), otherResultSetBehaviour(false), token(false) {}
  bool cursorId;
  bool otherResultSetBehaviour;
  bool token;
} _GFXDService_getNextResultSet_args__isset;

class GFXDService_getNextResultSet_args {
 public:

  GFXDService_getNextResultSet_args() : cursorId(0), otherResultSetBehaviour(0), token() {
  }

  virtual ~GFXDService_getNextResultSet_args() throw() {}

  int32_t cursorId;
  int8_t otherResultSetBehaviour;
  std::string token;

  _GFXDService_getNextResultSet_args__isset __isset;

  void __set_cursorId(const int32_t val) {
    cursorId = val;
  }

  void __set_otherResultSetBehaviour(const int8_t val) {
    otherResultSetBehaviour = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_getNextResultSet_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(otherResultSetBehaviour == rhs.otherResultSetBehaviour))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getNextResultSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getNextResultSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getNextResultSet_pargs {
 public:


  virtual ~GFXDService_getNextResultSet_pargs() throw() {}

  const int32_t* cursorId;
  const int8_t* otherResultSetBehaviour;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getNextResultSet_result__isset {
  _GFXDService_getNextResultSet_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getNextResultSet_result__isset;

class GFXDService_getNextResultSet_result {
 public:

  GFXDService_getNextResultSet_result() {
  }

  virtual ~GFXDService_getNextResultSet_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_getNextResultSet_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getNextResultSet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getNextResultSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getNextResultSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getNextResultSet_presult__isset {
  _GFXDService_getNextResultSet_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getNextResultSet_presult__isset;

class GFXDService_getNextResultSet_presult {
 public:


  virtual ~GFXDService_getNextResultSet_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_getNextResultSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getBlobChunk_args__isset {
  _GFXDService_getBlobChunk_args__isset() : connId(false), lobId(false), offset(false), size(false), freeLobAtEnd(false), token(false) {}
  bool connId;
  bool lobId;
  bool offset;
  bool size;
  bool freeLobAtEnd;
  bool token;
} _GFXDService_getBlobChunk_args__isset;

class GFXDService_getBlobChunk_args {
 public:

  GFXDService_getBlobChunk_args() : connId(0), lobId(0), offset(0), size(0), freeLobAtEnd(0), token() {
  }

  virtual ~GFXDService_getBlobChunk_args() throw() {}

  int32_t connId;
  int32_t lobId;
  int64_t offset;
  int32_t size;
  bool freeLobAtEnd;
  std::string token;

  _GFXDService_getBlobChunk_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_lobId(const int32_t val) {
    lobId = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  void __set_freeLobAtEnd(const bool val) {
    freeLobAtEnd = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_getBlobChunk_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(lobId == rhs.lobId))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(freeLobAtEnd == rhs.freeLobAtEnd))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getBlobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getBlobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getBlobChunk_pargs {
 public:


  virtual ~GFXDService_getBlobChunk_pargs() throw() {}

  const int32_t* connId;
  const int32_t* lobId;
  const int64_t* offset;
  const int32_t* size;
  const bool* freeLobAtEnd;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getBlobChunk_result__isset {
  _GFXDService_getBlobChunk_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getBlobChunk_result__isset;

class GFXDService_getBlobChunk_result {
 public:

  GFXDService_getBlobChunk_result() {
  }

  virtual ~GFXDService_getBlobChunk_result() throw() {}

  BlobChunk success;
  GFXDException error;

  _GFXDService_getBlobChunk_result__isset __isset;

  void __set_success(const BlobChunk& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getBlobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getBlobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getBlobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getBlobChunk_presult__isset {
  _GFXDService_getBlobChunk_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getBlobChunk_presult__isset;

class GFXDService_getBlobChunk_presult {
 public:


  virtual ~GFXDService_getBlobChunk_presult() throw() {}

  BlobChunk* success;
  GFXDException error;

  _GFXDService_getBlobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getClobChunk_args__isset {
  _GFXDService_getClobChunk_args__isset() : connId(false), lobId(false), offset(false), size(false), freeLobAtEnd(false), token(false) {}
  bool connId;
  bool lobId;
  bool offset;
  bool size;
  bool freeLobAtEnd;
  bool token;
} _GFXDService_getClobChunk_args__isset;

class GFXDService_getClobChunk_args {
 public:

  GFXDService_getClobChunk_args() : connId(0), lobId(0), offset(0), size(0), freeLobAtEnd(0), token() {
  }

  virtual ~GFXDService_getClobChunk_args() throw() {}

  int32_t connId;
  int32_t lobId;
  int64_t offset;
  int32_t size;
  bool freeLobAtEnd;
  std::string token;

  _GFXDService_getClobChunk_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_lobId(const int32_t val) {
    lobId = val;
  }

  void __set_offset(const int64_t val) {
    offset = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  void __set_freeLobAtEnd(const bool val) {
    freeLobAtEnd = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_getClobChunk_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(lobId == rhs.lobId))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(freeLobAtEnd == rhs.freeLobAtEnd))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getClobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getClobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getClobChunk_pargs {
 public:


  virtual ~GFXDService_getClobChunk_pargs() throw() {}

  const int32_t* connId;
  const int32_t* lobId;
  const int64_t* offset;
  const int32_t* size;
  const bool* freeLobAtEnd;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getClobChunk_result__isset {
  _GFXDService_getClobChunk_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getClobChunk_result__isset;

class GFXDService_getClobChunk_result {
 public:

  GFXDService_getClobChunk_result() {
  }

  virtual ~GFXDService_getClobChunk_result() throw() {}

  ClobChunk success;
  GFXDException error;

  _GFXDService_getClobChunk_result__isset __isset;

  void __set_success(const ClobChunk& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getClobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getClobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getClobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getClobChunk_presult__isset {
  _GFXDService_getClobChunk_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getClobChunk_presult__isset;

class GFXDService_getClobChunk_presult {
 public:


  virtual ~GFXDService_getClobChunk_presult() throw() {}

  ClobChunk* success;
  GFXDException error;

  _GFXDService_getClobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_sendBlobChunk_args__isset {
  _GFXDService_sendBlobChunk_args__isset() : chunk(false), connId(false), token(false) {}
  bool chunk;
  bool connId;
  bool token;
} _GFXDService_sendBlobChunk_args__isset;

class GFXDService_sendBlobChunk_args {
 public:

  GFXDService_sendBlobChunk_args() : connId(0), token() {
  }

  virtual ~GFXDService_sendBlobChunk_args() throw() {}

  BlobChunk chunk;
  int32_t connId;
  std::string token;

  _GFXDService_sendBlobChunk_args__isset __isset;

  void __set_chunk(const BlobChunk& val) {
    chunk = val;
  }

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_sendBlobChunk_args & rhs) const
  {
    if (!(chunk == rhs.chunk))
      return false;
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_sendBlobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_sendBlobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_sendBlobChunk_pargs {
 public:


  virtual ~GFXDService_sendBlobChunk_pargs() throw() {}

  const BlobChunk* chunk;
  const int32_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_sendBlobChunk_result__isset {
  _GFXDService_sendBlobChunk_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_sendBlobChunk_result__isset;

class GFXDService_sendBlobChunk_result {
 public:

  GFXDService_sendBlobChunk_result() : success(0) {
  }

  virtual ~GFXDService_sendBlobChunk_result() throw() {}

  int32_t success;
  GFXDException error;

  _GFXDService_sendBlobChunk_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_sendBlobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_sendBlobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_sendBlobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_sendBlobChunk_presult__isset {
  _GFXDService_sendBlobChunk_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_sendBlobChunk_presult__isset;

class GFXDService_sendBlobChunk_presult {
 public:


  virtual ~GFXDService_sendBlobChunk_presult() throw() {}

  int32_t* success;
  GFXDException error;

  _GFXDService_sendBlobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_sendClobChunk_args__isset {
  _GFXDService_sendClobChunk_args__isset() : chunk(false), connId(false), token(false) {}
  bool chunk;
  bool connId;
  bool token;
} _GFXDService_sendClobChunk_args__isset;

class GFXDService_sendClobChunk_args {
 public:

  GFXDService_sendClobChunk_args() : connId(0), token() {
  }

  virtual ~GFXDService_sendClobChunk_args() throw() {}

  ClobChunk chunk;
  int32_t connId;
  std::string token;

  _GFXDService_sendClobChunk_args__isset __isset;

  void __set_chunk(const ClobChunk& val) {
    chunk = val;
  }

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_sendClobChunk_args & rhs) const
  {
    if (!(chunk == rhs.chunk))
      return false;
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_sendClobChunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_sendClobChunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_sendClobChunk_pargs {
 public:


  virtual ~GFXDService_sendClobChunk_pargs() throw() {}

  const ClobChunk* chunk;
  const int32_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_sendClobChunk_result__isset {
  _GFXDService_sendClobChunk_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_sendClobChunk_result__isset;

class GFXDService_sendClobChunk_result {
 public:

  GFXDService_sendClobChunk_result() : success(0) {
  }

  virtual ~GFXDService_sendClobChunk_result() throw() {}

  int32_t success;
  GFXDException error;

  _GFXDService_sendClobChunk_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_sendClobChunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_sendClobChunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_sendClobChunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_sendClobChunk_presult__isset {
  _GFXDService_sendClobChunk_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_sendClobChunk_presult__isset;

class GFXDService_sendClobChunk_presult {
 public:


  virtual ~GFXDService_sendClobChunk_presult() throw() {}

  int32_t* success;
  GFXDException error;

  _GFXDService_sendClobChunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_freeLob_args__isset {
  _GFXDService_freeLob_args__isset() : connId(false), lobId(false), token(false) {}
  bool connId;
  bool lobId;
  bool token;
} _GFXDService_freeLob_args__isset;

class GFXDService_freeLob_args {
 public:

  GFXDService_freeLob_args() : connId(0), lobId(0), token() {
  }

  virtual ~GFXDService_freeLob_args() throw() {}

  int32_t connId;
  int32_t lobId;
  std::string token;

  _GFXDService_freeLob_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_lobId(const int32_t val) {
    lobId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_freeLob_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(lobId == rhs.lobId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_freeLob_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_freeLob_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_freeLob_pargs {
 public:


  virtual ~GFXDService_freeLob_pargs() throw() {}

  const int32_t* connId;
  const int32_t* lobId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_freeLob_result__isset {
  _GFXDService_freeLob_result__isset() : error(false) {}
  bool error;
} _GFXDService_freeLob_result__isset;

class GFXDService_freeLob_result {
 public:

  GFXDService_freeLob_result() {
  }

  virtual ~GFXDService_freeLob_result() throw() {}

  GFXDException error;

  _GFXDService_freeLob_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_freeLob_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_freeLob_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_freeLob_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_freeLob_presult__isset {
  _GFXDService_freeLob_presult__isset() : error(false) {}
  bool error;
} _GFXDService_freeLob_presult__isset;

class GFXDService_freeLob_presult {
 public:


  virtual ~GFXDService_freeLob_presult() throw() {}

  GFXDException error;

  _GFXDService_freeLob_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_scrollCursor_args__isset {
  _GFXDService_scrollCursor_args__isset() : cursorId(false), offset(false), offsetIsAbsolute(false), fetchReverse(false), fetchSize(false), token(false) {}
  bool cursorId;
  bool offset;
  bool offsetIsAbsolute;
  bool fetchReverse;
  bool fetchSize;
  bool token;
} _GFXDService_scrollCursor_args__isset;

class GFXDService_scrollCursor_args {
 public:

  GFXDService_scrollCursor_args() : cursorId(0), offset(0), offsetIsAbsolute(0), fetchReverse(0), fetchSize(0), token() {
  }

  virtual ~GFXDService_scrollCursor_args() throw() {}

  int32_t cursorId;
  int32_t offset;
  bool offsetIsAbsolute;
  bool fetchReverse;
  int32_t fetchSize;
  std::string token;

  _GFXDService_scrollCursor_args__isset __isset;

  void __set_cursorId(const int32_t val) {
    cursorId = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_offsetIsAbsolute(const bool val) {
    offsetIsAbsolute = val;
  }

  void __set_fetchReverse(const bool val) {
    fetchReverse = val;
  }

  void __set_fetchSize(const int32_t val) {
    fetchSize = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_scrollCursor_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(offsetIsAbsolute == rhs.offsetIsAbsolute))
      return false;
    if (!(fetchReverse == rhs.fetchReverse))
      return false;
    if (!(fetchSize == rhs.fetchSize))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_scrollCursor_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_scrollCursor_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_scrollCursor_pargs {
 public:


  virtual ~GFXDService_scrollCursor_pargs() throw() {}

  const int32_t* cursorId;
  const int32_t* offset;
  const bool* offsetIsAbsolute;
  const bool* fetchReverse;
  const int32_t* fetchSize;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_scrollCursor_result__isset {
  _GFXDService_scrollCursor_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_scrollCursor_result__isset;

class GFXDService_scrollCursor_result {
 public:

  GFXDService_scrollCursor_result() {
  }

  virtual ~GFXDService_scrollCursor_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_scrollCursor_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_scrollCursor_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_scrollCursor_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_scrollCursor_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_scrollCursor_presult__isset {
  _GFXDService_scrollCursor_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_scrollCursor_presult__isset;

class GFXDService_scrollCursor_presult {
 public:


  virtual ~GFXDService_scrollCursor_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_scrollCursor_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_executeCursorUpdate_args__isset {
  _GFXDService_executeCursorUpdate_args__isset() : cursorId(false), operations(false), changedRows(false), changedColumnsList(false), changedRowIndexes(false), token(false) {}
  bool cursorId;
  bool operations;
  bool changedRows;
  bool changedColumnsList;
  bool changedRowIndexes;
  bool token;
} _GFXDService_executeCursorUpdate_args__isset;

class GFXDService_executeCursorUpdate_args {
 public:

  GFXDService_executeCursorUpdate_args() : cursorId(0), token() {
  }

  virtual ~GFXDService_executeCursorUpdate_args() throw() {}

  int32_t cursorId;
  std::vector<int8_t>  operations;
  std::vector<Row>  changedRows;
  std::vector<std::vector<int32_t> >  changedColumnsList;
  std::vector<int32_t>  changedRowIndexes;
  std::string token;

  _GFXDService_executeCursorUpdate_args__isset __isset;

  void __set_cursorId(const int32_t val) {
    cursorId = val;
  }

  void __set_operations(const std::vector<int8_t> & val) {
    operations = val;
  }

  void __set_changedRows(const std::vector<Row> & val) {
    changedRows = val;
  }

  void __set_changedColumnsList(const std::vector<std::vector<int32_t> > & val) {
    changedColumnsList = val;
  }

  void __set_changedRowIndexes(const std::vector<int32_t> & val) {
    changedRowIndexes = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_executeCursorUpdate_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(operations == rhs.operations))
      return false;
    if (!(changedRows == rhs.changedRows))
      return false;
    if (!(changedColumnsList == rhs.changedColumnsList))
      return false;
    if (!(changedRowIndexes == rhs.changedRowIndexes))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executeCursorUpdate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executeCursorUpdate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_executeCursorUpdate_pargs {
 public:


  virtual ~GFXDService_executeCursorUpdate_pargs() throw() {}

  const int32_t* cursorId;
  const std::vector<int8_t> * operations;
  const std::vector<Row> * changedRows;
  const std::vector<std::vector<int32_t> > * changedColumnsList;
  const std::vector<int32_t> * changedRowIndexes;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executeCursorUpdate_result__isset {
  _GFXDService_executeCursorUpdate_result__isset() : error(false) {}
  bool error;
} _GFXDService_executeCursorUpdate_result__isset;

class GFXDService_executeCursorUpdate_result {
 public:

  GFXDService_executeCursorUpdate_result() {
  }

  virtual ~GFXDService_executeCursorUpdate_result() throw() {}

  GFXDException error;

  _GFXDService_executeCursorUpdate_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_executeCursorUpdate_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_executeCursorUpdate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_executeCursorUpdate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_executeCursorUpdate_presult__isset {
  _GFXDService_executeCursorUpdate_presult__isset() : error(false) {}
  bool error;
} _GFXDService_executeCursorUpdate_presult__isset;

class GFXDService_executeCursorUpdate_presult {
 public:


  virtual ~GFXDService_executeCursorUpdate_presult() throw() {}

  GFXDException error;

  _GFXDService_executeCursorUpdate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getServiceMetaData_args__isset {
  _GFXDService_getServiceMetaData_args__isset() : connId(false), token(false) {}
  bool connId;
  bool token;
} _GFXDService_getServiceMetaData_args__isset;

class GFXDService_getServiceMetaData_args {
 public:

  GFXDService_getServiceMetaData_args() : connId(0), token() {
  }

  virtual ~GFXDService_getServiceMetaData_args() throw() {}

  int32_t connId;
  std::string token;

  _GFXDService_getServiceMetaData_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_getServiceMetaData_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getServiceMetaData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getServiceMetaData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getServiceMetaData_pargs {
 public:


  virtual ~GFXDService_getServiceMetaData_pargs() throw() {}

  const int32_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getServiceMetaData_result__isset {
  _GFXDService_getServiceMetaData_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getServiceMetaData_result__isset;

class GFXDService_getServiceMetaData_result {
 public:

  GFXDService_getServiceMetaData_result() {
  }

  virtual ~GFXDService_getServiceMetaData_result() throw() {}

  ServiceMetaData success;
  GFXDException error;

  _GFXDService_getServiceMetaData_result__isset __isset;

  void __set_success(const ServiceMetaData& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getServiceMetaData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getServiceMetaData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getServiceMetaData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getServiceMetaData_presult__isset {
  _GFXDService_getServiceMetaData_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getServiceMetaData_presult__isset;

class GFXDService_getServiceMetaData_presult {
 public:


  virtual ~GFXDService_getServiceMetaData_presult() throw() {}

  ServiceMetaData* success;
  GFXDException error;

  _GFXDService_getServiceMetaData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getSchemaMetaData_args__isset {
  _GFXDService_getSchemaMetaData_args__isset() : schemaCall(false), metadataArgs(false) {}
  bool schemaCall;
  bool metadataArgs;
} _GFXDService_getSchemaMetaData_args__isset;

class GFXDService_getSchemaMetaData_args {
 public:

  GFXDService_getSchemaMetaData_args() : schemaCall((ServiceMetaDataCall::type)0) {
  }

  virtual ~GFXDService_getSchemaMetaData_args() throw() {}

  ServiceMetaDataCall::type schemaCall;
  ServiceMetaDataArgs metadataArgs;

  _GFXDService_getSchemaMetaData_args__isset __isset;

  void __set_schemaCall(const ServiceMetaDataCall::type val) {
    schemaCall = val;
  }

  void __set_metadataArgs(const ServiceMetaDataArgs& val) {
    metadataArgs = val;
  }

  bool operator == (const GFXDService_getSchemaMetaData_args & rhs) const
  {
    if (!(schemaCall == rhs.schemaCall))
      return false;
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getSchemaMetaData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getSchemaMetaData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getSchemaMetaData_pargs {
 public:


  virtual ~GFXDService_getSchemaMetaData_pargs() throw() {}

  const ServiceMetaDataCall::type* schemaCall;
  const ServiceMetaDataArgs* metadataArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getSchemaMetaData_result__isset {
  _GFXDService_getSchemaMetaData_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getSchemaMetaData_result__isset;

class GFXDService_getSchemaMetaData_result {
 public:

  GFXDService_getSchemaMetaData_result() {
  }

  virtual ~GFXDService_getSchemaMetaData_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_getSchemaMetaData_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getSchemaMetaData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getSchemaMetaData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getSchemaMetaData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getSchemaMetaData_presult__isset {
  _GFXDService_getSchemaMetaData_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getSchemaMetaData_presult__isset;

class GFXDService_getSchemaMetaData_presult {
 public:


  virtual ~GFXDService_getSchemaMetaData_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_getSchemaMetaData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getIndexInfo_args__isset {
  _GFXDService_getIndexInfo_args__isset() : metadataArgs(false), unique(false), approximate(false) {}
  bool metadataArgs;
  bool unique;
  bool approximate;
} _GFXDService_getIndexInfo_args__isset;

class GFXDService_getIndexInfo_args {
 public:

  GFXDService_getIndexInfo_args() : unique(0), approximate(0) {
  }

  virtual ~GFXDService_getIndexInfo_args() throw() {}

  ServiceMetaDataArgs metadataArgs;
  bool unique;
  bool approximate;

  _GFXDService_getIndexInfo_args__isset __isset;

  void __set_metadataArgs(const ServiceMetaDataArgs& val) {
    metadataArgs = val;
  }

  void __set_unique(const bool val) {
    unique = val;
  }

  void __set_approximate(const bool val) {
    approximate = val;
  }

  bool operator == (const GFXDService_getIndexInfo_args & rhs) const
  {
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    if (!(unique == rhs.unique))
      return false;
    if (!(approximate == rhs.approximate))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getIndexInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getIndexInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getIndexInfo_pargs {
 public:


  virtual ~GFXDService_getIndexInfo_pargs() throw() {}

  const ServiceMetaDataArgs* metadataArgs;
  const bool* unique;
  const bool* approximate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getIndexInfo_result__isset {
  _GFXDService_getIndexInfo_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getIndexInfo_result__isset;

class GFXDService_getIndexInfo_result {
 public:

  GFXDService_getIndexInfo_result() {
  }

  virtual ~GFXDService_getIndexInfo_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_getIndexInfo_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getIndexInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getIndexInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getIndexInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getIndexInfo_presult__isset {
  _GFXDService_getIndexInfo_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getIndexInfo_presult__isset;

class GFXDService_getIndexInfo_presult {
 public:


  virtual ~GFXDService_getIndexInfo_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_getIndexInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getUDTs_args__isset {
  _GFXDService_getUDTs_args__isset() : metadataArgs(false), types(false) {}
  bool metadataArgs;
  bool types;
} _GFXDService_getUDTs_args__isset;

class GFXDService_getUDTs_args {
 public:

  GFXDService_getUDTs_args() {
  }

  virtual ~GFXDService_getUDTs_args() throw() {}

  ServiceMetaDataArgs metadataArgs;
  std::vector<GFXDType::type>  types;

  _GFXDService_getUDTs_args__isset __isset;

  void __set_metadataArgs(const ServiceMetaDataArgs& val) {
    metadataArgs = val;
  }

  void __set_types(const std::vector<GFXDType::type> & val) {
    types = val;
  }

  bool operator == (const GFXDService_getUDTs_args & rhs) const
  {
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    if (!(types == rhs.types))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getUDTs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getUDTs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getUDTs_pargs {
 public:


  virtual ~GFXDService_getUDTs_pargs() throw() {}

  const ServiceMetaDataArgs* metadataArgs;
  const std::vector<GFXDType::type> * types;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getUDTs_result__isset {
  _GFXDService_getUDTs_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getUDTs_result__isset;

class GFXDService_getUDTs_result {
 public:

  GFXDService_getUDTs_result() {
  }

  virtual ~GFXDService_getUDTs_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_getUDTs_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getUDTs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getUDTs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getUDTs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getUDTs_presult__isset {
  _GFXDService_getUDTs_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getUDTs_presult__isset;

class GFXDService_getUDTs_presult {
 public:


  virtual ~GFXDService_getUDTs_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_getUDTs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_getBestRowIdentifier_args__isset {
  _GFXDService_getBestRowIdentifier_args__isset() : metadataArgs(false), scope(false), nullable(false) {}
  bool metadataArgs;
  bool scope;
  bool nullable;
} _GFXDService_getBestRowIdentifier_args__isset;

class GFXDService_getBestRowIdentifier_args {
 public:

  GFXDService_getBestRowIdentifier_args() : scope(0), nullable(0) {
  }

  virtual ~GFXDService_getBestRowIdentifier_args() throw() {}

  ServiceMetaDataArgs metadataArgs;
  int32_t scope;
  bool nullable;

  _GFXDService_getBestRowIdentifier_args__isset __isset;

  void __set_metadataArgs(const ServiceMetaDataArgs& val) {
    metadataArgs = val;
  }

  void __set_scope(const int32_t val) {
    scope = val;
  }

  void __set_nullable(const bool val) {
    nullable = val;
  }

  bool operator == (const GFXDService_getBestRowIdentifier_args & rhs) const
  {
    if (!(metadataArgs == rhs.metadataArgs))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(nullable == rhs.nullable))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getBestRowIdentifier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getBestRowIdentifier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_getBestRowIdentifier_pargs {
 public:


  virtual ~GFXDService_getBestRowIdentifier_pargs() throw() {}

  const ServiceMetaDataArgs* metadataArgs;
  const int32_t* scope;
  const bool* nullable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getBestRowIdentifier_result__isset {
  _GFXDService_getBestRowIdentifier_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getBestRowIdentifier_result__isset;

class GFXDService_getBestRowIdentifier_result {
 public:

  GFXDService_getBestRowIdentifier_result() {
  }

  virtual ~GFXDService_getBestRowIdentifier_result() throw() {}

  RowSet success;
  GFXDException error;

  _GFXDService_getBestRowIdentifier_result__isset __isset;

  void __set_success(const RowSet& val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_getBestRowIdentifier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_getBestRowIdentifier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_getBestRowIdentifier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_getBestRowIdentifier_presult__isset {
  _GFXDService_getBestRowIdentifier_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_getBestRowIdentifier_presult__isset;

class GFXDService_getBestRowIdentifier_presult {
 public:


  virtual ~GFXDService_getBestRowIdentifier_presult() throw() {}

  RowSet* success;
  GFXDException error;

  _GFXDService_getBestRowIdentifier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_fetchActiveConnections_args__isset {
  _GFXDService_fetchActiveConnections_args__isset() : connId(false), token(false) {}
  bool connId;
  bool token;
} _GFXDService_fetchActiveConnections_args__isset;

class GFXDService_fetchActiveConnections_args {
 public:

  GFXDService_fetchActiveConnections_args() : connId(0), token() {
  }

  virtual ~GFXDService_fetchActiveConnections_args() throw() {}

  int32_t connId;
  std::string token;

  _GFXDService_fetchActiveConnections_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_fetchActiveConnections_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_fetchActiveConnections_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_fetchActiveConnections_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_fetchActiveConnections_pargs {
 public:


  virtual ~GFXDService_fetchActiveConnections_pargs() throw() {}

  const int32_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_fetchActiveConnections_result__isset {
  _GFXDService_fetchActiveConnections_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_fetchActiveConnections_result__isset;

class GFXDService_fetchActiveConnections_result {
 public:

  GFXDService_fetchActiveConnections_result() {
  }

  virtual ~GFXDService_fetchActiveConnections_result() throw() {}

  std::vector<ConnectionProperties>  success;
  GFXDException error;

  _GFXDService_fetchActiveConnections_result__isset __isset;

  void __set_success(const std::vector<ConnectionProperties> & val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_fetchActiveConnections_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_fetchActiveConnections_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_fetchActiveConnections_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_fetchActiveConnections_presult__isset {
  _GFXDService_fetchActiveConnections_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_fetchActiveConnections_presult__isset;

class GFXDService_fetchActiveConnections_presult {
 public:


  virtual ~GFXDService_fetchActiveConnections_presult() throw() {}

  std::vector<ConnectionProperties> * success;
  GFXDException error;

  _GFXDService_fetchActiveConnections_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_fetchActiveStatements_args__isset {
  _GFXDService_fetchActiveStatements_args__isset() : connId(false), token(false) {}
  bool connId;
  bool token;
} _GFXDService_fetchActiveStatements_args__isset;

class GFXDService_fetchActiveStatements_args {
 public:

  GFXDService_fetchActiveStatements_args() : connId(0), token() {
  }

  virtual ~GFXDService_fetchActiveStatements_args() throw() {}

  int32_t connId;
  std::string token;

  _GFXDService_fetchActiveStatements_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_fetchActiveStatements_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_fetchActiveStatements_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_fetchActiveStatements_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_fetchActiveStatements_pargs {
 public:


  virtual ~GFXDService_fetchActiveStatements_pargs() throw() {}

  const int32_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_fetchActiveStatements_result__isset {
  _GFXDService_fetchActiveStatements_result__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_fetchActiveStatements_result__isset;

class GFXDService_fetchActiveStatements_result {
 public:

  GFXDService_fetchActiveStatements_result() {
  }

  virtual ~GFXDService_fetchActiveStatements_result() throw() {}

  std::map<int32_t, std::string>  success;
  GFXDException error;

  _GFXDService_fetchActiveStatements_result__isset __isset;

  void __set_success(const std::map<int32_t, std::string> & val) {
    success = val;
  }

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_fetchActiveStatements_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_fetchActiveStatements_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_fetchActiveStatements_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_fetchActiveStatements_presult__isset {
  _GFXDService_fetchActiveStatements_presult__isset() : success(false), error(false) {}
  bool success;
  bool error;
} _GFXDService_fetchActiveStatements_presult__isset;

class GFXDService_fetchActiveStatements_presult {
 public:


  virtual ~GFXDService_fetchActiveStatements_presult() throw() {}

  std::map<int32_t, std::string> * success;
  GFXDException error;

  _GFXDService_fetchActiveStatements_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_cancelStatement_args__isset {
  _GFXDService_cancelStatement_args__isset() : stmtId(false), token(false) {}
  bool stmtId;
  bool token;
} _GFXDService_cancelStatement_args__isset;

class GFXDService_cancelStatement_args {
 public:

  GFXDService_cancelStatement_args() : stmtId(0), token() {
  }

  virtual ~GFXDService_cancelStatement_args() throw() {}

  int32_t stmtId;
  std::string token;

  _GFXDService_cancelStatement_args__isset __isset;

  void __set_stmtId(const int32_t val) {
    stmtId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_cancelStatement_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_cancelStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_cancelStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_cancelStatement_pargs {
 public:


  virtual ~GFXDService_cancelStatement_pargs() throw() {}

  const int32_t* stmtId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_cancelStatement_result__isset {
  _GFXDService_cancelStatement_result__isset() : error(false) {}
  bool error;
} _GFXDService_cancelStatement_result__isset;

class GFXDService_cancelStatement_result {
 public:

  GFXDService_cancelStatement_result() {
  }

  virtual ~GFXDService_cancelStatement_result() throw() {}

  GFXDException error;

  _GFXDService_cancelStatement_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_cancelStatement_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_cancelStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_cancelStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_cancelStatement_presult__isset {
  _GFXDService_cancelStatement_presult__isset() : error(false) {}
  bool error;
} _GFXDService_cancelStatement_presult__isset;

class GFXDService_cancelStatement_presult {
 public:


  virtual ~GFXDService_cancelStatement_presult() throw() {}

  GFXDException error;

  _GFXDService_cancelStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_closeResultSet_args__isset {
  _GFXDService_closeResultSet_args__isset() : cursorId(false), token(false) {}
  bool cursorId;
  bool token;
} _GFXDService_closeResultSet_args__isset;

class GFXDService_closeResultSet_args {
 public:

  GFXDService_closeResultSet_args() : cursorId(0), token() {
  }

  virtual ~GFXDService_closeResultSet_args() throw() {}

  int32_t cursorId;
  std::string token;

  _GFXDService_closeResultSet_args__isset __isset;

  void __set_cursorId(const int32_t val) {
    cursorId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_closeResultSet_args & rhs) const
  {
    if (!(cursorId == rhs.cursorId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_closeResultSet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_closeResultSet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_closeResultSet_pargs {
 public:


  virtual ~GFXDService_closeResultSet_pargs() throw() {}

  const int32_t* cursorId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_closeResultSet_result__isset {
  _GFXDService_closeResultSet_result__isset() : error(false) {}
  bool error;
} _GFXDService_closeResultSet_result__isset;

class GFXDService_closeResultSet_result {
 public:

  GFXDService_closeResultSet_result() {
  }

  virtual ~GFXDService_closeResultSet_result() throw() {}

  GFXDException error;

  _GFXDService_closeResultSet_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_closeResultSet_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_closeResultSet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_closeResultSet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_closeResultSet_presult__isset {
  _GFXDService_closeResultSet_presult__isset() : error(false) {}
  bool error;
} _GFXDService_closeResultSet_presult__isset;

class GFXDService_closeResultSet_presult {
 public:


  virtual ~GFXDService_closeResultSet_presult() throw() {}

  GFXDException error;

  _GFXDService_closeResultSet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_closeStatement_args__isset {
  _GFXDService_closeStatement_args__isset() : stmtId(false), token(false) {}
  bool stmtId;
  bool token;
} _GFXDService_closeStatement_args__isset;

class GFXDService_closeStatement_args {
 public:

  GFXDService_closeStatement_args() : stmtId(0), token() {
  }

  virtual ~GFXDService_closeStatement_args() throw() {}

  int32_t stmtId;
  std::string token;

  _GFXDService_closeStatement_args__isset __isset;

  void __set_stmtId(const int32_t val) {
    stmtId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_closeStatement_args & rhs) const
  {
    if (!(stmtId == rhs.stmtId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_closeStatement_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_closeStatement_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_closeStatement_pargs {
 public:


  virtual ~GFXDService_closeStatement_pargs() throw() {}

  const int32_t* stmtId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_closeStatement_result__isset {
  _GFXDService_closeStatement_result__isset() : error(false) {}
  bool error;
} _GFXDService_closeStatement_result__isset;

class GFXDService_closeStatement_result {
 public:

  GFXDService_closeStatement_result() {
  }

  virtual ~GFXDService_closeStatement_result() throw() {}

  GFXDException error;

  _GFXDService_closeStatement_result__isset __isset;

  void __set_error(const GFXDException& val) {
    error = val;
  }

  bool operator == (const GFXDService_closeStatement_result & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    return true;
  }
  bool operator != (const GFXDService_closeStatement_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_closeStatement_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_closeStatement_presult__isset {
  _GFXDService_closeStatement_presult__isset() : error(false) {}
  bool error;
} _GFXDService_closeStatement_presult__isset;

class GFXDService_closeStatement_presult {
 public:


  virtual ~GFXDService_closeStatement_presult() throw() {}

  GFXDException error;

  _GFXDService_closeStatement_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GFXDService_closeConnection_args__isset {
  _GFXDService_closeConnection_args__isset() : connId(false), token(false) {}
  bool connId;
  bool token;
} _GFXDService_closeConnection_args__isset;

class GFXDService_closeConnection_args {
 public:

  GFXDService_closeConnection_args() : connId(0), token() {
  }

  virtual ~GFXDService_closeConnection_args() throw() {}

  int32_t connId;
  std::string token;

  _GFXDService_closeConnection_args__isset __isset;

  void __set_connId(const int32_t val) {
    connId = val;
  }

  void __set_token(const std::string& val) {
    token = val;
  }

  bool operator == (const GFXDService_closeConnection_args & rhs) const
  {
    if (!(connId == rhs.connId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const GFXDService_closeConnection_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_closeConnection_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_closeConnection_pargs {
 public:


  virtual ~GFXDService_closeConnection_pargs() throw() {}

  const int32_t* connId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GFXDService_bulkClose_args__isset {
  _GFXDService_bulkClose_args__isset() : entities(false) {}
  bool entities;
} _GFXDService_bulkClose_args__isset;

class GFXDService_bulkClose_args {
 public:

  GFXDService_bulkClose_args() {
  }

  virtual ~GFXDService_bulkClose_args() throw() {}

  std::vector<EntityId>  entities;

  _GFXDService_bulkClose_args__isset __isset;

  void __set_entities(const std::vector<EntityId> & val) {
    entities = val;
  }

  bool operator == (const GFXDService_bulkClose_args & rhs) const
  {
    if (!(entities == rhs.entities))
      return false;
    return true;
  }
  bool operator != (const GFXDService_bulkClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDService_bulkClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GFXDService_bulkClose_pargs {
 public:


  virtual ~GFXDService_bulkClose_pargs() throw() {}

  const std::vector<EntityId> * entities;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class GFXDServiceClient : virtual public GFXDServiceIf {
 public:
  GFXDServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GFXDServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getPreferredServer(HostAddress& _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void send_getPreferredServer(const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void recv_getPreferredServer(HostAddress& _return);
  void getAllServersWithPreferredServer(std::vector<HostAddress> & _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void send_getAllServersWithPreferredServer(const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers);
  void recv_getAllServersWithPreferredServer(std::vector<HostAddress> & _return);
  void openConnection(ConnectionProperties& _return, const OpenConnectionArgs& arguments);
  void send_openConnection(const OpenConnectionArgs& arguments);
  void recv_openConnection(ConnectionProperties& _return);
  void execute(StatementResult& _return, const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void send_execute(const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void recv_execute(StatementResult& _return);
  void executeUpdate(UpdateResult& _return, const int32_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token);
  void send_executeUpdate(const int32_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token);
  void recv_executeUpdate(UpdateResult& _return);
  void executeQuery(RowSet& _return, const int32_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token);
  void send_executeQuery(const int32_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token);
  void recv_executeQuery(RowSet& _return);
  void prepareStatement(PrepareResult& _return, const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void send_prepareStatement(const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void recv_prepareStatement(PrepareResult& _return);
  void executePrepared(StatementResult& _return, const int32_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const std::string& token);
  void send_executePrepared(const int32_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const std::string& token);
  void recv_executePrepared(StatementResult& _return);
  void executePreparedUpdate(UpdateResult& _return, const int32_t stmtId, const Row& params, const std::string& token);
  void send_executePreparedUpdate(const int32_t stmtId, const Row& params, const std::string& token);
  void recv_executePreparedUpdate(UpdateResult& _return);
  void executePreparedQuery(RowSet& _return, const int32_t stmtId, const Row& params, const std::string& token);
  void send_executePreparedQuery(const int32_t stmtId, const Row& params, const std::string& token);
  void recv_executePreparedQuery(RowSet& _return);
  void executePreparedBatch(UpdateResult& _return, const int32_t stmtId, const std::vector<Row> & paramsBatch, const std::string& token);
  void send_executePreparedBatch(const int32_t stmtId, const std::vector<Row> & paramsBatch, const std::string& token);
  void recv_executePreparedBatch(UpdateResult& _return);
  void prepareAndExecute(StatementResult& _return, const int32_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void send_prepareAndExecute(const int32_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token);
  void recv_prepareAndExecute(StatementResult& _return);
  void beginTransaction(const int32_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_beginTransaction(const int32_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void recv_beginTransaction();
  void setTransactionAttributes(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_setTransactionAttributes(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void recv_setTransactionAttributes();
  void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return, const int32_t connId, const std::string& token);
  void send_getTransactionAttributes(const int32_t connId, const std::string& token);
  void recv_getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return);
  void commitTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_commitTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void recv_commitTransaction();
  void rollbackTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_rollbackTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void recv_rollbackTransaction();
  bool prepareCommitTransaction(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  void send_prepareCommitTransaction(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token);
  bool recv_prepareCommitTransaction();
  void getNextResultSet(RowSet& _return, const int32_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token);
  void send_getNextResultSet(const int32_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token);
  void recv_getNextResultSet(RowSet& _return);
  void getBlobChunk(BlobChunk& _return, const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void send_getBlobChunk(const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void recv_getBlobChunk(BlobChunk& _return);
  void getClobChunk(ClobChunk& _return, const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void send_getClobChunk(const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token);
  void recv_getClobChunk(ClobChunk& _return);
  int32_t sendBlobChunk(const BlobChunk& chunk, const int32_t connId, const std::string& token);
  void send_sendBlobChunk(const BlobChunk& chunk, const int32_t connId, const std::string& token);
  int32_t recv_sendBlobChunk();
  int32_t sendClobChunk(const ClobChunk& chunk, const int32_t connId, const std::string& token);
  void send_sendClobChunk(const ClobChunk& chunk, const int32_t connId, const std::string& token);
  int32_t recv_sendClobChunk();
  void freeLob(const int32_t connId, const int32_t lobId, const std::string& token);
  void send_freeLob(const int32_t connId, const int32_t lobId, const std::string& token);
  void recv_freeLob();
  void scrollCursor(RowSet& _return, const int32_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token);
  void send_scrollCursor(const int32_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token);
  void recv_scrollCursor(RowSet& _return);
  void executeCursorUpdate(const int32_t cursorId, const std::vector<int8_t> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token);
  void send_executeCursorUpdate(const int32_t cursorId, const std::vector<int8_t> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token);
  void recv_executeCursorUpdate();
  void getServiceMetaData(ServiceMetaData& _return, const int32_t connId, const std::string& token);
  void send_getServiceMetaData(const int32_t connId, const std::string& token);
  void recv_getServiceMetaData(ServiceMetaData& _return);
  void getSchemaMetaData(RowSet& _return, const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs);
  void send_getSchemaMetaData(const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs);
  void recv_getSchemaMetaData(RowSet& _return);
  void getIndexInfo(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate);
  void send_getIndexInfo(const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate);
  void recv_getIndexInfo(RowSet& _return);
  void getUDTs(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const std::vector<GFXDType::type> & types);
  void send_getUDTs(const ServiceMetaDataArgs& metadataArgs, const std::vector<GFXDType::type> & types);
  void recv_getUDTs(RowSet& _return);
  void getBestRowIdentifier(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable);
  void send_getBestRowIdentifier(const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable);
  void recv_getBestRowIdentifier(RowSet& _return);
  void fetchActiveConnections(std::vector<ConnectionProperties> & _return, const int32_t connId, const std::string& token);
  void send_fetchActiveConnections(const int32_t connId, const std::string& token);
  void recv_fetchActiveConnections(std::vector<ConnectionProperties> & _return);
  void fetchActiveStatements(std::map<int32_t, std::string> & _return, const int32_t connId, const std::string& token);
  void send_fetchActiveStatements(const int32_t connId, const std::string& token);
  void recv_fetchActiveStatements(std::map<int32_t, std::string> & _return);
  void cancelStatement(const int32_t stmtId, const std::string& token);
  void send_cancelStatement(const int32_t stmtId, const std::string& token);
  void recv_cancelStatement();
  void closeResultSet(const int32_t cursorId, const std::string& token);
  void send_closeResultSet(const int32_t cursorId, const std::string& token);
  void recv_closeResultSet();
  void closeStatement(const int32_t stmtId, const std::string& token);
  void send_closeStatement(const int32_t stmtId, const std::string& token);
  void recv_closeStatement();
  void closeConnection(const int32_t connId, const std::string& token);
  void send_closeConnection(const int32_t connId, const std::string& token);
  void bulkClose(const std::vector<EntityId> & entities);
  void send_bulkClose(const std::vector<EntityId> & entities);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GFXDServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GFXDServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GFXDServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getPreferredServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllServersWithPreferredServer(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_openConnection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePrepared(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePreparedUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePreparedQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executePreparedBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareAndExecute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_beginTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTransactionAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTransactionAttributes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commitTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rollbackTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_prepareCommitTransaction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNextResultSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBlobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendBlobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendClobChunk(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_freeLob(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scrollCursor(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeCursorUpdate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSchemaMetaData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIndexInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUDTs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBestRowIdentifier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchActiveConnections(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchActiveStatements(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancelStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeResultSet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeStatement(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closeConnection(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bulkClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GFXDServiceProcessor(boost::shared_ptr<GFXDServiceIf> iface) :
    iface_(iface) {
    processMap_["getPreferredServer"] = &GFXDServiceProcessor::process_getPreferredServer;
    processMap_["getAllServersWithPreferredServer"] = &GFXDServiceProcessor::process_getAllServersWithPreferredServer;
    processMap_["openConnection"] = &GFXDServiceProcessor::process_openConnection;
    processMap_["execute"] = &GFXDServiceProcessor::process_execute;
    processMap_["executeUpdate"] = &GFXDServiceProcessor::process_executeUpdate;
    processMap_["executeQuery"] = &GFXDServiceProcessor::process_executeQuery;
    processMap_["prepareStatement"] = &GFXDServiceProcessor::process_prepareStatement;
    processMap_["executePrepared"] = &GFXDServiceProcessor::process_executePrepared;
    processMap_["executePreparedUpdate"] = &GFXDServiceProcessor::process_executePreparedUpdate;
    processMap_["executePreparedQuery"] = &GFXDServiceProcessor::process_executePreparedQuery;
    processMap_["executePreparedBatch"] = &GFXDServiceProcessor::process_executePreparedBatch;
    processMap_["prepareAndExecute"] = &GFXDServiceProcessor::process_prepareAndExecute;
    processMap_["beginTransaction"] = &GFXDServiceProcessor::process_beginTransaction;
    processMap_["setTransactionAttributes"] = &GFXDServiceProcessor::process_setTransactionAttributes;
    processMap_["getTransactionAttributes"] = &GFXDServiceProcessor::process_getTransactionAttributes;
    processMap_["commitTransaction"] = &GFXDServiceProcessor::process_commitTransaction;
    processMap_["rollbackTransaction"] = &GFXDServiceProcessor::process_rollbackTransaction;
    processMap_["prepareCommitTransaction"] = &GFXDServiceProcessor::process_prepareCommitTransaction;
    processMap_["getNextResultSet"] = &GFXDServiceProcessor::process_getNextResultSet;
    processMap_["getBlobChunk"] = &GFXDServiceProcessor::process_getBlobChunk;
    processMap_["getClobChunk"] = &GFXDServiceProcessor::process_getClobChunk;
    processMap_["sendBlobChunk"] = &GFXDServiceProcessor::process_sendBlobChunk;
    processMap_["sendClobChunk"] = &GFXDServiceProcessor::process_sendClobChunk;
    processMap_["freeLob"] = &GFXDServiceProcessor::process_freeLob;
    processMap_["scrollCursor"] = &GFXDServiceProcessor::process_scrollCursor;
    processMap_["executeCursorUpdate"] = &GFXDServiceProcessor::process_executeCursorUpdate;
    processMap_["getServiceMetaData"] = &GFXDServiceProcessor::process_getServiceMetaData;
    processMap_["getSchemaMetaData"] = &GFXDServiceProcessor::process_getSchemaMetaData;
    processMap_["getIndexInfo"] = &GFXDServiceProcessor::process_getIndexInfo;
    processMap_["getUDTs"] = &GFXDServiceProcessor::process_getUDTs;
    processMap_["getBestRowIdentifier"] = &GFXDServiceProcessor::process_getBestRowIdentifier;
    processMap_["fetchActiveConnections"] = &GFXDServiceProcessor::process_fetchActiveConnections;
    processMap_["fetchActiveStatements"] = &GFXDServiceProcessor::process_fetchActiveStatements;
    processMap_["cancelStatement"] = &GFXDServiceProcessor::process_cancelStatement;
    processMap_["closeResultSet"] = &GFXDServiceProcessor::process_closeResultSet;
    processMap_["closeStatement"] = &GFXDServiceProcessor::process_closeStatement;
    processMap_["closeConnection"] = &GFXDServiceProcessor::process_closeConnection;
    processMap_["bulkClose"] = &GFXDServiceProcessor::process_bulkClose;
  }

  virtual ~GFXDServiceProcessor() {}
};

class GFXDServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GFXDServiceProcessorFactory(const ::boost::shared_ptr< GFXDServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GFXDServiceIfFactory > handlerFactory_;
};

class GFXDServiceMultiface : virtual public GFXDServiceIf {
 public:
  GFXDServiceMultiface(std::vector<boost::shared_ptr<GFXDServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GFXDServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GFXDServiceIf> > ifaces_;
  GFXDServiceMultiface() {}
  void add(boost::shared_ptr<GFXDServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getPreferredServer(HostAddress& _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPreferredServer(_return, serverTypes, serverGroups, failedServers);
    }
    ifaces_[i]->getPreferredServer(_return, serverTypes, serverGroups, failedServers);
    return;
  }

  void getAllServersWithPreferredServer(std::vector<HostAddress> & _return, const std::set<ServerType::type> & serverTypes, const std::set<std::string> & serverGroups, const std::set<HostAddress> & failedServers) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllServersWithPreferredServer(_return, serverTypes, serverGroups, failedServers);
    }
    ifaces_[i]->getAllServersWithPreferredServer(_return, serverTypes, serverGroups, failedServers);
    return;
  }

  void openConnection(ConnectionProperties& _return, const OpenConnectionArgs& arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->openConnection(_return, arguments);
    }
    ifaces_[i]->openConnection(_return, arguments);
    return;
  }

  void execute(StatementResult& _return, const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute(_return, connId, sql, outputParams, attrs, token);
    }
    ifaces_[i]->execute(_return, connId, sql, outputParams, attrs, token);
    return;
  }

  void executeUpdate(UpdateResult& _return, const int32_t connId, const std::vector<std::string> & sqls, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeUpdate(_return, connId, sqls, attrs, token);
    }
    ifaces_[i]->executeUpdate(_return, connId, sqls, attrs, token);
    return;
  }

  void executeQuery(RowSet& _return, const int32_t connId, const std::string& sql, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeQuery(_return, connId, sql, attrs, token);
    }
    ifaces_[i]->executeQuery(_return, connId, sql, attrs, token);
    return;
  }

  void prepareStatement(PrepareResult& _return, const int32_t connId, const std::string& sql, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareStatement(_return, connId, sql, outputParams, attrs, token);
    }
    ifaces_[i]->prepareStatement(_return, connId, sql, outputParams, attrs, token);
    return;
  }

  void executePrepared(StatementResult& _return, const int32_t stmtId, const Row& params, const std::map<int32_t, OutputParameter> & outputParams, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePrepared(_return, stmtId, params, outputParams, token);
    }
    ifaces_[i]->executePrepared(_return, stmtId, params, outputParams, token);
    return;
  }

  void executePreparedUpdate(UpdateResult& _return, const int32_t stmtId, const Row& params, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePreparedUpdate(_return, stmtId, params, token);
    }
    ifaces_[i]->executePreparedUpdate(_return, stmtId, params, token);
    return;
  }

  void executePreparedQuery(RowSet& _return, const int32_t stmtId, const Row& params, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePreparedQuery(_return, stmtId, params, token);
    }
    ifaces_[i]->executePreparedQuery(_return, stmtId, params, token);
    return;
  }

  void executePreparedBatch(UpdateResult& _return, const int32_t stmtId, const std::vector<Row> & paramsBatch, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executePreparedBatch(_return, stmtId, paramsBatch, token);
    }
    ifaces_[i]->executePreparedBatch(_return, stmtId, paramsBatch, token);
    return;
  }

  void prepareAndExecute(StatementResult& _return, const int32_t connId, const std::string& sql, const std::vector<Row> & paramsBatch, const std::map<int32_t, OutputParameter> & outputParams, const StatementAttrs& attrs, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareAndExecute(_return, connId, sql, paramsBatch, outputParams, attrs, token);
    }
    ifaces_[i]->prepareAndExecute(_return, connId, sql, paramsBatch, outputParams, attrs, token);
    return;
  }

  void beginTransaction(const int32_t connId, const int8_t isolationLevel, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->beginTransaction(connId, isolationLevel, flags, token);
    }
    ifaces_[i]->beginTransaction(connId, isolationLevel, flags, token);
  }

  void setTransactionAttributes(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTransactionAttributes(connId, flags, token);
    }
    ifaces_[i]->setTransactionAttributes(connId, flags, token);
  }

  void getTransactionAttributes(std::map<TransactionAttribute::type, bool> & _return, const int32_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTransactionAttributes(_return, connId, token);
    }
    ifaces_[i]->getTransactionAttributes(_return, connId, token);
    return;
  }

  void commitTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commitTransaction(connId, startNewTransaction, flags, token);
    }
    ifaces_[i]->commitTransaction(connId, startNewTransaction, flags, token);
  }

  void rollbackTransaction(const int32_t connId, const bool startNewTransaction, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rollbackTransaction(connId, startNewTransaction, flags, token);
    }
    ifaces_[i]->rollbackTransaction(connId, startNewTransaction, flags, token);
  }

  bool prepareCommitTransaction(const int32_t connId, const std::map<TransactionAttribute::type, bool> & flags, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->prepareCommitTransaction(connId, flags, token);
    }
    return ifaces_[i]->prepareCommitTransaction(connId, flags, token);
  }

  void getNextResultSet(RowSet& _return, const int32_t cursorId, const int8_t otherResultSetBehaviour, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNextResultSet(_return, cursorId, otherResultSetBehaviour, token);
    }
    ifaces_[i]->getNextResultSet(_return, cursorId, otherResultSetBehaviour, token);
    return;
  }

  void getBlobChunk(BlobChunk& _return, const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBlobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    }
    ifaces_[i]->getBlobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    return;
  }

  void getClobChunk(ClobChunk& _return, const int32_t connId, const int32_t lobId, const int64_t offset, const int32_t size, const bool freeLobAtEnd, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getClobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    }
    ifaces_[i]->getClobChunk(_return, connId, lobId, offset, size, freeLobAtEnd, token);
    return;
  }

  int32_t sendBlobChunk(const BlobChunk& chunk, const int32_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendBlobChunk(chunk, connId, token);
    }
    return ifaces_[i]->sendBlobChunk(chunk, connId, token);
  }

  int32_t sendClobChunk(const ClobChunk& chunk, const int32_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendClobChunk(chunk, connId, token);
    }
    return ifaces_[i]->sendClobChunk(chunk, connId, token);
  }

  void freeLob(const int32_t connId, const int32_t lobId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->freeLob(connId, lobId, token);
    }
    ifaces_[i]->freeLob(connId, lobId, token);
  }

  void scrollCursor(RowSet& _return, const int32_t cursorId, const int32_t offset, const bool offsetIsAbsolute, const bool fetchReverse, const int32_t fetchSize, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scrollCursor(_return, cursorId, offset, offsetIsAbsolute, fetchReverse, fetchSize, token);
    }
    ifaces_[i]->scrollCursor(_return, cursorId, offset, offsetIsAbsolute, fetchReverse, fetchSize, token);
    return;
  }

  void executeCursorUpdate(const int32_t cursorId, const std::vector<int8_t> & operations, const std::vector<Row> & changedRows, const std::vector<std::vector<int32_t> > & changedColumnsList, const std::vector<int32_t> & changedRowIndexes, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeCursorUpdate(cursorId, operations, changedRows, changedColumnsList, changedRowIndexes, token);
    }
    ifaces_[i]->executeCursorUpdate(cursorId, operations, changedRows, changedColumnsList, changedRowIndexes, token);
  }

  void getServiceMetaData(ServiceMetaData& _return, const int32_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceMetaData(_return, connId, token);
    }
    ifaces_[i]->getServiceMetaData(_return, connId, token);
    return;
  }

  void getSchemaMetaData(RowSet& _return, const ServiceMetaDataCall::type schemaCall, const ServiceMetaDataArgs& metadataArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSchemaMetaData(_return, schemaCall, metadataArgs);
    }
    ifaces_[i]->getSchemaMetaData(_return, schemaCall, metadataArgs);
    return;
  }

  void getIndexInfo(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const bool unique, const bool approximate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIndexInfo(_return, metadataArgs, unique, approximate);
    }
    ifaces_[i]->getIndexInfo(_return, metadataArgs, unique, approximate);
    return;
  }

  void getUDTs(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const std::vector<GFXDType::type> & types) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUDTs(_return, metadataArgs, types);
    }
    ifaces_[i]->getUDTs(_return, metadataArgs, types);
    return;
  }

  void getBestRowIdentifier(RowSet& _return, const ServiceMetaDataArgs& metadataArgs, const int32_t scope, const bool nullable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBestRowIdentifier(_return, metadataArgs, scope, nullable);
    }
    ifaces_[i]->getBestRowIdentifier(_return, metadataArgs, scope, nullable);
    return;
  }

  void fetchActiveConnections(std::vector<ConnectionProperties> & _return, const int32_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchActiveConnections(_return, connId, token);
    }
    ifaces_[i]->fetchActiveConnections(_return, connId, token);
    return;
  }

  void fetchActiveStatements(std::map<int32_t, std::string> & _return, const int32_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchActiveStatements(_return, connId, token);
    }
    ifaces_[i]->fetchActiveStatements(_return, connId, token);
    return;
  }

  void cancelStatement(const int32_t stmtId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancelStatement(stmtId, token);
    }
    ifaces_[i]->cancelStatement(stmtId, token);
  }

  void closeResultSet(const int32_t cursorId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeResultSet(cursorId, token);
    }
    ifaces_[i]->closeResultSet(cursorId, token);
  }

  void closeStatement(const int32_t stmtId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeStatement(stmtId, token);
    }
    ifaces_[i]->closeStatement(stmtId, token);
  }

  void closeConnection(const int32_t connId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->closeConnection(connId, token);
    }
    ifaces_[i]->closeConnection(connId, token);
  }

  void bulkClose(const std::vector<EntityId> & entities) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bulkClose(entities);
    }
    ifaces_[i]->bulkClose(entities);
  }

};

}}}} // namespace

#endif
