/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

#include "gfxd_struct_GFXDException.h"

#include <algorithm>

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

const char* GFXDException::ascii_fingerprint = "01787156797F3D76B26D05AA73FA0116";
const uint8_t GFXDException::binary_fingerprint[16] = {0x01,0x78,0x71,0x56,0x79,0x7F,0x3D,0x76,0xB2,0x6D,0x05,0xAA,0x73,0xFA,0x01,0x16};

uint32_t GFXDException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_exceptionData = false;
  bool isset_serverInfo = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exceptionData.read(iprot);
          isset_exceptionData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverInfo);
          isset_serverInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nextExceptions.clear();
            uint32_t _size202;
            ::apache::thrift::protocol::TType _etype205;
            xfer += iprot->readListBegin(_etype205, _size202);
            this->nextExceptions.resize(_size202);
            uint32_t _i206;
            for (_i206 = 0; _i206 < _size202; ++_i206)
            {
              xfer += this->nextExceptions[_i206].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.nextExceptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_exceptionData)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_serverInfo)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t GFXDException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("GFXDException");

  xfer += oprot->writeFieldBegin("exceptionData", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->exceptionData.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("serverInfo", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->serverInfo);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.nextExceptions) {
    xfer += oprot->writeFieldBegin("nextExceptions", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->nextExceptions.size()));
      std::vector<GFXDExceptionData> ::const_iterator _iter207;
      for (_iter207 = this->nextExceptions.begin(); _iter207 != this->nextExceptions.end(); ++_iter207)
      {
        xfer += (*_iter207).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GFXDException &a, GFXDException &b) {
  using ::std::swap;
  swap(a.exceptionData, b.exceptionData);
  swap(a.serverInfo, b.serverInfo);
  swap(a.nextExceptions, b.nextExceptions);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
