/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*
 * Changes for GemFireXD distributed data platform.
 *
 * Portions Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

#include "gfxd_struct_Row.h"

#include <boost/dynamic_bitset.hpp>

#include <algorithm>

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

const char* Row::ascii_fingerprint = "5F2610F48CD6B8460ABF15799C138485";
const uint8_t Row::binary_fingerprint[16] = {0x5F,0x26,0x10,0xF4,0x8C,0xD6,0xB8,0x46,0x0A,0xBF,0x15,0x79,0x9C,0x13,0x84,0x85};

uint32_t Row::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_values = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->m_values.clear();
            uint32_t _size230;
            ::apache::thrift::protocol::TType _etype233;
            xfer += iprot->readListBegin(_etype233, _size230);
            this->m_values.resize(_size230);
            uint32_t _i234;
            for (_i234 = 0; _i234 < _size230; ++_i234)
            {
              xfer += this->m_values[_i234].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_values)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Row::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Row");

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->m_values.size()));
    com::pivotal::gemfirexd::ArrayList<ColumnValue> ::const_iterator _iter235 = m_values.begin();
    com::pivotal::gemfirexd::ArrayList<ColumnValue> ::const_iterator _iter235end = m_values.cend();
    while (_iter235 != _iter235end) {
      xfer += (*_iter235).write(oprot);
      ++_iter235;
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

Row::Row(const Row& other) :
    m_values(other.m_values), m_updatable(other.m_updatable) {
  if (m_changedColumns != NULL) {
    delete m_changedColumns;
  }
  if (other.m_changedColumns != NULL) {
    m_changedColumns = new DynamicBitSet(*other.m_changedColumns);
  }
}

Row& Row::operator=(const Row& other) {
  m_values = other.m_values;
  m_updatable = other.m_updatable;
  if (m_changedColumns != NULL) {
    delete m_changedColumns;
  }
  if (other.m_changedColumns != NULL) {
    m_changedColumns = new DynamicBitSet(*other.m_changedColumns);
  }
  return *this;
}

Row::~Row() throw() {
  if (m_changedColumns != NULL) {
    delete m_changedColumns;
    m_changedColumns = NULL;
  }
}

void Row::clearChangedColumns() {
  if (m_changedColumns != NULL) {
    delete m_changedColumns;
    m_changedColumns = NULL;
  }
}

void Row::clear() {
  size_t size = m_values.size();
  while (--size >= 0) {
    m_values[size].clearValue();
  }
  if (m_changedColumns != NULL) {
    m_changedColumns->clear();
  }
}

void Row::swap(Row& other) {
  using ::std::swap;
  swap(m_values, other.m_values);
  swap(m_updatable, other.m_updatable);
  swap(m_changedColumns, other.m_changedColumns);
}

void swap(Row &a, Row &b) {
  a.swap(b);
}

}}}} // namespace
