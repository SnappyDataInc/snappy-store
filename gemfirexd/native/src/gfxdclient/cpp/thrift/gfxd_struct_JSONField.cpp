/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

#include "gfxd_struct_JSONField.h"

#include <algorithm>

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

const char* JSONField::ascii_fingerprint = "A3A9D7B3D44D8BE8B4072FCBE7D02982";
const uint8_t JSONField::binary_fingerprint[16] = {0xA3,0xA9,0xD7,0xB3,0xD4,0x4D,0x8B,0xE8,0xB4,0x07,0x2F,0xCB,0xE7,0xD0,0x29,0x82};

uint32_t JSONField::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->string_val);
          this->__isset.string_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bool_val);
          this->__isset.bool_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i32_val);
          this->__isset.i32_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->i64_val);
          this->__isset.i64_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->double_val);
          this->__isset.double_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->null_val);
          this->__isset.null_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ref_val);
          this->__isset.ref_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->array_val.clear();
            uint32_t _size85;
            ::apache::thrift::protocol::TType _etype88;
            xfer += iprot->readListBegin(_etype88, _size85);
            this->array_val.resize(_size85);
            uint32_t _i89;
            for (_i89 = 0; _i89 < _size85; ++_i89)
            {
              xfer += iprot->readI32(this->array_val[_i89]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.array_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t JSONField::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JSONField");

  if (this->__isset.string_val) {
    xfer += oprot->writeFieldBegin("string_val", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->string_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bool_val) {
    xfer += oprot->writeFieldBegin("bool_val", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->bool_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i32_val) {
    xfer += oprot->writeFieldBegin("i32_val", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->i32_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.i64_val) {
    xfer += oprot->writeFieldBegin("i64_val", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->i64_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.double_val) {
    xfer += oprot->writeFieldBegin("double_val", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->double_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.null_val) {
    xfer += oprot->writeFieldBegin("null_val", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->null_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ref_val) {
    xfer += oprot->writeFieldBegin("ref_val", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->ref_val);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.array_val) {
    xfer += oprot->writeFieldBegin("array_val", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->array_val.size()));
      std::vector<int32_t> ::const_iterator _iter90;
      for (_iter90 = this->array_val.begin(); _iter90 != this->array_val.end(); ++_iter90)
      {
        xfer += oprot->writeI32((*_iter90));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JSONField &a, JSONField &b) {
  using ::std::swap;
  swap(a.string_val, b.string_val);
  swap(a.bool_val, b.bool_val);
  swap(a.i32_val, b.i32_val);
  swap(a.i64_val, b.i64_val);
  swap(a.double_val, b.double_val);
  swap(a.null_val, b.null_val);
  swap(a.ref_val, b.ref_val);
  swap(a.array_val, b.array_val);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
