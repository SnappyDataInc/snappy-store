/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#ifndef GFXD_STRUCT_GFXDEXCEPTION_H
#define GFXD_STRUCT_GFXDEXCEPTION_H

#include <thrift/TApplicationException.h>

#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"
#include "gfxd_struct_BlobChunk.h"
#include "gfxd_struct_ClobChunk.h"
#include "gfxd_struct_ServiceMetaData.h"
#include "gfxd_struct_ServiceMetaDataArgs.h"
#include "gfxd_struct_OpenConnectionArgs.h"
#include "gfxd_struct_ConnectionProperties.h"
#include "gfxd_struct_HostAddress.h"
#include "gfxd_struct_GFXDExceptionData.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _GFXDException__isset {
  _GFXDException__isset() : nextExceptions(false) {}
  bool nextExceptions;
} _GFXDException__isset;

class GFXDException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "01787156797F3D76B26D05AA73FA0116";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x78,0x71,0x56,0x79,0x7F,0x3D,0x76,0xB2,0x6D,0x05,0xAA,0x73,0xFA,0x01,0x16};

  GFXDException() : serverInfo() {
  }

  virtual ~GFXDException() throw() {}

  GFXDExceptionData exceptionData;
  std::string serverInfo;
  std::vector<GFXDExceptionData>  nextExceptions;

  _GFXDException__isset __isset;

  void __set_exceptionData(const GFXDExceptionData& val) {
    exceptionData = val;
  }

  void __set_serverInfo(const std::string& val) {
    serverInfo = val;
  }

  void __set_nextExceptions(const std::vector<GFXDExceptionData> & val) {
    nextExceptions = val;
    __isset.nextExceptions = true;
  }

  bool operator == (const GFXDException & rhs) const
  {
    if (!(exceptionData == rhs.exceptionData))
      return false;
    if (!(serverInfo == rhs.serverInfo))
      return false;
    if (__isset.nextExceptions != rhs.__isset.nextExceptions)
      return false;
    else if (__isset.nextExceptions && !(nextExceptions == rhs.nextExceptions))
      return false;
    return true;
  }
  bool operator != (const GFXDException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GFXDException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(GFXDException &a, GFXDException &b);

}}}} // namespace

#endif
