/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

#include "gfxd_struct_JSONNode.h"

#include <algorithm>

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

const char* JSONNode::ascii_fingerprint = "5A95EABAC69D86B566979162EB10A2FE";
const uint8_t JSONNode::binary_fingerprint[16] = {0x5A,0x95,0xEA,0xBA,0xC6,0x9D,0x86,0xB5,0x66,0x97,0x91,0x62,0xEB,0x10,0xA2,0xFE};

uint32_t JSONNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_refId = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->pairs.clear();
            uint32_t _size91;
            ::apache::thrift::protocol::TType _ktype92;
            ::apache::thrift::protocol::TType _vtype93;
            xfer += iprot->readMapBegin(_ktype92, _vtype93, _size91);
            uint32_t _i95;
            for (_i95 = 0; _i95 < _size91; ++_i95)
            {
              std::string _key96;
              xfer += iprot->readString(_key96);
              JSONField& _val97 = this->pairs[_key96];
              xfer += _val97.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.pairs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->singleField.read(iprot);
          this->__isset.singleField = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->refId);
          isset_refId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_refId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t JSONNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("JSONNode");

  if (this->__isset.pairs) {
    xfer += oprot->writeFieldBegin("pairs", ::apache::thrift::protocol::T_MAP, 1);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->pairs.size()));
      std::map<std::string, JSONField> ::const_iterator _iter98;
      for (_iter98 = this->pairs.begin(); _iter98 != this->pairs.end(); ++_iter98)
      {
        xfer += oprot->writeString(_iter98->first);
        xfer += _iter98->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.singleField) {
    xfer += oprot->writeFieldBegin("singleField", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->singleField.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("refId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->refId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(JSONNode &a, JSONNode &b) {
  using ::std::swap;
  swap(a.pairs, b.pairs);
  swap(a.singleField, b.singleField);
  swap(a.refId, b.refId);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
