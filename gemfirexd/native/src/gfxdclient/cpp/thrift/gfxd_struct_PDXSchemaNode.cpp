/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>

#include "gfxd_struct_PDXSchemaNode.h"

#include <algorithm>

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

const char* PDXSchemaNode::ascii_fingerprint = "2DB4C61C4D457FACE77B8CBF274ED9FC";
const uint8_t PDXSchemaNode::binary_fingerprint[16] = {0x2D,0xB4,0xC6,0x1C,0x4D,0x45,0x7F,0xAC,0xE7,0x7B,0x8C,0xBF,0x27,0x4E,0xD9,0xFC};

uint32_t PDXSchemaNode::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->singleFieldDesc.read(iprot);
          this->__isset.singleFieldDesc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->fieldDescs.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->fieldDescs.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += this->fieldDescs[_i77].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.fieldDescs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->refId);
          this->__isset.refId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PDXSchemaNode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PDXSchemaNode");

  if (this->__isset.singleFieldDesc) {
    xfer += oprot->writeFieldBegin("singleFieldDesc", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->singleFieldDesc.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fieldDescs) {
    xfer += oprot->writeFieldBegin("fieldDescs", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fieldDescs.size()));
      std::vector<FieldDescriptor> ::const_iterator _iter78;
      for (_iter78 = this->fieldDescs.begin(); _iter78 != this->fieldDescs.end(); ++_iter78)
      {
        xfer += (*_iter78).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.refId) {
    xfer += oprot->writeFieldBegin("refId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->refId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PDXSchemaNode &a, PDXSchemaNode &b) {
  using ::std::swap;
  swap(a.singleFieldDesc, b.singleFieldDesc);
  swap(a.fieldDescs, b.fieldDescs);
  swap(a.refId, b.refId);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
