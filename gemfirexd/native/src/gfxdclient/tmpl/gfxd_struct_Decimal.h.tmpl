/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*
 * Changes for GemFireXD distributed data platform.
 *
 * Portions Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

#ifndef GFXD_STRUCT_DECIMAL_H
#define GFXD_STRUCT_DECIMAL_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {


class Decimal {
 public:

  static const char* ascii_fingerprint; // = "2A464DC1E13C65920AE5EF91F6A79342";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x46,0x4D,0xC1,0xE1,0x3C,0x65,0x92,0x0A,0xE5,0xEF,0x91,0xF6,0xA7,0x93,0x42};

  Decimal() : signum(0), scale(0), magnitude() {
  }

#if __cplusplus >= 201103L
  Decimal(const Decimal& other) = default;
  Decimal& operator=(const Decimal& other) = default;

  Decimal(Decimal&& other) :
      signum(other.signum), scale(other.scale), magnitude(
          std::move(other.magnitude)) {
  }

  void assign(Decimal&& other) {
    signum = other.signum;
    scale = other.scale;
    magnitude.assign(std::move(other.magnitude));
  }

  Decimal& operator=(Decimal&& other) {
    assign(std::move(other));
    return *this;
  }
#endif

  virtual ~Decimal() throw() {}

  int8_t signum;
  int32_t scale;
  std::string magnitude;

  void __set_signum(const int8_t val) {
    signum = val;
  }

  void __set_scale(const int32_t val) {
    scale = val;
  }

  void __set_magnitude(const std::string& val) {
    magnitude = val;
  }

  bool operator == (const Decimal & rhs) const
  {
    if (!(signum == rhs.signum))
      return false;
    if (!(scale == rhs.scale))
      return false;
    if (!(magnitude == rhs.magnitude))
      return false;
    return true;
  }
  bool operator != (const Decimal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Decimal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Decimal &a, Decimal &b);

}}}} // namespace

#endif
