/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*
 * Changes for GemFireXD distributed data platform.
 *
 * Portions Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

#ifndef GFXD_STRUCT_PDXOBJECT_H
#define GFXD_STRUCT_PDXOBJECT_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _PDXObject__isset {
  _PDXObject__isset() : fields(false), nodes(false) {}
  bool fields;
  bool nodes;
} _PDXObject__isset;

class PDXObject {
 public:

  static const char* ascii_fingerprint; // = "F75ACE223AA50F825551005491EE0D5D";
  static const uint8_t binary_fingerprint[16]; // = {0xF7,0x5A,0xCE,0x22,0x3A,0xA5,0x0F,0x82,0x55,0x51,0x00,0x54,0x91,0xEE,0x0D,0x5D};

  PDXObject() {
  }

#if __cplusplus >= 201103L
  PDXObject(const PDXObject& other) = default;
  PDXObject& operator=(const PDXObject& other) = default;

  PDXObject(PDXObject&& other) :
      fields(std::move(other.fields)), nodes(std::move(other.nodes)),
      __isset(other.__isset) {
  }

  void assign(PDXObject&& other) {
    fields.operator =(std::move(other.fields));
    nodes.operator =(std::move(other.nodes));
    __isset = other.__isset;
  }

  PDXObject& operator=(PDXObject&& other) {
    assign(std::move(other));
    return *this;
  }
#endif

  virtual ~PDXObject() throw() {}

  std::vector<FieldValue>  fields;
  std::vector<PDXNode>  nodes;

  _PDXObject__isset __isset;

  void __set_fields(const std::vector<FieldValue> & val) {
    fields = val;
    __isset.fields = true;
  }

  void __set_nodes(const std::vector<PDXNode> & val) {
    nodes = val;
    __isset.nodes = true;
  }

  bool operator == (const PDXObject & rhs) const
  {
    if (__isset.fields != rhs.__isset.fields)
      return false;
    else if (__isset.fields && !(fields == rhs.fields))
      return false;
    if (__isset.nodes != rhs.__isset.nodes)
      return false;
    else if (__isset.nodes && !(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const PDXObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PDXObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PDXObject &a, PDXObject &b);

}}}} // namespace

#endif
