/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*
 * Changes for GemFireXD distributed data platform.
 *
 * Portions Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

#ifndef GFXD_STRUCT_JSONFIELD_H
#define GFXD_STRUCT_JSONFIELD_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _JSONField__isset {
  _JSONField__isset() : string_val(false), bool_val(false), i32_val(false), i64_val(false), double_val(false), null_val(false), ref_val(false), array_val(false) {}
  bool string_val;
  bool bool_val;
  bool i32_val;
  bool i64_val;
  bool double_val;
  bool null_val;
  bool ref_val;
  bool array_val;
} _JSONField__isset;

class JSONField {
 public:

  static const char* ascii_fingerprint; // = "A3A9D7B3D44D8BE8B4072FCBE7D02982";
  static const uint8_t binary_fingerprint[16]; // = {0xA3,0xA9,0xD7,0xB3,0xD4,0x4D,0x8B,0xE8,0xB4,0x07,0x2F,0xCB,0xE7,0xD0,0x29,0x82};

  JSONField() : string_val(), bool_val(0), i32_val(0), i64_val(0), double_val(0), null_val(0), ref_val(0) {
  }

 private:

  void assignPrimitive(const JSONField& other) {
    if (__isset.bool_val) {
      bool_val = other.bool_val;
    }
    else if (__isset.i32_val) {
      i32_val = other.i32_val;
    }
    else if (__isset.i64_val) {
      i64_val = other.i64_val;
    }
    else if (__isset.double_val) {
      double_val = other.double_val;
    }
    else if (__isset.null_val) {
      null_val = other.null_val;
    }
    else if (__isset.ref_val) {
      ref_val = other.ref_val;
    }
  }

 public:

  JSONField(const JSONField& other) :
      string_val(other.string_val), array_val(other.array_val),
      __isset(other.__isset) {
    assignPrimitive(other);
  }

  JSONField& operator=(const JSONField& other) {
    string_val.assign(other.string_val);
    array_val = other.array_val;
    __isset = other.__isset;
    assignPrimitive(other);
    return *this;
  }

#if __cplusplus >= 201103L
  JSONField(JSONField&& other) :
      string_val(std::move(other.string_val)),
      array_val(std::move(other.array_val)), __isset(other.__isset) {
    assignPrimitive(other);
  }

  void assign(JSONField&& other) {
    string_val.assign(std::move(other.string_val));
    array_val.operator =(std::move(other.array_val));
    __isset = other.__isset;
    assignPrimitive(other);
  }

  JSONField& operator=(JSONField&& other) {
    assign(std::move(other));
    return *this;
  }
#endif

  virtual ~JSONField() throw() {}

  std::string string_val;
  bool bool_val;
  int32_t i32_val;
  int64_t i64_val;
  double double_val;
  bool null_val;
  int32_t ref_val;
  std::vector<int32_t>  array_val;

  _JSONField__isset __isset;

  void __set_string_val(const std::string& val) {
    string_val = val;
    __isset.string_val = true;
  }

  void __set_bool_val(const bool val) {
    bool_val = val;
    __isset.bool_val = true;
  }

  void __set_i32_val(const int32_t val) {
    i32_val = val;
    __isset.i32_val = true;
  }

  void __set_i64_val(const int64_t val) {
    i64_val = val;
    __isset.i64_val = true;
  }

  void __set_double_val(const double val) {
    double_val = val;
    __isset.double_val = true;
  }

  void __set_null_val(const bool val) {
    null_val = val;
    __isset.null_val = true;
  }

  void __set_ref_val(const int32_t val) {
    ref_val = val;
    __isset.ref_val = true;
  }

  void __set_array_val(const std::vector<int32_t> & val) {
    array_val = val;
    __isset.array_val = true;
  }

  bool operator == (const JSONField & rhs) const
  {
    if (__isset.string_val != rhs.__isset.string_val)
      return false;
    else if (__isset.string_val && !(string_val == rhs.string_val))
      return false;
    if (__isset.bool_val != rhs.__isset.bool_val)
      return false;
    else if (__isset.bool_val && !(bool_val == rhs.bool_val))
      return false;
    if (__isset.i32_val != rhs.__isset.i32_val)
      return false;
    else if (__isset.i32_val && !(i32_val == rhs.i32_val))
      return false;
    if (__isset.i64_val != rhs.__isset.i64_val)
      return false;
    else if (__isset.i64_val && !(i64_val == rhs.i64_val))
      return false;
    if (__isset.double_val != rhs.__isset.double_val)
      return false;
    else if (__isset.double_val && !(double_val == rhs.double_val))
      return false;
    if (__isset.null_val != rhs.__isset.null_val)
      return false;
    else if (__isset.null_val && !(null_val == rhs.null_val))
      return false;
    if (__isset.ref_val != rhs.__isset.ref_val)
      return false;
    else if (__isset.ref_val && !(ref_val == rhs.ref_val))
      return false;
    if (__isset.array_val != rhs.__isset.array_val)
      return false;
    else if (__isset.array_val && !(array_val == rhs.array_val))
      return false;
    return true;
  }
  bool operator != (const JSONField &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JSONField & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(JSONField &a, JSONField &b);

}}}} // namespace

#endif
