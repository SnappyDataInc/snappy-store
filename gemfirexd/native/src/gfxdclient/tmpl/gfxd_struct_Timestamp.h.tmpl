/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*
 * Changes for GemFireXD distributed data platform.
 *
 * Portions Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

#ifndef GFXD_STRUCT_TIMESTAMP_H
#define GFXD_STRUCT_TIMESTAMP_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _Timestamp__isset {
  _Timestamp__isset() : nanos(false) {}
  bool nanos;
} _Timestamp__isset;

class Timestamp {
 public:

  static const char* ascii_fingerprint; // = "6E578DA8AB10EED824A75534350EBAEF";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x57,0x8D,0xA8,0xAB,0x10,0xEE,0xD8,0x24,0xA7,0x55,0x34,0x35,0x0E,0xBA,0xEF};

  Timestamp() : secsSinceEpoch(0), nanos(0) {
  }

  Timestamp(int64_t epochTime, int32_t ns) :
      secsSinceEpoch(epochTime), nanos(ns) {
  }

  virtual ~Timestamp() throw() {}

  int64_t secsSinceEpoch;
  int32_t nanos;

  _Timestamp__isset __isset;

  void __set_secsSinceEpoch(const int64_t val) {
    secsSinceEpoch = val;
  }

  void __set_nanos(const int32_t val) {
    nanos = val;
    __isset.nanos = true;
  }

  bool operator == (const Timestamp & rhs) const
  {
    if (!(secsSinceEpoch == rhs.secsSinceEpoch))
      return false;
    if (__isset.nanos != rhs.__isset.nanos)
      return false;
    else if (__isset.nanos && !(nanos == rhs.nanos))
      return false;
    return true;
  }
  bool operator != (const Timestamp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Timestamp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Timestamp &a, Timestamp &b);

}}}} // namespace

#endif
