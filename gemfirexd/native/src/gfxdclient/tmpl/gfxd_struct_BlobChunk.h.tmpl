/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*
 * Changes for GemFireXD distributed data platform.
 *
 * Portions Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

#ifndef GFXD_STRUCT_BLOBCHUNK_H
#define GFXD_STRUCT_BLOBCHUNK_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"
#include "gfxd_struct_JSONObject.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {

typedef struct _BlobChunk__isset {
  _BlobChunk__isset() : lobId(false), offset(false), totalLength(false) {}
  bool lobId;
  bool offset;
  bool totalLength;
} _BlobChunk__isset;

class BlobChunk {
 public:

  static const char* ascii_fingerprint; // = "96777C614AC7898ECF1FFE99933F4372";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x77,0x7C,0x61,0x4A,0xC7,0x89,0x8E,0xCF,0x1F,0xFE,0x99,0x93,0x3F,0x43,0x72};

  BlobChunk() : chunk(), last(0), lobId(0), offset(0), totalLength(0) {
  }

#if __cplusplus >= 201103L
  BlobChunk(const BlobChunk& other) = default;
  BlobChunk& operator=(const BlobChunk& other) = default;

  BlobChunk(BlobChunk&& other) :
      chunk(std::move(other.chunk)), last(other.last), lobId(other.lobId),
      offset(other.offset), totalLength(other.totalLength),
      __isset(other.__isset) {
  }

  void assign(BlobChunk&& other) {
    chunk = std::move(other.chunk);
    last = other.last;
    lobId = other.lobId;
    offset = other.offset;
    totalLength = other.totalLength;
    __isset = other.__isset;
  }

  BlobChunk& operator=(BlobChunk&& other) {
    assign(std::move(other));
    return *this;
  }
#endif

  virtual ~BlobChunk() throw() {}

  std::string chunk;
  bool last;
  int32_t lobId;
  int64_t offset;
  int64_t totalLength;

  _BlobChunk__isset __isset;

  void __set_chunk(const std::string& val) {
    chunk = val;
  }

  void __set_last(const bool val) {
    last = val;
  }

  void __set_lobId(const int32_t val) {
    lobId = val;
    __isset.lobId = true;
  }

  void __set_offset(const int64_t val) {
    offset = val;
    __isset.offset = true;
  }

  void __set_totalLength(const int64_t val) {
    totalLength = val;
    __isset.totalLength = true;
  }

  bool operator == (const BlobChunk & rhs) const
  {
    if (!(chunk == rhs.chunk))
      return false;
    if (!(last == rhs.last))
      return false;
    if (__isset.lobId != rhs.__isset.lobId)
      return false;
    else if (__isset.lobId && !(lobId == rhs.lobId))
      return false;
    if (__isset.offset != rhs.__isset.offset)
      return false;
    else if (__isset.offset && !(offset == rhs.offset))
      return false;
    if (__isset.totalLength != rhs.__isset.totalLength)
      return false;
    else if (__isset.totalLength && !(totalLength == rhs.totalLength))
      return false;
    return true;
  }
  bool operator != (const BlobChunk &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlobChunk & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BlobChunk &a, BlobChunk &b);

}}}} // namespace

#endif
