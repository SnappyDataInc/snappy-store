/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/*
 * Changes for GemFireXD distributed data platform.
 *
 * Portions Copyright (c) 2010-2015 Pivotal Software, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

#ifndef GFXD_STRUCT_JSONOBJECT_H
#define GFXD_STRUCT_JSONOBJECT_H


#include "gfxd_types.h"

#include "gfxd_struct_FieldDescriptor.h"
#include "gfxd_struct_Decimal.h"
#include "gfxd_struct_Timestamp.h"
#include "gfxd_struct_FieldValue.h"
#include "gfxd_struct_PDXNode.h"
#include "gfxd_struct_PDXObject.h"
#include "gfxd_struct_PDXSchemaNode.h"
#include "gfxd_struct_PDXSchema.h"
#include "gfxd_struct_JSONField.h"
#include "gfxd_struct_JSONNode.h"

namespace com { namespace pivotal { namespace gemfirexd { namespace thrift {


class JSONObject {
 public:

  static const char* ascii_fingerprint; // = "D9ED008C001DC2AD0A37E867CC9254BA";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xED,0x00,0x8C,0x00,0x1D,0xC2,0xAD,0x0A,0x37,0xE8,0x67,0xCC,0x92,0x54,0xBA};

  JSONObject() {
  }

#if __cplusplus >= 201103L
  JSONObject(const JSONObject& other) = default;
  JSONObject& operator=(const JSONObject& other) = default;

  JSONObject(JSONObject&& other) :
      nodes(std::move(other.nodes)) {
  }

  void assign(JSONObject&& other) {
    nodes.operator =(std::move(other.nodes));
  }

  JSONObject& operator=(JSONObject&& other) {
    assign(std::move(other));
    return *this;
  }
#endif

  virtual ~JSONObject() throw() {}

  std::vector<JSONNode>  nodes;

  void __set_nodes(const std::vector<JSONNode> & val) {
    nodes = val;
  }

  bool operator == (const JSONObject & rhs) const
  {
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const JSONObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JSONObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(JSONObject &a, JSONObject &b);

}}}} // namespace

#endif
