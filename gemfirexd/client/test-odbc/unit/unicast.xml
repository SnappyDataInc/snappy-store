<?xml version="1.0"?>

<!-- This is the Ant build file for running C tests.  It is designed 
     to be invoked from the build.xml Ant script in the top level directory
     of the gemfirexd  tree, and expects to inherit the properties set
     there.
  -->

<project name="gemfirexd ODBC Driver" default="usage">
	<description>Runs gemfirexd odbc C++ Tests</description>
	<target name="usage">
		<echo>
    This script is designed to be invoked from the gemfirexd.xml script
    in the base directory.
    </echo>
	</target>

	<!--<taskdef name="conditional"
    classname="com.gemstone.tools.ant.taskdefs.Conditional">
    <classpath>
      <pathelement location="${basedir}/../../buildfiles/taskdefsV10.jar" />
    </classpath>
  </taskdef>-->


	<target name="-run-test">
		<description>
       Requires that the testName property be set.
       If the testScript property is set then bash is used as the executable.
       The testTimeout property can be set to the number of seconds to
       wait before timing out. It defaults to 30 seconds.
       If a test should only be run once against a single sytem then set
       the testRunOnce property.
    </description>
		<conditional unless="cpp.testcase">
			<property name="thisTestOk" value="true" />
		</conditional>
		<conditional if="cpp.testcase">
			<condition property="thisTestOk">
				<equals arg1="${testName}" arg2="${cpp.testcase}" />
			</condition>
		</conditional>
		<condition property="okToRun">
			<and>
				<or>
					<not>
						<isset property="testRunOnce" />
					</not>
					<not>
						<isset property="userSystem" />
					</not>
					<equals arg1="${iterations.count}" arg2="1" />
				</or>
				<isset property="thisTestOk" />
			</and>
		</condition>

		<conditional unless="okToRun">
			<echo level="info" message="Skipping test ${testName}" />
		</conditional>
		<conditional if="okToRun">
			<condition property="myTimeout" value="${testTimeout}">
				<isset property="testTimeout" />
			</condition>
			<!--  set the timeout for an individual test to 30 minutes -->
			<condition property="myTimeout" value="1800">
				<and>
					<not>
						<isset property="testTimeout" />
					</not>
					<not>
						<or>
							<isset property="msdev" />
							<isset property="msdev.profile" />
							<isset property="cpp-debug" />
						</or>
					</not>
				</and>
			</condition>
			<condition property="myTimeout" value="9999999">
				<or>
					<isset property="msdev" />
					<isset property="msdev.profile" />
					<isset property="cpp-debug" />
				</or>
			</condition>
			<condition property="myExe" value="cmd">
				<isset property="msdev.profile" />
			</condition>
			<condition property="myExe" value="msdev">
				<isset property="msdev" />
			</condition>
			<condition property="msdevTestName" value="${cpptest.exedir}/${testName}.exe">
				<isset property="msdev" />
			</condition>
			<condition property="msdevTestName" value="/c ftime.bat ${cpptest.exedir}/${testName}">
				<isset property="msdev.profile" />
			</condition>
			<condition property="myExe" value="bash">
				<isset property="testScript" />
			</condition>
			<condition property="myExe" value="${testresults.dir}/${testName}">
				<not>
					<isset property="testScript" />
				</not>
			</condition>
			<condition property="myPath" value="${cpptest.exedir}${path.separator}${hiddenlib.dir}/debug${path.separator}${product.library.dir}${path.separator}${myenv.PATH}">
				<isset property="cpp-debug" />
			</condition>
			<condition property="myPath" value="${cpptest.exedir}${path.separator}${myenv.PATH}">
				<and>
					<not>
						<isset property="cpp-debug" />
					</not>
					<isset property="testScript" />
				</and>
			</condition>
			<condition property="myPath" value="${cpptest.exedir}${path.separator}${product.library.dir}${path.separator}${myenv.PATH}">
				<and>
					<not>
						<isset property="cpp-debug" />
					</not>
					<not>
						<isset property="testScript" />
					</not>
				</and>
			</condition>
			<condition property="test.library.dir" value="${cpptest.exedir}${path.separator}${product.library.dir}">
				<and>
					<not>
						<isset property="cpp-debug" />
					</not>
					<not>
						<isset property="testScript" />
					</not>
				</and>
			</condition>
			<condition property="test.library.dir" value="${cpptest.exedir}${path.separator}${hiddenlib.dir}/debug${path.separator}${product.library.dir}">
				<isset property="cpp-debug" />
			</condition>
			<property name="additionalLibPath" value="" />
			<tstamp>
				<format property="test.time" pattern="HH:mm:ss" />
			</tstamp>
			<echo level="info" message="${test.time}: ${testName} timeout=${myTimeout} seconds" />
			<condition property="working.dir" value="${testresults.dir}/native-client-only">
				<contains string="${testName}" substring="thinclient" casesensitive="no" />
			</condition>
			<condition property="working.dir" value="${testresults.dir}">
				<not>
					<contains string="${testName}" substring="thinclient" casesensitive="no" />
				</not>
			</condition>

			<!-- echo message="Working dir is ${working.dir}"/ -->
			<exec executable="bash" outputProperty="mport">
				<arg line=" -c '((res=( ( $RANDOM * ( 52999 - 21111 + 1 ) ) / 53767 ) + 32111)); echo $res'" />
			</exec>
			<exec executable="bash" outputProperty="bbport">
				<arg line=" -c '((res=( ( $RANDOM * ( 31999 - 21111 + 1 ) ) / 32767 ) + 21115)); echo $res'" />
			</exec>
			<exec executable="bash" outputProperty="maddr">
				<arg line=" -c '((res=( ( $RANDOM * ( 255 - 1 + 1 ) ) / 32767 ) + 1)); echo $res'" />
			</exec>

			<condition property="profiler.cmd" value="${valgrind.dir}/bin/valgrind --tool=${vtool} --log-file=./${vtool}-%lu-%d-%d.out ${vtool.args}">
				<and>
					<isset property="valgrind.dir" />
					<isset property="vtool" />
				</and>
			</condition>
			<condition property="profiler.cmd" value="">
				<not>
					<isset property="vtool" />
				</not>
			</condition>
			<condition property="valgrind.dir" value="">
				<not>
					<isset property="vtool" />
				</not>
			</condition>


			<property name="path.dir" value="${odbclib.dir}${path.separator}${gemfirexd.product.dir}/bin${path.separator}${ace.dir}/lib${path.separator}${myPath}${path.separator}${additionalLibPath}" />
			<!-- <echo message="PATH is name=${path.dir}"/> -->
			<!--property name="path.dir" value="${myPath}${path.separator}${framework.dir}/lib${additionalLibPath}${path.separator}${valgrind.dir}/bin${path.separator}${openssl.dir}/ssllibs/lib${path.separator}${product.library.dir}"/-->
			<!-- echo message="PATH is name=${path.dir}"/ -->
			<!-- echo message="Port is ${mport}"/ -->
			<!-- echo message="Addr is 224.10.13.${maddr}"/ -->
			<!-- echo message="Cacheservers will use 224.10.13.${maddr}:${mport} for discovery."/ -->
			<exec executable="${myExe}" resultproperty="testResult" failifexecutionfails="false" output="${testresults.dir}/${testName}.out" dir="${testresults.dir}">
				<env key="LD_LIBRARY_PATH" path="${ace.dir}/lib${path.separator}${odbclib.dir}${path.separator}." />
				<env key="DYLD_LIBRARY_PATH" path="${ace.dir}/lib${path.separator}${odbclib.dir}${path.separator}.${path.separator}${gcc.dir}/lib${path.separator}${gcc.dir}/lib/i386" />
				<env key="PATH" path="${path.dir}" />

				<!--<env key="TESTSRC" path="${basedir}"/>    
        <env key="GFCPP" path="${product.dir}"/>
        <env key="GF_JAVA" path="${gfe.jre}/bin/java"/>
        <env key="GFJAVA" path="${gfe.dir}"/>
        <env key="GFE_LOGLEVEL" value="${gfeLogLevel}"/>
        <env key="GFE_SECLOGLEVEL" value="${gfeSecLogLevel}"/>
        <env key="MCAST_PORT" value="${mport}"/>
        <env key="BB_PORT" value="${bbport}"/>
        <env key="MCAST_ADDR" value="224.10.13.${maddr}"/>
        <env key="TIMEBOMB" value="${myTimeout}"/>
        <env key="TESTNAME" value="${testName}" />
        <env key="CLASSPATH" path="${framework.dir}/lib/javaobject.jar:${gfe.dir}/lib/antlr.jar:${gfe.dir}/lib/gfSecurityImpl.jar" />
        <env key="PROFILERCMD" value="${profiler.cmd}" />
				<env key="BUG481" value="${BUG481}" />
        <arg line="${msdevTestName}"/> -->
			</exec>
			<condition property="unitTestFailed">
				<not>
					<equals arg1="${testResult}" arg2="0" />
				</not>
			</condition>
			<property name="xml.reports" value="${testresults.dir}/xml-reports" />
			<conditional if="unitTestFailed">
				<echo level="info" message="FAILED: c++ unicast test ${testName}" />
				<propertyfile file="${testresults.dir}/cppTestFailures" comment="Number of Tests that Failed">
					<entry key="failureCount" type="int" operation="+" value="1" />
					<entry key="failedTests" operation="+" value=" ${testName}" />
				</propertyfile>
				<copy todir="${errorsDir}" preservelastmodified="true">
					<fileset dir="${testresults.dir}" includes="${testName}*.out" />
				</copy>
				<!--
DICK
<linecontainsregexp>
  <regexp pattern="assert|exception"/>
</linecontainsregexp>
-->
				<loadfile srcfile="${testresults.dir}/${testName}.out" property="output" quiet="true">
					<filterchain>
						<filterreader classname="org.apache.tools.ant.filters.TailFilter">
							<param name="lines" value="15" />
						</filterreader>
					</filterchain>
				</loadfile>

				<concat append="no" destfile="${xml.reports}/${testName}.xml">
					<![CDATA[<testsuite errors="0" failures="1" name="${testName}" tests="1">
					<testcase classname="${testName}" name="${testName}">
						<failure message="Log lines that contain suspect phrases">]]>
<![CDATA[<![CDATA[
${output}
]]>]]&gt;
<![CDATA[      </failure>
						</testcase>
					</testsuite>]]>
        </concat>
			</conditional>
			<conditional unless="unitTestFailed">
				<concat append="no" destfile="${xml.reports}/${testName}.xml">
					<![CDATA[<testsuite errors="0" failures="0" name="${testName}" tests="1">
					<testcase classname="${testName}" name="${testName}"/>
				</testsuite>]]>
        </concat>
		</conditional>
	</conditional>
</target>

<target name="unicast-tests">
	<!-- LD_LIBRARY_PATH and PATH are both set to the lib directory so
	that the loader can find the shared-library/dll and we don't 
  have to have a different exec task for each operating system -->

	<echo>running tests</echo>

	<delete file="${testresults.dir}/cppTestFailures" quiet="true" />
	<propertyfile file="${testresults.dir}/cppTestFailures" comment="Number of Tests that Failed">
		<entry key="failureCount" type="int" value="0" />
		<entry key="failedTests" value="" />
	</propertyfile>

	<exec executable="bash" outputProperty="unique.mcast.port">
		<arg line=" -c '((res=( ( $RANDOM * ( 52999 - 21111 + 1 ) ) / 53767 ) + 32111)); echo $res'" />
	</exec>

	<!--<propertyfile file="${tst_res}/cpp/${test.type}/native-client-only/gfcpp.properties">
		<entry key="log-level" value="${logLevel}"/>
	</propertyfile>

  <propertyfile file="${tst_res}/cpp/${test.type}/gfcpp.properties">
		<entry key="log-level" value="${logLevel}"/>
	</propertyfile>    
-->

	<!-- compile java ProcedureTest for procedure test
	<exec executable="javac" failonerror="true">
		<arg value="*.java" />
	</exec> -->

	<!--  Start locatot and gfxd server  -->
	<mkdir dir="${testresults.dir}/gfxdlocator" />
	<mkdir dir="${testresults.dir}/gfxdserver" />


	<conditional if="isWindows">

		<!-- Copy the manifest files and procedure files to out dir -->
		<copy preservelastmodified="true" todir=".">
			<fileset dir="${gemfirexd.odbc.tests.src.dir}/unit/">
				<include name="**/*.java" />
				<include name="Manifest.imf" />
			</fileset>
		</copy>

		<!-- compile the java files for procedure tests-->
		<javac executable="${javac.primary}/bin/javac" source="1.7" fork="yes" memoryMaximumSize="1024m" 
			debug="on" deprecation="off" destdir="." includeAntRuntime="true" nowarn="off" optimize="off" 
			encoding="UTF-8">
			<src path="${gemfirexd.odbc.tests.src.dir}/unit" />
			<classpath>
				<pathelement location="${gemfirexd.unsealed.jar}"/>
			</classpath>
		</javac>

		<!--build jar for Procedure Test -->
		<exec executable="${javac.primary}/bin/jar" failonerror="true">
			<arg line="cvfm TestProcedures.jar Manifest.imf tests/TestProcedures.class tests/ODBCQueryObserver.class" />
		</exec>

		<!-- start the locator -->
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg path="${gemfirexd.product.dir}/bin/gfxd.bat" />
			<arg line="locator start -dir=gfxdlocator -run-netserver=false -log-level=fine" />
			<arg line="-peer-discovery-port=3333 -auth-provider=BUILTIN -gemfirexd.user.gfxdodbc=gfxdodbc 
				-user=gfxdodbc -password=gfxdodbc " />
		</exec>

		<!-- start gfxd server -->
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg path="${gemfirexd.product.dir}/bin/gfxd.bat" />
			<arg line="server start  -locators=localhost:3333 -dir=gfxdserver -log-level=all" />
			<arg line="-client-port=1999 -auth-provider=BUILTIN -gemfirexd.user.gfxdodbc=gfxdodbc 
				-gemfirexd.sql-authorization=true -user=gfxdodbc -password=gfxdodbc 
				-classpath=${testresults.dir}/TestProcedures.jar" />
		</exec>


		<!-- install jar files for procedure tests -->
		<!--<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg path="${gemfirexd.product.dir}/bin/gfxd.bat" />
			<arg line="install-jar -file=TestProcedures.jar -name=TestProcedures" />
			<arg line="-client-port=1999 -auth-provider=BUILTIN -user=gfxdodbc -password=gfxdodbc " />
		</exec> -->

	</conditional>

	<conditional unless="isWindows">
	
		<!-- Copy the manifest files and procedure files to out dir -->
		<copy preservelastmodified="true" todir=".">
			<fileset dir="${gemfirexd.odbc.tests.src.dir}/unit/">
				<include name="**/*.java" />
				<include name="Manifest.imf" />
			</fileset>
		</copy>

		<!--compile java files for Procedure Test -->
		<javac executable="${javac.primary}/bin/javac" source="1.7" fork="yes" 
			memoryMaximumSize="1024m" debug="on" deprecation="off" destdir="." 
			includeAntRuntime="true" nowarn="off" optimize="off" encoding="UTF-8">
			<src path="${gemfirexd.odbc.tests.src.dir}/unit" />
			<include name="tests/*.java"/>
			<classpath>
				<pathelement location="${gemfirexd.unsealed.jar}"/>
			</classpath>
		</javac>

		<!--create jar for Procedure Test -->
		<exec executable="${javac.primary}/bin/jar" failonerror="true">
			<arg line="cvfm TestProcedures.jar Manifest.imf tests/TestProcedures.class tests/ODBCQueryObserver.class" />
		</exec>

		<!-- start the locator -->
		<exec executable="bash" failonerror="true">
			<arg path="${gemfirexd.product.dir}/bin/gfxd" />
			<arg line="locator start -dir=gfxdlocator -run-netserver=false -log-level=fine" />
			<arg line="-peer-discovery-port=3333 -auth-provider=BUILTIN -gemfirexd.user.gfxdodbc=gfxdodbc 
				-user=gfxdodbc -password=gfxdodbc " />
		</exec>

		<!-- start gfxd server -->
		<exec executable="bash" failonerror="true">
			<arg path="${gemfirexd.product.dir}/bin/gfxd" />
			<arg line="server start  -locators=localhost:3333 -dir=gfxdserver -log-level=fine" />
			<arg line="-client-port=1999 -auth-provider=BUILTIN -gemfirexd.user.gfxdodbc=gfxdodbc 
				-gemfirexd.sql-authorization=true -user=gfxdodbc -password=gfxdodbc 
				-classpath=${testresults.dir}/TestProcedures.jar" />
		</exec>

		<!-- create odbcinst.ini, odnc.ini and invoke test runs with appropriate arguments -->
		<!--<echo file="odbcinst.ini" level="info">
    		[GemFireXD Network Client 1.0]
    		Description     = GemFireXD ODBC driver
    		Driver          = ${odbclib.dir}/libgemfirexdodbc.so
    		Setup           = ${odbclib.dir}/libgemfirexdodbc.so
    		FileUsage       = 1
    	</echo> -->


		<!-- install jar files for procedure tests -->
		<!--<exec executable="bash" failonerror="true">
			<arg path="${gemfirexd.product.dir}/bin/gfxd" />
			<arg line="install-jar -file=TestProcedures.jar -name=TestProcedures" />
			<arg line="-client-port=1999 -auth-provider=BUILTIN -user=gfxdodbc -password=gfxdodbc " />
		</exec>-->

		<copy preservelastmodified="true" todir="${testresults.dir}">
			<fileset dir="${gcc.dir}/lib">
				<include name="*odbcinst*"/>
			</fileset>
		</copy>

		<condition property="isMac32bit">
			<and>
				<os family="mac"/>
				<equals arg1="${gflib.model}" arg2="32bit"/>
			</and>
		</condition>

		<conditional if="isMac32bit">
			<copy preservelastmodified="true" todir="${testresults.dir}" overwrite="true">
				<fileset dir="${gcc.dir}/lib/i386">
					<include name="*odbcinst*"/>
				</fileset>
			</copy>
		</conditional>
	</conditional>

	<!-- <parallel threadCount='${parallelTests}'> -->
	<parallel threadCount='1'>
		<antcall target="-run-test">
			<param name="testName" value="testSQLAllocHandle" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLFreeHandle" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLSetEnvAttr" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetEnvAttr" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetFunctions" />
		</antcall>

		<antcall target="-run-test">
			<param name="testName" value="testSQLConnect" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLDisconnect" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLDriverConnect" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLSetConnectAttr" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetConnectAttr" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetInfo" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLNativeSql" />
		</antcall>

		<antcall target="-run-test">
			<param name="testName" value="testSQLFreeStmt" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLCancel" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLCancelHandle" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLBindParameter" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLBindCol" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLBulkOperations" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLCloseCursor" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLColAttribute" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLColumnPrivileges" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLColumns" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLDescribeCol" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLDescribeParam" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLEndTran" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLExecDirect" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLFetch" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLFetchScroll" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLForeignKeys" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetCursorName" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetData" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetDiagField" />
		</antcall>

		<antcall target="-run-test">
			<param name="testName" value="testSQLGetDiagRec" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetStmtAttr" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLGetTypeInfo" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLMoreResults" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLNumResultCols" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLParamData" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLPrepare" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLPrimaryKeys" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLProcedureColumns" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLProcedures" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLPutData" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLRowCount" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLSetCursorName" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLSetPos" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLSetStmtAttr" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLSpecialColumns" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLStatistics" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLTablePrivileges" />
		</antcall>
		<antcall target="-run-test">
			<param name="testName" value="testSQLTables" />
		</antcall>

	</parallel>

	<!-- Stop locator and server -->
	<conditional if="isWindows">
		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg path="${gemfirexd.product.dir}/bin/gfxd.bat" />
			<arg line="locator stop -dir=gfxdlocator" />
		</exec>

		<exec executable="cmd" failonerror="true">
			<arg value="/c" />
			<arg path="${gemfirexd.product.dir}/bin/gfxd.bat" />
			<arg line="server stop -dir=gfxdserver" />
		</exec>
	</conditional>

	<conditional unless="isWindows">
		<exec executable="bash" failonerror="true">
			<arg path="${gemfirexd.product.dir}/bin/gfxd" />
			<arg line="locator stop -dir=gfxdlocator" />
		</exec>
		<exec executable="bash" failonerror="true">
			<arg path="${gemfirexd.product.dir}/bin/gfxd" />
			<arg line="server stop -dir=gfxdserver" />
		</exec>

	</conditional>

</target>

</project>
