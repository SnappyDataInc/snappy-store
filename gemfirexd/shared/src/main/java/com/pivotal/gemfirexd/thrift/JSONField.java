/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.pivotal.gemfirexd.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JSONField implements org.apache.thrift.TBase<JSONField, JSONField._Fields>, java.io.Serializable, Comparable<JSONField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JSONField");

  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("string_val", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_val", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField I32_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_val", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField I64_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_val", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("double_val", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField NULL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("null_val", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField REF_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("ref_val", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ARRAY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("array_val", org.apache.thrift.protocol.TType.LIST, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JSONFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JSONFieldTupleSchemeFactory());
  }

  public String string_val; // optional
  public boolean bool_val; // optional
  public int i32_val; // optional
  public long i64_val; // optional
  public double double_val; // optional
  public boolean null_val; // optional
  public int ref_val; // optional
  public List<Integer> array_val; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING_VAL((short)1, "string_val"),
    BOOL_VAL((short)2, "bool_val"),
    I32_VAL((short)3, "i32_val"),
    I64_VAL((short)4, "i64_val"),
    DOUBLE_VAL((short)5, "double_val"),
    NULL_VAL((short)6, "null_val"),
    REF_VAL((short)7, "ref_val"),
    ARRAY_VAL((short)8, "array_val");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING_VAL
          return STRING_VAL;
        case 2: // BOOL_VAL
          return BOOL_VAL;
        case 3: // I32_VAL
          return I32_VAL;
        case 4: // I64_VAL
          return I64_VAL;
        case 5: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 6: // NULL_VAL
          return NULL_VAL;
        case 7: // REF_VAL
          return REF_VAL;
        case 8: // ARRAY_VAL
          return ARRAY_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOL_VAL_ISSET_ID = 0;
  private static final int __I32_VAL_ISSET_ID = 1;
  private static final int __I64_VAL_ISSET_ID = 2;
  private static final int __DOUBLE_VAL_ISSET_ID = 3;
  private static final int __NULL_VAL_ISSET_ID = 4;
  private static final int __REF_VAL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STRING_VAL,_Fields.BOOL_VAL,_Fields.I32_VAL,_Fields.I64_VAL,_Fields.DOUBLE_VAL,_Fields.NULL_VAL,_Fields.REF_VAL,_Fields.ARRAY_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("string_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("bool_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.I32_VAL, new org.apache.thrift.meta_data.FieldMetaData("i32_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_VAL, new org.apache.thrift.meta_data.FieldMetaData("i64_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("double_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NULL_VAL, new org.apache.thrift.meta_data.FieldMetaData("null_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REF_VAL, new org.apache.thrift.meta_data.FieldMetaData("ref_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARRAY_VAL, new org.apache.thrift.meta_data.FieldMetaData("array_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JSONField.class, metaDataMap);
  }

  public JSONField() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JSONField(JSONField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetString_val()) {
      this.string_val = other.string_val;
    }
    this.bool_val = other.bool_val;
    this.i32_val = other.i32_val;
    this.i64_val = other.i64_val;
    this.double_val = other.double_val;
    this.null_val = other.null_val;
    this.ref_val = other.ref_val;
    if (other.isSetArray_val()) {
      List<Integer> __this__array_val = new ArrayList<Integer>(other.array_val);
      this.array_val = __this__array_val;
    }
  }

  public JSONField deepCopy() {
    return new JSONField(this);
  }

  @Override
  public void clear() {
    this.string_val = null;
    setBool_valIsSet(false);
    this.bool_val = false;
    setI32_valIsSet(false);
    this.i32_val = 0;
    setI64_valIsSet(false);
    this.i64_val = 0;
    setDouble_valIsSet(false);
    this.double_val = 0.0;
    setNull_valIsSet(false);
    this.null_val = false;
    setRef_valIsSet(false);
    this.ref_val = 0;
    this.array_val = null;
  }

  public String getString_val() {
    return this.string_val;
  }

  public JSONField setString_val(String string_val) {
    this.string_val = string_val;
    return this;
  }

  public void unsetString_val() {
    this.string_val = null;
  }

  /** Returns true if field string_val is set (has been assigned a value) and false otherwise */
  public boolean isSetString_val() {
    return this.string_val != null;
  }

  public void setString_valIsSet(boolean value) {
    if (!value) {
      this.string_val = null;
    }
  }

  public boolean isBool_val() {
    return this.bool_val;
  }

  public JSONField setBool_val(boolean bool_val) {
    this.bool_val = bool_val;
    setBool_valIsSet(true);
    return this;
  }

  public void unsetBool_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  /** Returns true if field bool_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_val() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  public void setBool_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOL_VAL_ISSET_ID, value);
  }

  public int getI32_val() {
    return this.i32_val;
  }

  public JSONField setI32_val(int i32_val) {
    this.i32_val = i32_val;
    setI32_valIsSet(true);
    return this;
  }

  public void unsetI32_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I32_VAL_ISSET_ID);
  }

  /** Returns true if field i32_val is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_val() {
    return EncodingUtils.testBit(__isset_bitfield, __I32_VAL_ISSET_ID);
  }

  public void setI32_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I32_VAL_ISSET_ID, value);
  }

  public long getI64_val() {
    return this.i64_val;
  }

  public JSONField setI64_val(long i64_val) {
    this.i64_val = i64_val;
    setI64_valIsSet(true);
    return this;
  }

  public void unsetI64_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64_VAL_ISSET_ID);
  }

  /** Returns true if field i64_val is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_val() {
    return EncodingUtils.testBit(__isset_bitfield, __I64_VAL_ISSET_ID);
  }

  public void setI64_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64_VAL_ISSET_ID, value);
  }

  public double getDouble_val() {
    return this.double_val;
  }

  public JSONField setDouble_val(double double_val) {
    this.double_val = double_val;
    setDouble_valIsSet(true);
    return this;
  }

  public void unsetDouble_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  /** Returns true if field double_val is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_val() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  public void setDouble_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID, value);
  }

  public boolean isNull_val() {
    return this.null_val;
  }

  public JSONField setNull_val(boolean null_val) {
    this.null_val = null_val;
    setNull_valIsSet(true);
    return this;
  }

  public void unsetNull_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NULL_VAL_ISSET_ID);
  }

  /** Returns true if field null_val is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_val() {
    return EncodingUtils.testBit(__isset_bitfield, __NULL_VAL_ISSET_ID);
  }

  public void setNull_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NULL_VAL_ISSET_ID, value);
  }

  public int getRef_val() {
    return this.ref_val;
  }

  public JSONField setRef_val(int ref_val) {
    this.ref_val = ref_val;
    setRef_valIsSet(true);
    return this;
  }

  public void unsetRef_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REF_VAL_ISSET_ID);
  }

  /** Returns true if field ref_val is set (has been assigned a value) and false otherwise */
  public boolean isSetRef_val() {
    return EncodingUtils.testBit(__isset_bitfield, __REF_VAL_ISSET_ID);
  }

  public void setRef_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REF_VAL_ISSET_ID, value);
  }

  public int getArray_valSize() {
    return (this.array_val == null) ? 0 : this.array_val.size();
  }

  public java.util.Iterator<Integer> getArray_valIterator() {
    return (this.array_val == null) ? null : this.array_val.iterator();
  }

  public void addToArray_val(int elem) {
    if (this.array_val == null) {
      this.array_val = new ArrayList<Integer>();
    }
    this.array_val.add(elem);
  }

  public List<Integer> getArray_val() {
    return this.array_val;
  }

  public JSONField setArray_val(List<Integer> array_val) {
    this.array_val = array_val;
    return this;
  }

  public void unsetArray_val() {
    this.array_val = null;
  }

  /** Returns true if field array_val is set (has been assigned a value) and false otherwise */
  public boolean isSetArray_val() {
    return this.array_val != null;
  }

  public void setArray_valIsSet(boolean value) {
    if (!value) {
      this.array_val = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STRING_VAL:
      if (value == null) {
        unsetString_val();
      } else {
        setString_val((String)value);
      }
      break;

    case BOOL_VAL:
      if (value == null) {
        unsetBool_val();
      } else {
        setBool_val((Boolean)value);
      }
      break;

    case I32_VAL:
      if (value == null) {
        unsetI32_val();
      } else {
        setI32_val((Integer)value);
      }
      break;

    case I64_VAL:
      if (value == null) {
        unsetI64_val();
      } else {
        setI64_val((Long)value);
      }
      break;

    case DOUBLE_VAL:
      if (value == null) {
        unsetDouble_val();
      } else {
        setDouble_val((Double)value);
      }
      break;

    case NULL_VAL:
      if (value == null) {
        unsetNull_val();
      } else {
        setNull_val((Boolean)value);
      }
      break;

    case REF_VAL:
      if (value == null) {
        unsetRef_val();
      } else {
        setRef_val((Integer)value);
      }
      break;

    case ARRAY_VAL:
      if (value == null) {
        unsetArray_val();
      } else {
        setArray_val((List<Integer>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STRING_VAL:
      return getString_val();

    case BOOL_VAL:
      return Boolean.valueOf(isBool_val());

    case I32_VAL:
      return Integer.valueOf(getI32_val());

    case I64_VAL:
      return Long.valueOf(getI64_val());

    case DOUBLE_VAL:
      return Double.valueOf(getDouble_val());

    case NULL_VAL:
      return Boolean.valueOf(isNull_val());

    case REF_VAL:
      return Integer.valueOf(getRef_val());

    case ARRAY_VAL:
      return getArray_val();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STRING_VAL:
      return isSetString_val();
    case BOOL_VAL:
      return isSetBool_val();
    case I32_VAL:
      return isSetI32_val();
    case I64_VAL:
      return isSetI64_val();
    case DOUBLE_VAL:
      return isSetDouble_val();
    case NULL_VAL:
      return isSetNull_val();
    case REF_VAL:
      return isSetRef_val();
    case ARRAY_VAL:
      return isSetArray_val();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JSONField)
      return this.equals((JSONField)that);
    return false;
  }

  public boolean equals(JSONField that) {
    if (that == null)
      return false;

    boolean this_present_string_val = true && this.isSetString_val();
    boolean that_present_string_val = true && that.isSetString_val();
    if (this_present_string_val || that_present_string_val) {
      if (!(this_present_string_val && that_present_string_val))
        return false;
      if (!this.string_val.equals(that.string_val))
        return false;
    }

    boolean this_present_bool_val = true && this.isSetBool_val();
    boolean that_present_bool_val = true && that.isSetBool_val();
    if (this_present_bool_val || that_present_bool_val) {
      if (!(this_present_bool_val && that_present_bool_val))
        return false;
      if (this.bool_val != that.bool_val)
        return false;
    }

    boolean this_present_i32_val = true && this.isSetI32_val();
    boolean that_present_i32_val = true && that.isSetI32_val();
    if (this_present_i32_val || that_present_i32_val) {
      if (!(this_present_i32_val && that_present_i32_val))
        return false;
      if (this.i32_val != that.i32_val)
        return false;
    }

    boolean this_present_i64_val = true && this.isSetI64_val();
    boolean that_present_i64_val = true && that.isSetI64_val();
    if (this_present_i64_val || that_present_i64_val) {
      if (!(this_present_i64_val && that_present_i64_val))
        return false;
      if (this.i64_val != that.i64_val)
        return false;
    }

    boolean this_present_double_val = true && this.isSetDouble_val();
    boolean that_present_double_val = true && that.isSetDouble_val();
    if (this_present_double_val || that_present_double_val) {
      if (!(this_present_double_val && that_present_double_val))
        return false;
      if (this.double_val != that.double_val)
        return false;
    }

    boolean this_present_null_val = true && this.isSetNull_val();
    boolean that_present_null_val = true && that.isSetNull_val();
    if (this_present_null_val || that_present_null_val) {
      if (!(this_present_null_val && that_present_null_val))
        return false;
      if (this.null_val != that.null_val)
        return false;
    }

    boolean this_present_ref_val = true && this.isSetRef_val();
    boolean that_present_ref_val = true && that.isSetRef_val();
    if (this_present_ref_val || that_present_ref_val) {
      if (!(this_present_ref_val && that_present_ref_val))
        return false;
      if (this.ref_val != that.ref_val)
        return false;
    }

    boolean this_present_array_val = true && this.isSetArray_val();
    boolean that_present_array_val = true && that.isSetArray_val();
    if (this_present_array_val || that_present_array_val) {
      if (!(this_present_array_val && that_present_array_val))
        return false;
      if (!this.array_val.equals(that.array_val))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JSONField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetString_val()).compareTo(other.isSetString_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_val, other.string_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBool_val()).compareTo(other.isSetBool_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_val, other.bool_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_val()).compareTo(other.isSetI32_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_val, other.i32_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_val()).compareTo(other.isSetI64_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_val, other.i64_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_val()).compareTo(other.isSetDouble_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_val, other.double_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNull_val()).compareTo(other.isSetNull_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_val, other.null_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRef_val()).compareTo(other.isSetRef_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRef_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ref_val, other.ref_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArray_val()).compareTo(other.isSetArray_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArray_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.array_val, other.array_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JSONField(");
    boolean first = true;

    if (isSetString_val()) {
      sb.append("string_val:");
      if (this.string_val == null) {
        sb.append("null");
      } else {
        sb.append(this.string_val);
      }
      first = false;
    }
    if (isSetBool_val()) {
      if (!first) sb.append(", ");
      sb.append("bool_val:");
      sb.append(this.bool_val);
      first = false;
    }
    if (isSetI32_val()) {
      if (!first) sb.append(", ");
      sb.append("i32_val:");
      sb.append(this.i32_val);
      first = false;
    }
    if (isSetI64_val()) {
      if (!first) sb.append(", ");
      sb.append("i64_val:");
      sb.append(this.i64_val);
      first = false;
    }
    if (isSetDouble_val()) {
      if (!first) sb.append(", ");
      sb.append("double_val:");
      sb.append(this.double_val);
      first = false;
    }
    if (isSetNull_val()) {
      if (!first) sb.append(", ");
      sb.append("null_val:");
      sb.append(this.null_val);
      first = false;
    }
    if (isSetRef_val()) {
      if (!first) sb.append(", ");
      sb.append("ref_val:");
      sb.append(this.ref_val);
      first = false;
    }
    if (isSetArray_val()) {
      if (!first) sb.append(", ");
      sb.append("array_val:");
      if (this.array_val == null) {
        sb.append("null");
      } else {
        sb.append(this.array_val);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JSONFieldStandardSchemeFactory implements SchemeFactory {
    public JSONFieldStandardScheme getScheme() {
      return new JSONFieldStandardScheme();
    }
  }

  private static class JSONFieldStandardScheme extends StandardScheme<JSONField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JSONField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRING_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_val = iprot.readString();
              struct.setString_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bool_val = iprot.readBool();
              struct.setBool_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I32_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32_val = iprot.readI32();
              struct.setI32_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I64_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64_val = iprot.readI64();
              struct.setI64_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DOUBLE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_val = iprot.readDouble();
              struct.setDouble_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NULL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.null_val = iprot.readBool();
              struct.setNull_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REF_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ref_val = iprot.readI32();
              struct.setRef_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ARRAY_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.array_val = new ArrayList<Integer>(_list112.size);
                for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                {
                  int _elem114;
                  _elem114 = iprot.readI32();
                  struct.array_val.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setArray_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JSONField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.string_val != null) {
        if (struct.isSetString_val()) {
          oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
          oprot.writeString(struct.string_val);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBool_val()) {
        oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
        oprot.writeBool(struct.bool_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI32_val()) {
        oprot.writeFieldBegin(I32_VAL_FIELD_DESC);
        oprot.writeI32(struct.i32_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI64_val()) {
        oprot.writeFieldBegin(I64_VAL_FIELD_DESC);
        oprot.writeI64(struct.i64_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDouble_val()) {
        oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(struct.double_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNull_val()) {
        oprot.writeFieldBegin(NULL_VAL_FIELD_DESC);
        oprot.writeBool(struct.null_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRef_val()) {
        oprot.writeFieldBegin(REF_VAL_FIELD_DESC);
        oprot.writeI32(struct.ref_val);
        oprot.writeFieldEnd();
      }
      if (struct.array_val != null) {
        if (struct.isSetArray_val()) {
          oprot.writeFieldBegin(ARRAY_VAL_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.array_val.size()));
            for (int _iter115 : struct.array_val)
            {
              oprot.writeI32(_iter115);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JSONFieldTupleSchemeFactory implements SchemeFactory {
    public JSONFieldTupleScheme getScheme() {
      return new JSONFieldTupleScheme();
    }
  }

  private static class JSONFieldTupleScheme extends TupleScheme<JSONField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JSONField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetString_val()) {
        optionals.set(0);
      }
      if (struct.isSetBool_val()) {
        optionals.set(1);
      }
      if (struct.isSetI32_val()) {
        optionals.set(2);
      }
      if (struct.isSetI64_val()) {
        optionals.set(3);
      }
      if (struct.isSetDouble_val()) {
        optionals.set(4);
      }
      if (struct.isSetNull_val()) {
        optionals.set(5);
      }
      if (struct.isSetRef_val()) {
        optionals.set(6);
      }
      if (struct.isSetArray_val()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetString_val()) {
        oprot.writeString(struct.string_val);
      }
      if (struct.isSetBool_val()) {
        oprot.writeBool(struct.bool_val);
      }
      if (struct.isSetI32_val()) {
        oprot.writeI32(struct.i32_val);
      }
      if (struct.isSetI64_val()) {
        oprot.writeI64(struct.i64_val);
      }
      if (struct.isSetDouble_val()) {
        oprot.writeDouble(struct.double_val);
      }
      if (struct.isSetNull_val()) {
        oprot.writeBool(struct.null_val);
      }
      if (struct.isSetRef_val()) {
        oprot.writeI32(struct.ref_val);
      }
      if (struct.isSetArray_val()) {
        {
          oprot.writeI32(struct.array_val.size());
          for (int _iter116 : struct.array_val)
          {
            oprot.writeI32(_iter116);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JSONField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.string_val = iprot.readString();
        struct.setString_valIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bool_val = iprot.readBool();
        struct.setBool_valIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i32_val = iprot.readI32();
        struct.setI32_valIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i64_val = iprot.readI64();
        struct.setI64_valIsSet(true);
      }
      if (incoming.get(4)) {
        struct.double_val = iprot.readDouble();
        struct.setDouble_valIsSet(true);
      }
      if (incoming.get(5)) {
        struct.null_val = iprot.readBool();
        struct.setNull_valIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ref_val = iprot.readI32();
        struct.setRef_valIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.array_val = new ArrayList<Integer>(_list117.size);
          for (int _i118 = 0; _i118 < _list117.size; ++_i118)
          {
            int _elem119;
            _elem119 = iprot.readI32();
            struct.array_val.add(_elem119);
          }
        }
        struct.setArray_valIsSet(true);
      }
    }
  }

}

