/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.pivotal.gemfirexd.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GFXDException extends TException implements org.apache.thrift.TBase<GFXDException, GFXDException._Fields>, java.io.Serializable, Comparable<GFXDException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GFXDException");

  private static final org.apache.thrift.protocol.TField EXCEPTION_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SERVER_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("serverInfo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NEXT_EXCEPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("nextExceptions", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GFXDExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GFXDExceptionTupleSchemeFactory());
  }

  public GFXDExceptionData exceptionData; // required
  public String serverInfo; // required
  public List<GFXDExceptionData> nextExceptions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCEPTION_DATA((short)1, "exceptionData"),
    SERVER_INFO((short)2, "serverInfo"),
    NEXT_EXCEPTIONS((short)3, "nextExceptions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCEPTION_DATA
          return EXCEPTION_DATA;
        case 2: // SERVER_INFO
          return SERVER_INFO;
        case 3: // NEXT_EXCEPTIONS
          return NEXT_EXCEPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.NEXT_EXCEPTIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCEPTION_DATA, new org.apache.thrift.meta_data.FieldMetaData("exceptionData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GFXDExceptionData.class)));
    tmpMap.put(_Fields.SERVER_INFO, new org.apache.thrift.meta_data.FieldMetaData("serverInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEXT_EXCEPTIONS, new org.apache.thrift.meta_data.FieldMetaData("nextExceptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GFXDExceptionData.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GFXDException.class, metaDataMap);
  }

  public GFXDException() {
  }

  public GFXDException(
    GFXDExceptionData exceptionData,
    String serverInfo)
  {
    this();
    this.exceptionData = exceptionData;
    this.serverInfo = serverInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GFXDException(GFXDException other) {
    if (other.isSetExceptionData()) {
      this.exceptionData = new GFXDExceptionData(other.exceptionData);
    }
    if (other.isSetServerInfo()) {
      this.serverInfo = other.serverInfo;
    }
    if (other.isSetNextExceptions()) {
      List<GFXDExceptionData> __this__nextExceptions = new ArrayList<GFXDExceptionData>(other.nextExceptions.size());
      for (GFXDExceptionData other_element : other.nextExceptions) {
        __this__nextExceptions.add(new GFXDExceptionData(other_element));
      }
      this.nextExceptions = __this__nextExceptions;
    }
  }

  public GFXDException deepCopy() {
    return new GFXDException(this);
  }

  @Override
  public void clear() {
    this.exceptionData = null;
    this.serverInfo = null;
    this.nextExceptions = null;
  }

  public GFXDExceptionData getExceptionData() {
    return this.exceptionData;
  }

  public GFXDException setExceptionData(GFXDExceptionData exceptionData) {
    this.exceptionData = exceptionData;
    return this;
  }

  public void unsetExceptionData() {
    this.exceptionData = null;
  }

  /** Returns true if field exceptionData is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionData() {
    return this.exceptionData != null;
  }

  public void setExceptionDataIsSet(boolean value) {
    if (!value) {
      this.exceptionData = null;
    }
  }

  public String getServerInfo() {
    return this.serverInfo;
  }

  public GFXDException setServerInfo(String serverInfo) {
    this.serverInfo = serverInfo;
    return this;
  }

  public void unsetServerInfo() {
    this.serverInfo = null;
  }

  /** Returns true if field serverInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetServerInfo() {
    return this.serverInfo != null;
  }

  public void setServerInfoIsSet(boolean value) {
    if (!value) {
      this.serverInfo = null;
    }
  }

  public int getNextExceptionsSize() {
    return (this.nextExceptions == null) ? 0 : this.nextExceptions.size();
  }

  public java.util.Iterator<GFXDExceptionData> getNextExceptionsIterator() {
    return (this.nextExceptions == null) ? null : this.nextExceptions.iterator();
  }

  public void addToNextExceptions(GFXDExceptionData elem) {
    if (this.nextExceptions == null) {
      this.nextExceptions = new ArrayList<GFXDExceptionData>();
    }
    this.nextExceptions.add(elem);
  }

  public List<GFXDExceptionData> getNextExceptions() {
    return this.nextExceptions;
  }

  public GFXDException setNextExceptions(List<GFXDExceptionData> nextExceptions) {
    this.nextExceptions = nextExceptions;
    return this;
  }

  public void unsetNextExceptions() {
    this.nextExceptions = null;
  }

  /** Returns true if field nextExceptions is set (has been assigned a value) and false otherwise */
  public boolean isSetNextExceptions() {
    return this.nextExceptions != null;
  }

  public void setNextExceptionsIsSet(boolean value) {
    if (!value) {
      this.nextExceptions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCEPTION_DATA:
      if (value == null) {
        unsetExceptionData();
      } else {
        setExceptionData((GFXDExceptionData)value);
      }
      break;

    case SERVER_INFO:
      if (value == null) {
        unsetServerInfo();
      } else {
        setServerInfo((String)value);
      }
      break;

    case NEXT_EXCEPTIONS:
      if (value == null) {
        unsetNextExceptions();
      } else {
        setNextExceptions((List<GFXDExceptionData>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCEPTION_DATA:
      return getExceptionData();

    case SERVER_INFO:
      return getServerInfo();

    case NEXT_EXCEPTIONS:
      return getNextExceptions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCEPTION_DATA:
      return isSetExceptionData();
    case SERVER_INFO:
      return isSetServerInfo();
    case NEXT_EXCEPTIONS:
      return isSetNextExceptions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GFXDException)
      return this.equals((GFXDException)that);
    return false;
  }

  public boolean equals(GFXDException that) {
    if (that == null)
      return false;

    boolean this_present_exceptionData = true && this.isSetExceptionData();
    boolean that_present_exceptionData = true && that.isSetExceptionData();
    if (this_present_exceptionData || that_present_exceptionData) {
      if (!(this_present_exceptionData && that_present_exceptionData))
        return false;
      if (!this.exceptionData.equals(that.exceptionData))
        return false;
    }

    boolean this_present_serverInfo = true && this.isSetServerInfo();
    boolean that_present_serverInfo = true && that.isSetServerInfo();
    if (this_present_serverInfo || that_present_serverInfo) {
      if (!(this_present_serverInfo && that_present_serverInfo))
        return false;
      if (!this.serverInfo.equals(that.serverInfo))
        return false;
    }

    boolean this_present_nextExceptions = true && this.isSetNextExceptions();
    boolean that_present_nextExceptions = true && that.isSetNextExceptions();
    if (this_present_nextExceptions || that_present_nextExceptions) {
      if (!(this_present_nextExceptions && that_present_nextExceptions))
        return false;
      if (!this.nextExceptions.equals(that.nextExceptions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GFXDException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExceptionData()).compareTo(other.isSetExceptionData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionData, other.exceptionData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerInfo()).compareTo(other.isSetServerInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverInfo, other.serverInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextExceptions()).compareTo(other.isSetNextExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextExceptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextExceptions, other.nextExceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GFXDException(");
    boolean first = true;

    sb.append("exceptionData:");
    if (this.exceptionData == null) {
      sb.append("null");
    } else {
      sb.append(this.exceptionData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverInfo:");
    if (this.serverInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.serverInfo);
    }
    first = false;
    if (isSetNextExceptions()) {
      if (!first) sb.append(", ");
      sb.append("nextExceptions:");
      if (this.nextExceptions == null) {
        sb.append("null");
      } else {
        sb.append(this.nextExceptions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (exceptionData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'exceptionData' was not present! Struct: " + toString());
    }
    if (serverInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'serverInfo' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (exceptionData != null) {
      exceptionData.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GFXDExceptionStandardSchemeFactory implements SchemeFactory {
    public GFXDExceptionStandardScheme getScheme() {
      return new GFXDExceptionStandardScheme();
    }
  }

  private static class GFXDExceptionStandardScheme extends StandardScheme<GFXDException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GFXDException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCEPTION_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.exceptionData = new GFXDExceptionData();
              struct.exceptionData.read(iprot);
              struct.setExceptionDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SERVER_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serverInfo = iprot.readString();
              struct.setServerInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NEXT_EXCEPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list250 = iprot.readListBegin();
                struct.nextExceptions = new ArrayList<GFXDExceptionData>(_list250.size);
                for (int _i251 = 0; _i251 < _list250.size; ++_i251)
                {
                  GFXDExceptionData _elem252;
                  _elem252 = new GFXDExceptionData();
                  _elem252.read(iprot);
                  struct.nextExceptions.add(_elem252);
                }
                iprot.readListEnd();
              }
              struct.setNextExceptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GFXDException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exceptionData != null) {
        oprot.writeFieldBegin(EXCEPTION_DATA_FIELD_DESC);
        struct.exceptionData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.serverInfo != null) {
        oprot.writeFieldBegin(SERVER_INFO_FIELD_DESC);
        oprot.writeString(struct.serverInfo);
        oprot.writeFieldEnd();
      }
      if (struct.nextExceptions != null) {
        if (struct.isSetNextExceptions()) {
          oprot.writeFieldBegin(NEXT_EXCEPTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.nextExceptions.size()));
            for (GFXDExceptionData _iter253 : struct.nextExceptions)
            {
              _iter253.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GFXDExceptionTupleSchemeFactory implements SchemeFactory {
    public GFXDExceptionTupleScheme getScheme() {
      return new GFXDExceptionTupleScheme();
    }
  }

  private static class GFXDExceptionTupleScheme extends TupleScheme<GFXDException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GFXDException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.exceptionData.write(oprot);
      oprot.writeString(struct.serverInfo);
      BitSet optionals = new BitSet();
      if (struct.isSetNextExceptions()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetNextExceptions()) {
        {
          oprot.writeI32(struct.nextExceptions.size());
          for (GFXDExceptionData _iter254 : struct.nextExceptions)
          {
            _iter254.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GFXDException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.exceptionData = new GFXDExceptionData();
      struct.exceptionData.read(iprot);
      struct.setExceptionDataIsSet(true);
      struct.serverInfo = iprot.readString();
      struct.setServerInfoIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list255 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.nextExceptions = new ArrayList<GFXDExceptionData>(_list255.size);
          for (int _i256 = 0; _i256 < _list255.size; ++_i256)
          {
            GFXDExceptionData _elem257;
            _elem257 = new GFXDExceptionData();
            _elem257.read(iprot);
            struct.nextExceptions.add(_elem257);
          }
        }
        struct.setNextExceptionsIsSet(true);
      }
    }
  }

}

