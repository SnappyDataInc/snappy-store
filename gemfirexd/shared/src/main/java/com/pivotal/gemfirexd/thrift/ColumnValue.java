/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.pivotal.gemfirexd.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ColumnValue implements org.apache.thrift.TBase<ColumnValue, ColumnValue._Fields>, java.io.Serializable, Comparable<ColumnValue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnValue");

  private static final org.apache.thrift.protocol.TField BOOL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bool_val", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("byte_val", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField I16_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i16_val", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField I32_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i32_val", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField I64_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("i64_val", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField FLOAT_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("float_val", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DOUBLE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("double_val", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField STRING_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("string_val", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DECIMAL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("decimal_val", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField DATE_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("date_val", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField TIME_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("time_val", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp_val", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField BINARY_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("binary_val", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField BLOB_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("blob_val", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField CLOB_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("clob_val", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField NULL_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("null_val", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField PDX_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("pdx_val", org.apache.thrift.protocol.TType.STRUCT, (short)17);
  private static final org.apache.thrift.protocol.TField JSON_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("json_val", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField JAVA_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("java_val", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ColumnValueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ColumnValueTupleSchemeFactory());
  }

  public boolean bool_val; // optional
  public byte byte_val; // optional
  public short i16_val; // optional
  public int i32_val; // optional
  public long i64_val; // optional
  public int float_val; // optional
  public double double_val; // optional
  public String string_val; // optional
  public Decimal decimal_val; // optional
  public DateTime date_val; // optional
  public DateTime time_val; // optional
  public Timestamp timestamp_val; // optional
  public ByteBuffer binary_val; // optional
  public BlobChunk blob_val; // optional
  public ClobChunk clob_val; // optional
  public boolean null_val; // optional
  public PDXObject pdx_val; // optional
  public JSONObject json_val; // optional
  public ByteBuffer java_val; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_VAL((short)1, "bool_val"),
    BYTE_VAL((short)2, "byte_val"),
    I16_VAL((short)3, "i16_val"),
    I32_VAL((short)4, "i32_val"),
    I64_VAL((short)5, "i64_val"),
    FLOAT_VAL((short)6, "float_val"),
    DOUBLE_VAL((short)7, "double_val"),
    STRING_VAL((short)8, "string_val"),
    DECIMAL_VAL((short)9, "decimal_val"),
    DATE_VAL((short)10, "date_val"),
    TIME_VAL((short)11, "time_val"),
    TIMESTAMP_VAL((short)12, "timestamp_val"),
    BINARY_VAL((short)13, "binary_val"),
    BLOB_VAL((short)14, "blob_val"),
    CLOB_VAL((short)15, "clob_val"),
    NULL_VAL((short)16, "null_val"),
    PDX_VAL((short)17, "pdx_val"),
    JSON_VAL((short)18, "json_val"),
    JAVA_VAL((short)19, "java_val");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_VAL
          return BOOL_VAL;
        case 2: // BYTE_VAL
          return BYTE_VAL;
        case 3: // I16_VAL
          return I16_VAL;
        case 4: // I32_VAL
          return I32_VAL;
        case 5: // I64_VAL
          return I64_VAL;
        case 6: // FLOAT_VAL
          return FLOAT_VAL;
        case 7: // DOUBLE_VAL
          return DOUBLE_VAL;
        case 8: // STRING_VAL
          return STRING_VAL;
        case 9: // DECIMAL_VAL
          return DECIMAL_VAL;
        case 10: // DATE_VAL
          return DATE_VAL;
        case 11: // TIME_VAL
          return TIME_VAL;
        case 12: // TIMESTAMP_VAL
          return TIMESTAMP_VAL;
        case 13: // BINARY_VAL
          return BINARY_VAL;
        case 14: // BLOB_VAL
          return BLOB_VAL;
        case 15: // CLOB_VAL
          return CLOB_VAL;
        case 16: // NULL_VAL
          return NULL_VAL;
        case 17: // PDX_VAL
          return PDX_VAL;
        case 18: // JSON_VAL
          return JSON_VAL;
        case 19: // JAVA_VAL
          return JAVA_VAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final int __BOOL_VAL_ISSET_ID = 0;
  public static final int __BYTE_VAL_ISSET_ID = 1;
  public static final int __I16_VAL_ISSET_ID = 2;
  public static final int __I32_VAL_ISSET_ID = 3;
  public static final int __I64_VAL_ISSET_ID = 4;
  public static final int __FLOAT_VAL_ISSET_ID = 5;
  public static final int __DOUBLE_VAL_ISSET_ID = 6;
  public static final int __NULL_VAL_ISSET_ID = 7;
  public byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BOOL_VAL,_Fields.BYTE_VAL,_Fields.I16_VAL,_Fields.I32_VAL,_Fields.I64_VAL,_Fields.FLOAT_VAL,_Fields.DOUBLE_VAL,_Fields.STRING_VAL,_Fields.DECIMAL_VAL,_Fields.DATE_VAL,_Fields.TIME_VAL,_Fields.TIMESTAMP_VAL,_Fields.BINARY_VAL,_Fields.BLOB_VAL,_Fields.CLOB_VAL,_Fields.NULL_VAL,_Fields.PDX_VAL,_Fields.JSON_VAL,_Fields.JAVA_VAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_VAL, new org.apache.thrift.meta_data.FieldMetaData("bool_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_VAL, new org.apache.thrift.meta_data.FieldMetaData("byte_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.I16_VAL, new org.apache.thrift.meta_data.FieldMetaData("i16_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I32_VAL, new org.apache.thrift.meta_data.FieldMetaData("i32_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_VAL, new org.apache.thrift.meta_data.FieldMetaData("i64_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FLOAT_VAL, new org.apache.thrift.meta_data.FieldMetaData("float_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOUBLE_VAL, new org.apache.thrift.meta_data.FieldMetaData("double_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_VAL, new org.apache.thrift.meta_data.FieldMetaData("string_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DECIMAL_VAL, new org.apache.thrift.meta_data.FieldMetaData("decimal_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Decimal.class)));
    tmpMap.put(_Fields.DATE_VAL, new org.apache.thrift.meta_data.FieldMetaData("date_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateTime.class)));
    tmpMap.put(_Fields.TIME_VAL, new org.apache.thrift.meta_data.FieldMetaData("time_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DateTime.class)));
    tmpMap.put(_Fields.TIMESTAMP_VAL, new org.apache.thrift.meta_data.FieldMetaData("timestamp_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Timestamp.class)));
    tmpMap.put(_Fields.BINARY_VAL, new org.apache.thrift.meta_data.FieldMetaData("binary_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BLOB_VAL, new org.apache.thrift.meta_data.FieldMetaData("blob_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BlobChunk.class)));
    tmpMap.put(_Fields.CLOB_VAL, new org.apache.thrift.meta_data.FieldMetaData("clob_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClobChunk.class)));
    tmpMap.put(_Fields.NULL_VAL, new org.apache.thrift.meta_data.FieldMetaData("null_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PDX_VAL, new org.apache.thrift.meta_data.FieldMetaData("pdx_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PDXObject.class)));
    tmpMap.put(_Fields.JSON_VAL, new org.apache.thrift.meta_data.FieldMetaData("json_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, JSONObject.class)));
    tmpMap.put(_Fields.JAVA_VAL, new org.apache.thrift.meta_data.FieldMetaData("java_val", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnValue.class, metaDataMap);
  }

  public ColumnValue() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ColumnValue(ColumnValue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bool_val = other.bool_val;
    this.byte_val = other.byte_val;
    this.i16_val = other.i16_val;
    this.i32_val = other.i32_val;
    this.i64_val = other.i64_val;
    this.float_val = other.float_val;
    this.double_val = other.double_val;
    if (other.isSetString_val()) {
      this.string_val = other.string_val;
    }
    if (other.isSetDecimal_val()) {
      this.decimal_val = new Decimal(other.decimal_val);
    }
    if (other.isSetDate_val()) {
      this.date_val = new DateTime(other.date_val);
    }
    if (other.isSetTime_val()) {
      this.time_val = new DateTime(other.time_val);
    }
    if (other.isSetTimestamp_val()) {
      this.timestamp_val = new Timestamp(other.timestamp_val);
    }
    if (other.isSetBinary_val()) {
      this.binary_val = org.apache.thrift.TBaseHelper.copyBinary(other.binary_val);
;
    }
    if (other.isSetBlob_val()) {
      this.blob_val = new BlobChunk(other.blob_val);
    }
    if (other.isSetClob_val()) {
      this.clob_val = new ClobChunk(other.clob_val);
    }
    this.null_val = other.null_val;
    if (other.isSetPdx_val()) {
      this.pdx_val = new PDXObject(other.pdx_val);
    }
    if (other.isSetJson_val()) {
      this.json_val = new JSONObject(other.json_val);
    }
    if (other.isSetJava_val()) {
      this.java_val = org.apache.thrift.TBaseHelper.copyBinary(other.java_val);
;
    }
  }

  public ColumnValue deepCopy() {
    return new ColumnValue(this);
  }

  @Override
  public void clear() {
    setBool_valIsSet(false);
    this.bool_val = false;
    setByte_valIsSet(false);
    this.byte_val = 0;
    setI16_valIsSet(false);
    this.i16_val = 0;
    setI32_valIsSet(false);
    this.i32_val = 0;
    setI64_valIsSet(false);
    this.i64_val = 0;
    setFloat_valIsSet(false);
    this.float_val = 0;
    setDouble_valIsSet(false);
    this.double_val = 0.0;
    this.string_val = null;
    this.decimal_val = null;
    this.date_val = null;
    this.time_val = null;
    this.timestamp_val = null;
    this.binary_val = null;
    this.blob_val = null;
    this.clob_val = null;
    setNull_valIsSet(false);
    this.null_val = false;
    this.pdx_val = null;
    this.json_val = null;
    this.java_val = null;
  }

  public boolean isBool_val() {
    return this.bool_val;
  }

  public ColumnValue setBool_val(boolean bool_val) {
    this.bool_val = bool_val;
    setBool_valIsSet(true);
    return this;
  }

  public void unsetBool_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  /** Returns true if field bool_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_val() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOL_VAL_ISSET_ID);
  }

  public void setBool_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOL_VAL_ISSET_ID, value);
  }

  public byte getByte_val() {
    return this.byte_val;
  }

  public ColumnValue setByte_val(byte byte_val) {
    this.byte_val = byte_val;
    setByte_valIsSet(true);
    return this;
  }

  public void unsetByte_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTE_VAL_ISSET_ID);
  }

  /** Returns true if field byte_val is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_val() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTE_VAL_ISSET_ID);
  }

  public void setByte_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTE_VAL_ISSET_ID, value);
  }

  public short getI16_val() {
    return this.i16_val;
  }

  public ColumnValue setI16_val(short i16_val) {
    this.i16_val = i16_val;
    setI16_valIsSet(true);
    return this;
  }

  public void unsetI16_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I16_VAL_ISSET_ID);
  }

  /** Returns true if field i16_val is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_val() {
    return EncodingUtils.testBit(__isset_bitfield, __I16_VAL_ISSET_ID);
  }

  public void setI16_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I16_VAL_ISSET_ID, value);
  }

  public int getI32_val() {
    return this.i32_val;
  }

  public ColumnValue setI32_val(int i32_val) {
    this.i32_val = i32_val;
    setI32_valIsSet(true);
    return this;
  }

  public void unsetI32_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I32_VAL_ISSET_ID);
  }

  /** Returns true if field i32_val is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_val() {
    return EncodingUtils.testBit(__isset_bitfield, __I32_VAL_ISSET_ID);
  }

  public void setI32_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I32_VAL_ISSET_ID, value);
  }

  public long getI64_val() {
    return this.i64_val;
  }

  public ColumnValue setI64_val(long i64_val) {
    this.i64_val = i64_val;
    setI64_valIsSet(true);
    return this;
  }

  public void unsetI64_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64_VAL_ISSET_ID);
  }

  /** Returns true if field i64_val is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_val() {
    return EncodingUtils.testBit(__isset_bitfield, __I64_VAL_ISSET_ID);
  }

  public void setI64_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64_VAL_ISSET_ID, value);
  }

  public int getFloat_val() {
    return this.float_val;
  }

  public ColumnValue setFloat_val(int float_val) {
    this.float_val = float_val;
    setFloat_valIsSet(true);
    return this;
  }

  public void unsetFloat_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLOAT_VAL_ISSET_ID);
  }

  /** Returns true if field float_val is set (has been assigned a value) and false otherwise */
  public boolean isSetFloat_val() {
    return EncodingUtils.testBit(__isset_bitfield, __FLOAT_VAL_ISSET_ID);
  }

  public void setFloat_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLOAT_VAL_ISSET_ID, value);
  }

  public double getDouble_val() {
    return this.double_val;
  }

  public ColumnValue setDouble_val(double double_val) {
    this.double_val = double_val;
    setDouble_valIsSet(true);
    return this;
  }

  public void unsetDouble_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  /** Returns true if field double_val is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_val() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID);
  }

  public void setDouble_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE_VAL_ISSET_ID, value);
  }

  public String getString_val() {
    return this.string_val;
  }

  public ColumnValue setString_val(String string_val) {
    this.string_val = string_val;
    return this;
  }

  public void unsetString_val() {
    this.string_val = null;
  }

  /** Returns true if field string_val is set (has been assigned a value) and false otherwise */
  public boolean isSetString_val() {
    return this.string_val != null;
  }

  public void setString_valIsSet(boolean value) {
    if (!value) {
      this.string_val = null;
    }
  }

  public Decimal getDecimal_val() {
    return this.decimal_val;
  }

  public ColumnValue setDecimal_val(Decimal decimal_val) {
    this.decimal_val = decimal_val;
    return this;
  }

  public void unsetDecimal_val() {
    this.decimal_val = null;
  }

  /** Returns true if field decimal_val is set (has been assigned a value) and false otherwise */
  public boolean isSetDecimal_val() {
    return this.decimal_val != null;
  }

  public void setDecimal_valIsSet(boolean value) {
    if (!value) {
      this.decimal_val = null;
    }
  }

  public DateTime getDate_val() {
    return this.date_val;
  }

  public ColumnValue setDate_val(DateTime date_val) {
    this.date_val = date_val;
    return this;
  }

  public void unsetDate_val() {
    this.date_val = null;
  }

  /** Returns true if field date_val is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_val() {
    return this.date_val != null;
  }

  public void setDate_valIsSet(boolean value) {
    if (!value) {
      this.date_val = null;
    }
  }

  public DateTime getTime_val() {
    return this.time_val;
  }

  public ColumnValue setTime_val(DateTime time_val) {
    this.time_val = time_val;
    return this;
  }

  public void unsetTime_val() {
    this.time_val = null;
  }

  /** Returns true if field time_val is set (has been assigned a value) and false otherwise */
  public boolean isSetTime_val() {
    return this.time_val != null;
  }

  public void setTime_valIsSet(boolean value) {
    if (!value) {
      this.time_val = null;
    }
  }

  public Timestamp getTimestamp_val() {
    return this.timestamp_val;
  }

  public ColumnValue setTimestamp_val(Timestamp timestamp_val) {
    this.timestamp_val = timestamp_val;
    return this;
  }

  public void unsetTimestamp_val() {
    this.timestamp_val = null;
  }

  /** Returns true if field timestamp_val is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp_val() {
    return this.timestamp_val != null;
  }

  public void setTimestamp_valIsSet(boolean value) {
    if (!value) {
      this.timestamp_val = null;
    }
  }

  public byte[] getBinary_val() {
    setBinary_val(org.apache.thrift.TBaseHelper.rightSize(binary_val));
    return binary_val == null ? null : binary_val.array();
  }

  public ByteBuffer bufferForBinary_val() {
    return binary_val;
  }

  public ColumnValue setBinary_val(byte[] binary_val) {
    setBinary_val(binary_val == null ? (ByteBuffer)null : ByteBuffer.wrap(binary_val));
    return this;
  }

  public ColumnValue setBinary_val(ByteBuffer binary_val) {
    this.binary_val = binary_val;
    return this;
  }

  public void unsetBinary_val() {
    this.binary_val = null;
  }

  /** Returns true if field binary_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_val() {
    return this.binary_val != null;
  }

  public void setBinary_valIsSet(boolean value) {
    if (!value) {
      this.binary_val = null;
    }
  }

  public BlobChunk getBlob_val() {
    return this.blob_val;
  }

  public ColumnValue setBlob_val(BlobChunk blob_val) {
    this.blob_val = blob_val;
    return this;
  }

  public void unsetBlob_val() {
    this.blob_val = null;
  }

  /** Returns true if field blob_val is set (has been assigned a value) and false otherwise */
  public boolean isSetBlob_val() {
    return this.blob_val != null;
  }

  public void setBlob_valIsSet(boolean value) {
    if (!value) {
      this.blob_val = null;
    }
  }

  public ClobChunk getClob_val() {
    return this.clob_val;
  }

  public ColumnValue setClob_val(ClobChunk clob_val) {
    this.clob_val = clob_val;
    return this;
  }

  public void unsetClob_val() {
    this.clob_val = null;
  }

  /** Returns true if field clob_val is set (has been assigned a value) and false otherwise */
  public boolean isSetClob_val() {
    return this.clob_val != null;
  }

  public void setClob_valIsSet(boolean value) {
    if (!value) {
      this.clob_val = null;
    }
  }

  public boolean isNull_val() {
    return this.null_val;
  }

  public ColumnValue setNull_val(boolean null_val) {
    this.null_val = null_val;
    setNull_valIsSet(true);
    return this;
  }

  public void unsetNull_val() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NULL_VAL_ISSET_ID);
  }

  /** Returns true if field null_val is set (has been assigned a value) and false otherwise */
  public boolean isSetNull_val() {
    return EncodingUtils.testBit(__isset_bitfield, __NULL_VAL_ISSET_ID);
  }

  public void setNull_valIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NULL_VAL_ISSET_ID, value);
  }

  public PDXObject getPdx_val() {
    return this.pdx_val;
  }

  public ColumnValue setPdx_val(PDXObject pdx_val) {
    this.pdx_val = pdx_val;
    return this;
  }

  public void unsetPdx_val() {
    this.pdx_val = null;
  }

  /** Returns true if field pdx_val is set (has been assigned a value) and false otherwise */
  public boolean isSetPdx_val() {
    return this.pdx_val != null;
  }

  public void setPdx_valIsSet(boolean value) {
    if (!value) {
      this.pdx_val = null;
    }
  }

  public JSONObject getJson_val() {
    return this.json_val;
  }

  public ColumnValue setJson_val(JSONObject json_val) {
    this.json_val = json_val;
    return this;
  }

  public void unsetJson_val() {
    this.json_val = null;
  }

  /** Returns true if field json_val is set (has been assigned a value) and false otherwise */
  public boolean isSetJson_val() {
    return this.json_val != null;
  }

  public void setJson_valIsSet(boolean value) {
    if (!value) {
      this.json_val = null;
    }
  }

  public byte[] getJava_val() {
    setJava_val(org.apache.thrift.TBaseHelper.rightSize(java_val));
    return java_val == null ? null : java_val.array();
  }

  public ByteBuffer bufferForJava_val() {
    return java_val;
  }

  public ColumnValue setJava_val(byte[] java_val) {
    setJava_val(java_val == null ? (ByteBuffer)null : ByteBuffer.wrap(java_val));
    return this;
  }

  public ColumnValue setJava_val(ByteBuffer java_val) {
    this.java_val = java_val;
    return this;
  }

  public void unsetJava_val() {
    this.java_val = null;
  }

  /** Returns true if field java_val is set (has been assigned a value) and false otherwise */
  public boolean isSetJava_val() {
    return this.java_val != null;
  }

  public void setJava_valIsSet(boolean value) {
    if (!value) {
      this.java_val = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_VAL:
      if (value == null) {
        unsetBool_val();
      } else {
        setBool_val((Boolean)value);
      }
      break;

    case BYTE_VAL:
      if (value == null) {
        unsetByte_val();
      } else {
        setByte_val((Byte)value);
      }
      break;

    case I16_VAL:
      if (value == null) {
        unsetI16_val();
      } else {
        setI16_val((Short)value);
      }
      break;

    case I32_VAL:
      if (value == null) {
        unsetI32_val();
      } else {
        setI32_val((Integer)value);
      }
      break;

    case I64_VAL:
      if (value == null) {
        unsetI64_val();
      } else {
        setI64_val((Long)value);
      }
      break;

    case FLOAT_VAL:
      if (value == null) {
        unsetFloat_val();
      } else {
        setFloat_val((Integer)value);
      }
      break;

    case DOUBLE_VAL:
      if (value == null) {
        unsetDouble_val();
      } else {
        setDouble_val((Double)value);
      }
      break;

    case STRING_VAL:
      if (value == null) {
        unsetString_val();
      } else {
        setString_val((String)value);
      }
      break;

    case DECIMAL_VAL:
      if (value == null) {
        unsetDecimal_val();
      } else {
        setDecimal_val((Decimal)value);
      }
      break;

    case DATE_VAL:
      if (value == null) {
        unsetDate_val();
      } else {
        setDate_val((DateTime)value);
      }
      break;

    case TIME_VAL:
      if (value == null) {
        unsetTime_val();
      } else {
        setTime_val((DateTime)value);
      }
      break;

    case TIMESTAMP_VAL:
      if (value == null) {
        unsetTimestamp_val();
      } else {
        setTimestamp_val((Timestamp)value);
      }
      break;

    case BINARY_VAL:
      if (value == null) {
        unsetBinary_val();
      } else {
        setBinary_val((ByteBuffer)value);
      }
      break;

    case BLOB_VAL:
      if (value == null) {
        unsetBlob_val();
      } else {
        setBlob_val((BlobChunk)value);
      }
      break;

    case CLOB_VAL:
      if (value == null) {
        unsetClob_val();
      } else {
        setClob_val((ClobChunk)value);
      }
      break;

    case NULL_VAL:
      if (value == null) {
        unsetNull_val();
      } else {
        setNull_val((Boolean)value);
      }
      break;

    case PDX_VAL:
      if (value == null) {
        unsetPdx_val();
      } else {
        setPdx_val((PDXObject)value);
      }
      break;

    case JSON_VAL:
      if (value == null) {
        unsetJson_val();
      } else {
        setJson_val((JSONObject)value);
      }
      break;

    case JAVA_VAL:
      if (value == null) {
        unsetJava_val();
      } else {
        setJava_val((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_VAL:
      return Boolean.valueOf(isBool_val());

    case BYTE_VAL:
      return Byte.valueOf(getByte_val());

    case I16_VAL:
      return Short.valueOf(getI16_val());

    case I32_VAL:
      return Integer.valueOf(getI32_val());

    case I64_VAL:
      return Long.valueOf(getI64_val());

    case FLOAT_VAL:
      return Integer.valueOf(getFloat_val());

    case DOUBLE_VAL:
      return Double.valueOf(getDouble_val());

    case STRING_VAL:
      return getString_val();

    case DECIMAL_VAL:
      return getDecimal_val();

    case DATE_VAL:
      return getDate_val();

    case TIME_VAL:
      return getTime_val();

    case TIMESTAMP_VAL:
      return getTimestamp_val();

    case BINARY_VAL:
      return getBinary_val();

    case BLOB_VAL:
      return getBlob_val();

    case CLOB_VAL:
      return getClob_val();

    case NULL_VAL:
      return Boolean.valueOf(isNull_val());

    case PDX_VAL:
      return getPdx_val();

    case JSON_VAL:
      return getJson_val();

    case JAVA_VAL:
      return getJava_val();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_VAL:
      return isSetBool_val();
    case BYTE_VAL:
      return isSetByte_val();
    case I16_VAL:
      return isSetI16_val();
    case I32_VAL:
      return isSetI32_val();
    case I64_VAL:
      return isSetI64_val();
    case FLOAT_VAL:
      return isSetFloat_val();
    case DOUBLE_VAL:
      return isSetDouble_val();
    case STRING_VAL:
      return isSetString_val();
    case DECIMAL_VAL:
      return isSetDecimal_val();
    case DATE_VAL:
      return isSetDate_val();
    case TIME_VAL:
      return isSetTime_val();
    case TIMESTAMP_VAL:
      return isSetTimestamp_val();
    case BINARY_VAL:
      return isSetBinary_val();
    case BLOB_VAL:
      return isSetBlob_val();
    case CLOB_VAL:
      return isSetClob_val();
    case NULL_VAL:
      return isSetNull_val();
    case PDX_VAL:
      return isSetPdx_val();
    case JSON_VAL:
      return isSetJson_val();
    case JAVA_VAL:
      return isSetJava_val();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ColumnValue)
      return this.equals((ColumnValue)that);
    return false;
  }

  public boolean equals(ColumnValue that) {
    if (that == null)
      return false;

    boolean this_present_bool_val = true && this.isSetBool_val();
    boolean that_present_bool_val = true && that.isSetBool_val();
    if (this_present_bool_val || that_present_bool_val) {
      if (!(this_present_bool_val && that_present_bool_val))
        return false;
      if (this.bool_val != that.bool_val)
        return false;
    }

    boolean this_present_byte_val = true && this.isSetByte_val();
    boolean that_present_byte_val = true && that.isSetByte_val();
    if (this_present_byte_val || that_present_byte_val) {
      if (!(this_present_byte_val && that_present_byte_val))
        return false;
      if (this.byte_val != that.byte_val)
        return false;
    }

    boolean this_present_i16_val = true && this.isSetI16_val();
    boolean that_present_i16_val = true && that.isSetI16_val();
    if (this_present_i16_val || that_present_i16_val) {
      if (!(this_present_i16_val && that_present_i16_val))
        return false;
      if (this.i16_val != that.i16_val)
        return false;
    }

    boolean this_present_i32_val = true && this.isSetI32_val();
    boolean that_present_i32_val = true && that.isSetI32_val();
    if (this_present_i32_val || that_present_i32_val) {
      if (!(this_present_i32_val && that_present_i32_val))
        return false;
      if (this.i32_val != that.i32_val)
        return false;
    }

    boolean this_present_i64_val = true && this.isSetI64_val();
    boolean that_present_i64_val = true && that.isSetI64_val();
    if (this_present_i64_val || that_present_i64_val) {
      if (!(this_present_i64_val && that_present_i64_val))
        return false;
      if (this.i64_val != that.i64_val)
        return false;
    }

    boolean this_present_float_val = true && this.isSetFloat_val();
    boolean that_present_float_val = true && that.isSetFloat_val();
    if (this_present_float_val || that_present_float_val) {
      if (!(this_present_float_val && that_present_float_val))
        return false;
      if (this.float_val != that.float_val)
        return false;
    }

    boolean this_present_double_val = true && this.isSetDouble_val();
    boolean that_present_double_val = true && that.isSetDouble_val();
    if (this_present_double_val || that_present_double_val) {
      if (!(this_present_double_val && that_present_double_val))
        return false;
      if (this.double_val != that.double_val)
        return false;
    }

    boolean this_present_string_val = true && this.isSetString_val();
    boolean that_present_string_val = true && that.isSetString_val();
    if (this_present_string_val || that_present_string_val) {
      if (!(this_present_string_val && that_present_string_val))
        return false;
      if (!this.string_val.equals(that.string_val))
        return false;
    }

    boolean this_present_decimal_val = true && this.isSetDecimal_val();
    boolean that_present_decimal_val = true && that.isSetDecimal_val();
    if (this_present_decimal_val || that_present_decimal_val) {
      if (!(this_present_decimal_val && that_present_decimal_val))
        return false;
      if (!this.decimal_val.equals(that.decimal_val))
        return false;
    }

    boolean this_present_date_val = true && this.isSetDate_val();
    boolean that_present_date_val = true && that.isSetDate_val();
    if (this_present_date_val || that_present_date_val) {
      if (!(this_present_date_val && that_present_date_val))
        return false;
      if (!this.date_val.equals(that.date_val))
        return false;
    }

    boolean this_present_time_val = true && this.isSetTime_val();
    boolean that_present_time_val = true && that.isSetTime_val();
    if (this_present_time_val || that_present_time_val) {
      if (!(this_present_time_val && that_present_time_val))
        return false;
      if (!this.time_val.equals(that.time_val))
        return false;
    }

    boolean this_present_timestamp_val = true && this.isSetTimestamp_val();
    boolean that_present_timestamp_val = true && that.isSetTimestamp_val();
    if (this_present_timestamp_val || that_present_timestamp_val) {
      if (!(this_present_timestamp_val && that_present_timestamp_val))
        return false;
      if (!this.timestamp_val.equals(that.timestamp_val))
        return false;
    }

    boolean this_present_binary_val = true && this.isSetBinary_val();
    boolean that_present_binary_val = true && that.isSetBinary_val();
    if (this_present_binary_val || that_present_binary_val) {
      if (!(this_present_binary_val && that_present_binary_val))
        return false;
      if (!this.binary_val.equals(that.binary_val))
        return false;
    }

    boolean this_present_blob_val = true && this.isSetBlob_val();
    boolean that_present_blob_val = true && that.isSetBlob_val();
    if (this_present_blob_val || that_present_blob_val) {
      if (!(this_present_blob_val && that_present_blob_val))
        return false;
      if (!this.blob_val.equals(that.blob_val))
        return false;
    }

    boolean this_present_clob_val = true && this.isSetClob_val();
    boolean that_present_clob_val = true && that.isSetClob_val();
    if (this_present_clob_val || that_present_clob_val) {
      if (!(this_present_clob_val && that_present_clob_val))
        return false;
      if (!this.clob_val.equals(that.clob_val))
        return false;
    }

    boolean this_present_null_val = true && this.isSetNull_val();
    boolean that_present_null_val = true && that.isSetNull_val();
    if (this_present_null_val || that_present_null_val) {
      if (!(this_present_null_val && that_present_null_val))
        return false;
      if (this.null_val != that.null_val)
        return false;
    }

    boolean this_present_pdx_val = true && this.isSetPdx_val();
    boolean that_present_pdx_val = true && that.isSetPdx_val();
    if (this_present_pdx_val || that_present_pdx_val) {
      if (!(this_present_pdx_val && that_present_pdx_val))
        return false;
      if (!this.pdx_val.equals(that.pdx_val))
        return false;
    }

    boolean this_present_json_val = true && this.isSetJson_val();
    boolean that_present_json_val = true && that.isSetJson_val();
    if (this_present_json_val || that_present_json_val) {
      if (!(this_present_json_val && that_present_json_val))
        return false;
      if (!this.json_val.equals(that.json_val))
        return false;
    }

    boolean this_present_java_val = true && this.isSetJava_val();
    boolean that_present_java_val = true && that.isSetJava_val();
    if (this_present_java_val || that_present_java_val) {
      if (!(this_present_java_val && that_present_java_val))
        return false;
      if (!this.java_val.equals(that.java_val))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ColumnValue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBool_val()).compareTo(other.isSetBool_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_val, other.bool_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_val()).compareTo(other.isSetByte_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_val, other.byte_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_val()).compareTo(other.isSetI16_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_val, other.i16_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_val()).compareTo(other.isSetI32_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_val, other.i32_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_val()).compareTo(other.isSetI64_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_val, other.i64_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFloat_val()).compareTo(other.isSetFloat_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFloat_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.float_val, other.float_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_val()).compareTo(other.isSetDouble_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_val, other.double_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_val()).compareTo(other.isSetString_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_val, other.string_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDecimal_val()).compareTo(other.isSetDecimal_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDecimal_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.decimal_val, other.decimal_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_val()).compareTo(other.isSetDate_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_val, other.date_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime_val()).compareTo(other.isSetTime_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time_val, other.time_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp_val()).compareTo(other.isSetTimestamp_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp_val, other.timestamp_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_val()).compareTo(other.isSetBinary_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_val, other.binary_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlob_val()).compareTo(other.isSetBlob_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlob_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blob_val, other.blob_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClob_val()).compareTo(other.isSetClob_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClob_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clob_val, other.clob_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNull_val()).compareTo(other.isSetNull_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNull_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.null_val, other.null_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPdx_val()).compareTo(other.isSetPdx_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPdx_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pdx_val, other.pdx_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJson_val()).compareTo(other.isSetJson_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJson_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.json_val, other.json_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetJava_val()).compareTo(other.isSetJava_val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJava_val()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.java_val, other.java_val);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ColumnValue(");
    boolean first = true;

    if (isSetBool_val()) {
      sb.append("bool_val:");
      sb.append(this.bool_val);
      first = false;
    }
    if (isSetByte_val()) {
      if (!first) sb.append(", ");
      sb.append("byte_val:");
      sb.append(this.byte_val);
      first = false;
    }
    if (isSetI16_val()) {
      if (!first) sb.append(", ");
      sb.append("i16_val:");
      sb.append(this.i16_val);
      first = false;
    }
    if (isSetI32_val()) {
      if (!first) sb.append(", ");
      sb.append("i32_val:");
      sb.append(this.i32_val);
      first = false;
    }
    if (isSetI64_val()) {
      if (!first) sb.append(", ");
      sb.append("i64_val:");
      sb.append(this.i64_val);
      first = false;
    }
    if (isSetFloat_val()) {
      if (!first) sb.append(", ");
      sb.append("float_val:");
      sb.append(this.float_val);
      first = false;
    }
    if (isSetDouble_val()) {
      if (!first) sb.append(", ");
      sb.append("double_val:");
      sb.append(this.double_val);
      first = false;
    }
    if (isSetString_val()) {
      if (!first) sb.append(", ");
      sb.append("string_val:");
      if (this.string_val == null) {
        sb.append("null");
      } else {
        sb.append(this.string_val);
      }
      first = false;
    }
    if (isSetDecimal_val()) {
      if (!first) sb.append(", ");
      sb.append("decimal_val:");
      if (this.decimal_val == null) {
        sb.append("null");
      } else {
        sb.append(this.decimal_val);
      }
      first = false;
    }
    if (isSetDate_val()) {
      if (!first) sb.append(", ");
      sb.append("date_val:");
      if (this.date_val == null) {
        sb.append("null");
      } else {
        sb.append(this.date_val);
      }
      first = false;
    }
    if (isSetTime_val()) {
      if (!first) sb.append(", ");
      sb.append("time_val:");
      if (this.time_val == null) {
        sb.append("null");
      } else {
        sb.append(this.time_val);
      }
      first = false;
    }
    if (isSetTimestamp_val()) {
      if (!first) sb.append(", ");
      sb.append("timestamp_val:");
      if (this.timestamp_val == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp_val);
      }
      first = false;
    }
    if (isSetBinary_val()) {
      if (!first) sb.append(", ");
      sb.append("binary_val:");
      if (this.binary_val == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.binary_val, sb);
      }
      first = false;
    }
    if (isSetBlob_val()) {
      if (!first) sb.append(", ");
      sb.append("blob_val:");
      if (this.blob_val == null) {
        sb.append("null");
      } else {
        sb.append(this.blob_val);
      }
      first = false;
    }
    if (isSetClob_val()) {
      if (!first) sb.append(", ");
      sb.append("clob_val:");
      if (this.clob_val == null) {
        sb.append("null");
      } else {
        sb.append(this.clob_val);
      }
      first = false;
    }
    if (isSetNull_val()) {
      if (!first) sb.append(", ");
      sb.append("null_val:");
      sb.append(this.null_val);
      first = false;
    }
    if (isSetPdx_val()) {
      if (!first) sb.append(", ");
      sb.append("pdx_val:");
      if (this.pdx_val == null) {
        sb.append("null");
      } else {
        sb.append(this.pdx_val);
      }
      first = false;
    }
    if (isSetJson_val()) {
      if (!first) sb.append(", ");
      sb.append("json_val:");
      if (this.json_val == null) {
        sb.append("null");
      } else {
        sb.append(this.json_val);
      }
      first = false;
    }
    if (isSetJava_val()) {
      if (!first) sb.append(", ");
      sb.append("java_val:");
      if (this.java_val == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.java_val, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (decimal_val != null) {
      decimal_val.validate();
    }
    if (date_val != null) {
      date_val.validate();
    }
    if (time_val != null) {
      time_val.validate();
    }
    if (timestamp_val != null) {
      timestamp_val.validate();
    }
    if (blob_val != null) {
      blob_val.validate();
    }
    if (clob_val != null) {
      clob_val.validate();
    }
    if (pdx_val != null) {
      pdx_val.validate();
    }
    if (json_val != null) {
      json_val.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ColumnValueStandardSchemeFactory implements SchemeFactory {
    public ColumnValueStandardScheme getScheme() {
      return new ColumnValueStandardScheme();
    }
  }

  private static class ColumnValueStandardScheme extends StandardScheme<ColumnValue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ColumnValue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bool_val = iprot.readBool();
              struct.setBool_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BYTE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byte_val = iprot.readByte();
              struct.setByte_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I16_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16_val = iprot.readI16();
              struct.setI16_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I32_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32_val = iprot.readI32();
              struct.setI32_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I64_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64_val = iprot.readI64();
              struct.setI64_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FLOAT_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.float_val = iprot.readI32();
              struct.setFloat_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DOUBLE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_val = iprot.readDouble();
              struct.setDouble_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRING_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_val = iprot.readString();
              struct.setString_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DECIMAL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.decimal_val = new Decimal();
              struct.decimal_val.read(iprot);
              struct.setDecimal_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATE_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.date_val = new DateTime();
              struct.date_val.read(iprot);
              struct.setDate_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIME_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.time_val = new DateTime();
              struct.time_val.read(iprot);
              struct.setTime_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TIMESTAMP_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timestamp_val = new Timestamp();
              struct.timestamp_val.read(iprot);
              struct.setTimestamp_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BINARY_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binary_val = iprot.readBinary();
              struct.setBinary_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BLOB_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.blob_val = new BlobChunk();
              struct.blob_val.read(iprot);
              struct.setBlob_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CLOB_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.clob_val = new ClobChunk();
              struct.clob_val.read(iprot);
              struct.setClob_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NULL_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.null_val = iprot.readBool();
              struct.setNull_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // PDX_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pdx_val = new PDXObject();
              struct.pdx_val.read(iprot);
              struct.setPdx_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // JSON_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.json_val = new JSONObject();
              struct.json_val.read(iprot);
              struct.setJson_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // JAVA_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.java_val = iprot.readBinary();
              struct.setJava_valIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ColumnValue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBool_val()) {
        oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
        oprot.writeBool(struct.bool_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetByte_val()) {
        oprot.writeFieldBegin(BYTE_VAL_FIELD_DESC);
        oprot.writeByte(struct.byte_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI16_val()) {
        oprot.writeFieldBegin(I16_VAL_FIELD_DESC);
        oprot.writeI16(struct.i16_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI32_val()) {
        oprot.writeFieldBegin(I32_VAL_FIELD_DESC);
        oprot.writeI32(struct.i32_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetI64_val()) {
        oprot.writeFieldBegin(I64_VAL_FIELD_DESC);
        oprot.writeI64(struct.i64_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFloat_val()) {
        oprot.writeFieldBegin(FLOAT_VAL_FIELD_DESC);
        oprot.writeI32(struct.float_val);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDouble_val()) {
        oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
        oprot.writeDouble(struct.double_val);
        oprot.writeFieldEnd();
      }
      if (struct.string_val != null) {
        if (struct.isSetString_val()) {
          oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
          oprot.writeString(struct.string_val);
          oprot.writeFieldEnd();
        }
      }
      if (struct.decimal_val != null) {
        if (struct.isSetDecimal_val()) {
          oprot.writeFieldBegin(DECIMAL_VAL_FIELD_DESC);
          struct.decimal_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date_val != null) {
        if (struct.isSetDate_val()) {
          oprot.writeFieldBegin(DATE_VAL_FIELD_DESC);
          struct.date_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.time_val != null) {
        if (struct.isSetTime_val()) {
          oprot.writeFieldBegin(TIME_VAL_FIELD_DESC);
          struct.time_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timestamp_val != null) {
        if (struct.isSetTimestamp_val()) {
          oprot.writeFieldBegin(TIMESTAMP_VAL_FIELD_DESC);
          struct.timestamp_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.binary_val != null) {
        if (struct.isSetBinary_val()) {
          oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
          oprot.writeBinary(struct.binary_val);
          oprot.writeFieldEnd();
        }
      }
      if (struct.blob_val != null) {
        if (struct.isSetBlob_val()) {
          oprot.writeFieldBegin(BLOB_VAL_FIELD_DESC);
          struct.blob_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clob_val != null) {
        if (struct.isSetClob_val()) {
          oprot.writeFieldBegin(CLOB_VAL_FIELD_DESC);
          struct.clob_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNull_val()) {
        oprot.writeFieldBegin(NULL_VAL_FIELD_DESC);
        oprot.writeBool(struct.null_val);
        oprot.writeFieldEnd();
      }
      if (struct.pdx_val != null) {
        if (struct.isSetPdx_val()) {
          oprot.writeFieldBegin(PDX_VAL_FIELD_DESC);
          struct.pdx_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.json_val != null) {
        if (struct.isSetJson_val()) {
          oprot.writeFieldBegin(JSON_VAL_FIELD_DESC);
          struct.json_val.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.java_val != null) {
        if (struct.isSetJava_val()) {
          oprot.writeFieldBegin(JAVA_VAL_FIELD_DESC);
          oprot.writeBinary(struct.java_val);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ColumnValueTupleSchemeFactory implements SchemeFactory {
    public ColumnValueTupleScheme getScheme() {
      return new ColumnValueTupleScheme();
    }
  }

  private static class ColumnValueTupleScheme extends TupleScheme<ColumnValue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ColumnValue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBool_val()) {
        optionals.set(0);
      }
      if (struct.isSetByte_val()) {
        optionals.set(1);
      }
      if (struct.isSetI16_val()) {
        optionals.set(2);
      }
      if (struct.isSetI32_val()) {
        optionals.set(3);
      }
      if (struct.isSetI64_val()) {
        optionals.set(4);
      }
      if (struct.isSetFloat_val()) {
        optionals.set(5);
      }
      if (struct.isSetDouble_val()) {
        optionals.set(6);
      }
      if (struct.isSetString_val()) {
        optionals.set(7);
      }
      if (struct.isSetDecimal_val()) {
        optionals.set(8);
      }
      if (struct.isSetDate_val()) {
        optionals.set(9);
      }
      if (struct.isSetTime_val()) {
        optionals.set(10);
      }
      if (struct.isSetTimestamp_val()) {
        optionals.set(11);
      }
      if (struct.isSetBinary_val()) {
        optionals.set(12);
      }
      if (struct.isSetBlob_val()) {
        optionals.set(13);
      }
      if (struct.isSetClob_val()) {
        optionals.set(14);
      }
      if (struct.isSetNull_val()) {
        optionals.set(15);
      }
      if (struct.isSetPdx_val()) {
        optionals.set(16);
      }
      if (struct.isSetJson_val()) {
        optionals.set(17);
      }
      if (struct.isSetJava_val()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetBool_val()) {
        oprot.writeBool(struct.bool_val);
      }
      if (struct.isSetByte_val()) {
        oprot.writeByte(struct.byte_val);
      }
      if (struct.isSetI16_val()) {
        oprot.writeI16(struct.i16_val);
      }
      if (struct.isSetI32_val()) {
        oprot.writeI32(struct.i32_val);
      }
      if (struct.isSetI64_val()) {
        oprot.writeI64(struct.i64_val);
      }
      if (struct.isSetFloat_val()) {
        oprot.writeI32(struct.float_val);
      }
      if (struct.isSetDouble_val()) {
        oprot.writeDouble(struct.double_val);
      }
      if (struct.isSetString_val()) {
        oprot.writeString(struct.string_val);
      }
      if (struct.isSetDecimal_val()) {
        struct.decimal_val.write(oprot);
      }
      if (struct.isSetDate_val()) {
        struct.date_val.write(oprot);
      }
      if (struct.isSetTime_val()) {
        struct.time_val.write(oprot);
      }
      if (struct.isSetTimestamp_val()) {
        struct.timestamp_val.write(oprot);
      }
      if (struct.isSetBinary_val()) {
        oprot.writeBinary(struct.binary_val);
      }
      if (struct.isSetBlob_val()) {
        struct.blob_val.write(oprot);
      }
      if (struct.isSetClob_val()) {
        struct.clob_val.write(oprot);
      }
      if (struct.isSetNull_val()) {
        oprot.writeBool(struct.null_val);
      }
      if (struct.isSetPdx_val()) {
        struct.pdx_val.write(oprot);
      }
      if (struct.isSetJson_val()) {
        struct.json_val.write(oprot);
      }
      if (struct.isSetJava_val()) {
        oprot.writeBinary(struct.java_val);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ColumnValue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.bool_val = iprot.readBool();
        struct.setBool_valIsSet(true);
      }
      if (incoming.get(1)) {
        struct.byte_val = iprot.readByte();
        struct.setByte_valIsSet(true);
      }
      if (incoming.get(2)) {
        struct.i16_val = iprot.readI16();
        struct.setI16_valIsSet(true);
      }
      if (incoming.get(3)) {
        struct.i32_val = iprot.readI32();
        struct.setI32_valIsSet(true);
      }
      if (incoming.get(4)) {
        struct.i64_val = iprot.readI64();
        struct.setI64_valIsSet(true);
      }
      if (incoming.get(5)) {
        struct.float_val = iprot.readI32();
        struct.setFloat_valIsSet(true);
      }
      if (incoming.get(6)) {
        struct.double_val = iprot.readDouble();
        struct.setDouble_valIsSet(true);
      }
      if (incoming.get(7)) {
        struct.string_val = iprot.readString();
        struct.setString_valIsSet(true);
      }
      if (incoming.get(8)) {
        struct.decimal_val = new Decimal();
        struct.decimal_val.read(iprot);
        struct.setDecimal_valIsSet(true);
      }
      if (incoming.get(9)) {
        struct.date_val = new DateTime();
        struct.date_val.read(iprot);
        struct.setDate_valIsSet(true);
      }
      if (incoming.get(10)) {
        struct.time_val = new DateTime();
        struct.time_val.read(iprot);
        struct.setTime_valIsSet(true);
      }
      if (incoming.get(11)) {
        struct.timestamp_val = new Timestamp();
        struct.timestamp_val.read(iprot);
        struct.setTimestamp_valIsSet(true);
      }
      if (incoming.get(12)) {
        struct.binary_val = iprot.readBinary();
        struct.setBinary_valIsSet(true);
      }
      if (incoming.get(13)) {
        struct.blob_val = new BlobChunk();
        struct.blob_val.read(iprot);
        struct.setBlob_valIsSet(true);
      }
      if (incoming.get(14)) {
        struct.clob_val = new ClobChunk();
        struct.clob_val.read(iprot);
        struct.setClob_valIsSet(true);
      }
      if (incoming.get(15)) {
        struct.null_val = iprot.readBool();
        struct.setNull_valIsSet(true);
      }
      if (incoming.get(16)) {
        struct.pdx_val = new PDXObject();
        struct.pdx_val.read(iprot);
        struct.setPdx_valIsSet(true);
      }
      if (incoming.get(17)) {
        struct.json_val = new JSONObject();
        struct.json_val.read(iprot);
        struct.setJson_valIsSet(true);
      }
      if (incoming.get(18)) {
        struct.java_val = iprot.readBinary();
        struct.setJava_valIsSet(true);
      }
    }
  }

}

