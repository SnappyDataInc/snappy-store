/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package com.pivotal.gemfirexd.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PDXSchemaNode implements org.apache.thrift.TBase<PDXSchemaNode, PDXSchemaNode._Fields>, java.io.Serializable, Comparable<PDXSchemaNode> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PDXSchemaNode");

  private static final org.apache.thrift.protocol.TField SINGLE_FIELD_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("singleFieldDesc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD_DESCS_FIELD_DESC = new org.apache.thrift.protocol.TField("fieldDescs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField REF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("refId", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PDXSchemaNodeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PDXSchemaNodeTupleSchemeFactory());
  }

  public FieldDescriptor singleFieldDesc; // optional
  public List<FieldDescriptor> fieldDescs; // optional
  public int refId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SINGLE_FIELD_DESC((short)1, "singleFieldDesc"),
    FIELD_DESCS((short)2, "fieldDescs"),
    REF_ID((short)3, "refId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SINGLE_FIELD_DESC
          return SINGLE_FIELD_DESC;
        case 2: // FIELD_DESCS
          return FIELD_DESCS;
        case 3: // REF_ID
          return REF_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REFID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SINGLE_FIELD_DESC,_Fields.FIELD_DESCS,_Fields.REF_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SINGLE_FIELD_DESC, new org.apache.thrift.meta_data.FieldMetaData("singleFieldDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldDescriptor.class)));
    tmpMap.put(_Fields.FIELD_DESCS, new org.apache.thrift.meta_data.FieldMetaData("fieldDescs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FieldDescriptor.class))));
    tmpMap.put(_Fields.REF_ID, new org.apache.thrift.meta_data.FieldMetaData("refId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PDXSchemaNode.class, metaDataMap);
  }

  public PDXSchemaNode() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PDXSchemaNode(PDXSchemaNode other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSingleFieldDesc()) {
      this.singleFieldDesc = new FieldDescriptor(other.singleFieldDesc);
    }
    if (other.isSetFieldDescs()) {
      List<FieldDescriptor> __this__fieldDescs = new ArrayList<FieldDescriptor>(other.fieldDescs.size());
      for (FieldDescriptor other_element : other.fieldDescs) {
        __this__fieldDescs.add(new FieldDescriptor(other_element));
      }
      this.fieldDescs = __this__fieldDescs;
    }
    this.refId = other.refId;
  }

  public PDXSchemaNode deepCopy() {
    return new PDXSchemaNode(this);
  }

  @Override
  public void clear() {
    this.singleFieldDesc = null;
    this.fieldDescs = null;
    setRefIdIsSet(false);
    this.refId = 0;
  }

  public FieldDescriptor getSingleFieldDesc() {
    return this.singleFieldDesc;
  }

  public PDXSchemaNode setSingleFieldDesc(FieldDescriptor singleFieldDesc) {
    this.singleFieldDesc = singleFieldDesc;
    return this;
  }

  public void unsetSingleFieldDesc() {
    this.singleFieldDesc = null;
  }

  /** Returns true if field singleFieldDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetSingleFieldDesc() {
    return this.singleFieldDesc != null;
  }

  public void setSingleFieldDescIsSet(boolean value) {
    if (!value) {
      this.singleFieldDesc = null;
    }
  }

  public int getFieldDescsSize() {
    return (this.fieldDescs == null) ? 0 : this.fieldDescs.size();
  }

  public java.util.Iterator<FieldDescriptor> getFieldDescsIterator() {
    return (this.fieldDescs == null) ? null : this.fieldDescs.iterator();
  }

  public void addToFieldDescs(FieldDescriptor elem) {
    if (this.fieldDescs == null) {
      this.fieldDescs = new ArrayList<FieldDescriptor>();
    }
    this.fieldDescs.add(elem);
  }

  public List<FieldDescriptor> getFieldDescs() {
    return this.fieldDescs;
  }

  public PDXSchemaNode setFieldDescs(List<FieldDescriptor> fieldDescs) {
    this.fieldDescs = fieldDescs;
    return this;
  }

  public void unsetFieldDescs() {
    this.fieldDescs = null;
  }

  /** Returns true if field fieldDescs is set (has been assigned a value) and false otherwise */
  public boolean isSetFieldDescs() {
    return this.fieldDescs != null;
  }

  public void setFieldDescsIsSet(boolean value) {
    if (!value) {
      this.fieldDescs = null;
    }
  }

  public int getRefId() {
    return this.refId;
  }

  public PDXSchemaNode setRefId(int refId) {
    this.refId = refId;
    setRefIdIsSet(true);
    return this;
  }

  public void unsetRefId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  /** Returns true if field refId is set (has been assigned a value) and false otherwise */
  public boolean isSetRefId() {
    return EncodingUtils.testBit(__isset_bitfield, __REFID_ISSET_ID);
  }

  public void setRefIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SINGLE_FIELD_DESC:
      if (value == null) {
        unsetSingleFieldDesc();
      } else {
        setSingleFieldDesc((FieldDescriptor)value);
      }
      break;

    case FIELD_DESCS:
      if (value == null) {
        unsetFieldDescs();
      } else {
        setFieldDescs((List<FieldDescriptor>)value);
      }
      break;

    case REF_ID:
      if (value == null) {
        unsetRefId();
      } else {
        setRefId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SINGLE_FIELD_DESC:
      return getSingleFieldDesc();

    case FIELD_DESCS:
      return getFieldDescs();

    case REF_ID:
      return Integer.valueOf(getRefId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SINGLE_FIELD_DESC:
      return isSetSingleFieldDesc();
    case FIELD_DESCS:
      return isSetFieldDescs();
    case REF_ID:
      return isSetRefId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PDXSchemaNode)
      return this.equals((PDXSchemaNode)that);
    return false;
  }

  public boolean equals(PDXSchemaNode that) {
    if (that == null)
      return false;

    boolean this_present_singleFieldDesc = true && this.isSetSingleFieldDesc();
    boolean that_present_singleFieldDesc = true && that.isSetSingleFieldDesc();
    if (this_present_singleFieldDesc || that_present_singleFieldDesc) {
      if (!(this_present_singleFieldDesc && that_present_singleFieldDesc))
        return false;
      if (!this.singleFieldDesc.equals(that.singleFieldDesc))
        return false;
    }

    boolean this_present_fieldDescs = true && this.isSetFieldDescs();
    boolean that_present_fieldDescs = true && that.isSetFieldDescs();
    if (this_present_fieldDescs || that_present_fieldDescs) {
      if (!(this_present_fieldDescs && that_present_fieldDescs))
        return false;
      if (!this.fieldDescs.equals(that.fieldDescs))
        return false;
    }

    boolean this_present_refId = true && this.isSetRefId();
    boolean that_present_refId = true && that.isSetRefId();
    if (this_present_refId || that_present_refId) {
      if (!(this_present_refId && that_present_refId))
        return false;
      if (this.refId != that.refId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PDXSchemaNode other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSingleFieldDesc()).compareTo(other.isSetSingleFieldDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingleFieldDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singleFieldDesc, other.singleFieldDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFieldDescs()).compareTo(other.isSetFieldDescs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFieldDescs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fieldDescs, other.fieldDescs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefId()).compareTo(other.isSetRefId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refId, other.refId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PDXSchemaNode(");
    boolean first = true;

    if (isSetSingleFieldDesc()) {
      sb.append("singleFieldDesc:");
      if (this.singleFieldDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.singleFieldDesc);
      }
      first = false;
    }
    if (isSetFieldDescs()) {
      if (!first) sb.append(", ");
      sb.append("fieldDescs:");
      if (this.fieldDescs == null) {
        sb.append("null");
      } else {
        sb.append(this.fieldDescs);
      }
      first = false;
    }
    if (isSetRefId()) {
      if (!first) sb.append(", ");
      sb.append("refId:");
      sb.append(this.refId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (singleFieldDesc != null) {
      singleFieldDesc.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PDXSchemaNodeStandardSchemeFactory implements SchemeFactory {
    public PDXSchemaNodeStandardScheme getScheme() {
      return new PDXSchemaNodeStandardScheme();
    }
  }

  private static class PDXSchemaNodeStandardScheme extends StandardScheme<PDXSchemaNode> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PDXSchemaNode struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SINGLE_FIELD_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.singleFieldDesc = new FieldDescriptor();
              struct.singleFieldDesc.read(iprot);
              struct.setSingleFieldDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD_DESCS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.fieldDescs = new ArrayList<FieldDescriptor>(_list96.size);
                for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                {
                  FieldDescriptor _elem98;
                  _elem98 = new FieldDescriptor();
                  _elem98.read(iprot);
                  struct.fieldDescs.add(_elem98);
                }
                iprot.readListEnd();
              }
              struct.setFieldDescsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.refId = iprot.readI32();
              struct.setRefIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PDXSchemaNode struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.singleFieldDesc != null) {
        if (struct.isSetSingleFieldDesc()) {
          oprot.writeFieldBegin(SINGLE_FIELD_DESC_FIELD_DESC);
          struct.singleFieldDesc.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fieldDescs != null) {
        if (struct.isSetFieldDescs()) {
          oprot.writeFieldBegin(FIELD_DESCS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fieldDescs.size()));
            for (FieldDescriptor _iter99 : struct.fieldDescs)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRefId()) {
        oprot.writeFieldBegin(REF_ID_FIELD_DESC);
        oprot.writeI32(struct.refId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PDXSchemaNodeTupleSchemeFactory implements SchemeFactory {
    public PDXSchemaNodeTupleScheme getScheme() {
      return new PDXSchemaNodeTupleScheme();
    }
  }

  private static class PDXSchemaNodeTupleScheme extends TupleScheme<PDXSchemaNode> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PDXSchemaNode struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSingleFieldDesc()) {
        optionals.set(0);
      }
      if (struct.isSetFieldDescs()) {
        optionals.set(1);
      }
      if (struct.isSetRefId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSingleFieldDesc()) {
        struct.singleFieldDesc.write(oprot);
      }
      if (struct.isSetFieldDescs()) {
        {
          oprot.writeI32(struct.fieldDescs.size());
          for (FieldDescriptor _iter100 : struct.fieldDescs)
          {
            _iter100.write(oprot);
          }
        }
      }
      if (struct.isSetRefId()) {
        oprot.writeI32(struct.refId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PDXSchemaNode struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.singleFieldDesc = new FieldDescriptor();
        struct.singleFieldDesc.read(iprot);
        struct.setSingleFieldDescIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fieldDescs = new ArrayList<FieldDescriptor>(_list101.size);
          for (int _i102 = 0; _i102 < _list101.size; ++_i102)
          {
            FieldDescriptor _elem103;
            _elem103 = new FieldDescriptor();
            _elem103.read(iprot);
            struct.fieldDescs.add(_elem103);
          }
        }
        struct.setFieldDescsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refId = iprot.readI32();
        struct.setRefIdIsSet(true);
      }
    }
  }

}

